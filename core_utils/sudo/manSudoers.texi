SUDOERS(5)                  BSD File Formats Manual                 SUDOERS(5)

NAME
     sudoers — плагин политики безопасности sudo по умолчанию

DESCRIPTION
     Плагин политики sudoers определяет привилегии пользователя sudo. Это
     плагин политики sudo по умолчанию. Политика определяется файлом /etc/sudoers или,
     необязательно, в LDAP. Формат политики подробно описан в разделе SUDOERS FILE FORMAT.
     Информацию о хранении информации о политике sudoers в LDAP см. В sudoers.ldap(5).

   Настройка sudo.conf для sudoers
     sudo обращается к файлу sudo.conf(5), чтобы определить, какую политику и
     подключаемые модули регистрации ввода-вывода загрузить. Если файл sudo.conf(5)
     отсутствует или не содержит строк плагинов, sudoers будет использоваться для
     принятия решений о политике и ведения журнала ввода/вывода. Чтобы явно настроить
     sudo.conf(5) для использования плагина sudoers, можно использовать следующую
     конфигурацию.

           Plugin sudoers_policy sudoers.so
           Plugin sudoers_io sudoers.so

     Начиная с sudo 1.8.5, можно указать необязательные аргументы для плагина sudoers
     в файле sudo.conf(5). Эти аргументы, если они присутствуют, должны быть указаны
     после пути к плагину (то есть после sudoers.so). Можно указать несколько
     аргументов, разделенных пробелом. Например:

           Plugin sudoers_policy sudoers.so sudoers_mode=0400

     Поддерживаются следующие аргументы плагина:

     ldap_conf=pathname
               Аргумент ldap_conf может использоваться для переопределения пути
               по умолчанию к файлу ldap.conf.

     ldap_secret=pathname
               Аргумент ldap_secret может использоваться для переопределения пути
               по умолчанию к файлу ldap.secret.

     sudoers_file=pathname
               Аргумент sudoers_file может использоваться для переопределения пути
               по умолчанию к файлу sudoers.

     sudoers_uid=uid
               Аргумент sudoers_uid может использоваться для переопределения владельца
               по умолчанию файла sudoers. Он должен быть указан как числовой
               пользователь ID.

     sudoers_gid=gid
               Аргумент sudoers_gid может использоваться для переопределения группы
               по умолчанию файла sudoers. Он должен быть указан как числовая группа
               ID (не имя группы).

     sudoers_mode=mode
               Аргумент sudoers_mode может использоваться для переопределения режима
               файла по умолчанию для файла sudoers. Это должно быть указано как
               восьмеричное значение.

     Для получения дополнительной информации о настройке sudo.conf(5), пожалуйста,
     обратитесь к его руководству.

   User Authentication
     Политика безопасности sudoers требует, чтобы большинство пользователей
     проходило аутентификацию, прежде чем они смогут использовать sudo. Пароль не
     требуется, если вызывающий пользователь является пользователем root, если целевой
     пользователь совпадает с вызывающим пользователем, или если политика отключила
     аутентификацию для пользователя или команды. В отличие от su(1), когда sudoers
     требует аутентификации, он проверяет учетные данные вызывающего пользователя, а
     не учетные данные целевого пользователя (или пользователя root). Это можно
     изменить с помощью флагов rootpw, targetpw и runaspw, как описано ниже.

     Если пользователь, который не указан в политике, пытается выполнить команду
     через sudo, почта отправляется в соответствующие органы. Адрес, используемый
     для такой почты, настраивается с помощью записи mailto Defaults (описано ниже)
     и по умолчанию root.

     Обратите внимание, что письмо не будет отправлено, если неавторизованный
     пользователь попытается запустить sudo с опцией -l или -v, если не будет
     ошибки аутентификации и не включены флаги mail_always или mail_badpass. Это
     позволяет пользователям самим определять, разрешено ли им использовать sudo. Все
     попытки запустить sudo (успешные или нет) будут регистрироваться независимо от
     того, отправлено письмо или нет.

     Если sudo запускается пользователем root и установлена ​​переменная окружения
     SUDO_USER, политика sudoers будет использовать это значение для определения того,
     кто является действительным пользователем. Это может использоваться пользователем
     для регистрации команд через sudo, даже если была вызвана корневая оболочка. Это
     также позволяет опции -e оставаться полезной, даже если она вызывается через скрипт
     или программу sudo-run. Однако обратите внимание, что поиск файла sudoers
     по-прежнему выполняется для пользователя root, а не для пользователя, указанного в
     SUDO_USER.

     sudoers использует файлы временных меток для каждого пользователя для кэширования
     учетных данных. Как только пользователь прошел аутентификацию, записывается запись,
     содержащая uid, который использовался для аутентификации, терминальный сеанс ID и
     метку времени (с использованием монотонных часов, если таковые имеются). Затем
     пользователь может использовать sudo без пароля в течение короткого периода времени
     (15 минут, если не отменено параметром тайм-аута). По умолчанию sudoers использует
     отдельную запись для каждого tty, что означает, что сеансы входа пользователя в
     систему аутентифицируются отдельно. Опцию tty_tickets можно отключить, чтобы
     принудительно использовать одну временную отметку для всех сеансов пользователя.

   Logging
     sudoers может регистрировать как успешные, так и неудачные попытки (а также ошибки)
     в syslog(3), в файл журнала или в оба. По умолчанию sudoers будет регистрироваться
     через syslog(3), но это можно изменить с помощью настроек по умолчанию syslog и
     logfile. Смотрите LOG FORMAT для описания формата файла журнала.

     sudoers также способен запускать команды в псевдотерминале и регистрировать все
     входные и/или выходные данные. Стандартный ввод, стандартный вывод и стандартная
     ошибка могут регистрироваться, даже если они не связаны с терминалом. Ведение журнала
     ввода-вывода не включено по умолчанию, но его можно включить с помощью параметров
     log_input и log_output, а также тегов команды LOG_INPUT и LOG_OUTPUT.
     См. I/O LOG FILES для получения подробной информации о том, как хранятся
     файлы журнала ввода-вывода.

   Command environment
     Поскольку переменные среды могут влиять на поведение программы, sudoers
     предоставляет средства для ограничения того, какие переменные из среды пользователя
     наследуются командой, которая будет запущена. Существует два различных способа
     работы с переменными окружения.

     По умолчанию опция env_reset включена. Это приводит к выполнению команд в
     новой, минимальной среде. В AIX (и системах Linux без PAM) среда инициализируется
     содержимым файла /etc/environment. Новая среда содержит переменные TERM, PATH,
     HOME, MAIL, SHELL, LOGNAME, USER, USERNAME и SUDO_* в дополнение к переменным из
     процесса вызова, разрешенного опциями env_check и env_keep. Это фактически белый
     список для переменных среды. Переменные окружения со значением, начинающимся с (),
     удаляются, если только части имени и значения не соответствуют env_keep или env_check,
     так как они будут интерпретироваться как функции более старых версий оболочки bash.
     До версии 1.8.11 такие переменные всегда удалялись.

     Однако, если опция env_reset отключена, любые переменные, явно не запрещенные
     опциями env_check и env_delete, наследуются от вызывающего процесса. В этом
     случае env_check и env_delete ведут себя как черный список. Переменные среды со
     значением, начинающимся с (), всегда удаляются, даже если они не соответствуют
     ни одному из черных списков. Поскольку невозможно занести в черный список все
     потенциально опасные переменные среды, рекомендуется использовать поведение по
     умолчанию env_reset.

     По умолчанию переменные среды сопоставляются по имени. Однако, если шаблон содержит
     знак равенства (‘=’), имя и значение переменной должны совпадать. Например, функция
     оболочки bash в старом стиле (pre-shellshock) может быть подобрана следующим образом:

         env_keep += "my_func=()*"

     Без суффикса “=()*” это не будет соответствовать, так как функции оболочки bash
     старого стиля не сохраняются по умолчанию.

     Полный список переменных среды, которые sudo разрешает или запрещает, содержится
     в выходных данных “sudo -V” при запуске от имени пользователя root. Обратите
     внимание, что этот список зависит от операционной системы, в которой работает sudo.

     В системах, поддерживающих PAM, где модуль pam_env включен для sudo, переменные
     в среде PAM могут быть объединены со средой. Если переменная в среде PAM уже
     присутствует в пользовательской среде, значение будет переопределено только в том
     случае, если переменная не была сохранена sudoers. Когда включен env_reset,
     переменные, сохраняемые из среды вызывающего пользователя списком env_keep,
     имеют приоритет над переменными в среде PAM. Когда env_reset отключен, переменные,
     представляющие среду вызывающего пользователя, имеют приоритет над переменными в
     среде PAM, если они не соответствуют шаблону в списке env_delete.

     Обратите внимание, что динамический компоновщик в большинстве операционных систем
     удаляет переменные, которые могут управлять динамически компоновкой из среды
     исполняемых файлов setuid, включая sudo. В зависимости от операционной системы это
     может включать в себя _RLD*, DYLD_*, LD_*, LDR_*, LIBPATH, SHLIB_PATH и другие.
     Переменные этого типа удаляются из среды еще до того, как sudo даже начинает
     выполнение, и поэтому sudo не может их сохранить.

     В особом случае, если указан параметр sudo -i (начальный вход в систему), sudoers
     будет инициализировать среду независимо от значения env_reset. Переменные DISPLAY,
     PATH и TERM остаются неизменными; HOME, MAIL, SHELL, USER, и LOGNAME устанавливаются
     на основе целевого пользователя. В AIX (и системах Linux без PAM) также включено
     содержимое /etc/environment. Все остальные переменные среды удаляются.

     Наконец, если опция env_file определена, любые переменные, присутствующие в
     этом файле, будут установлены в свои указанные значения, если они не будут
     конфликтовать с существующей переменной среды.

SUDOERS FILE FORMAT
     Файл sudoers состоит из двух типов записей: псевдонимы (в основном переменные) и
     пользовательские спецификации (которые указывают, кто что может запускать).

     Когда для пользователя совпадают несколько записей, они применяются по порядку.
     При наличии нескольких совпадений используется последнее совпадение (которое не
     обязательно является наиболее конкретным совпадением).

     Грамматика файла sudoers будет описана ниже в расширенной форме Бэкуса-Наура (EBNF).
     Не отчаивайтесь, если вы не знакомы с EBNF; это довольно просто, и приведенные
     ниже определения аннотированы.

   Краткое руководство по EBNF
     EBNF - это краткий и точный способ описания грамматики языка.
     Каждое определение EBNF состоит из правил производства. Например.,

     symbol ::= definition | alternate1 | alternate2 ...

     Каждое производственное правило ссылается на другие и, таким образом, составляет
     грамматику для языка. EBNF также содержит следующие операторы, которые многие
     читатели узнают по регулярным выражениям. Однако не путайте их с «подстановочными»
     символами, которые имеют разные значения.

     ?     Означает, что предыдущий символ (или группа символов) является
           необязательным. То есть оно может появиться один раз или не
           появиться вообще.

     *     Означает, что предыдущий символ (или группа символов) может появляться
           ноль или более раз.

     +     Означает, что предыдущий символ (или группа символов) может появляться
           один или несколько раз.

     Круглые скобки могут использоваться для группировки символов. Для ясности мы
     будем использовать одинарные кавычки (''), чтобы обозначить дословную символьную
     строку (в отличие от имени символа).

   Aliases
     Существует четыре вида псевдонимов: User_Alias, Runas_Alias, Host_Alias и
     Cmnd_Alias.

     Alias ::= 'User_Alias'  User_Alias (':' User_Alias)* |
               'Runas_Alias' Runas_Alias (':' Runas_Alias)* |
               'Host_Alias'  Host_Alias (':' Host_Alias)* |
               'Cmnd_Alias'  Cmnd_Alias (':' Cmnd_Alias)*

     User_Alias ::= NAME '=' User_List

     Runas_Alias ::= NAME '=' Runas_List

     Host_Alias ::= NAME '=' Host_List

     Cmnd_Alias ::= NAME '=' Cmnd_List

     NAME ::= [A-Z]([A-Z][0-9]_)*

     Каждое определение псевдонима имеет вид

     Alias_Type NAME = item1, item2, ...

     где Alias_Type является одним из User_Alias, Runas_Alias, Host_Alias
     или Cmnd_Alias.  NAME - это строка из заглавных букв, цифр и символов
     подчеркивания (‘_’). NAME должно начинаться с заглавной буквы. Можно
     поместить несколько определений псевдонимов одного типа в одну строку,
     соединенную двоеточием (‘:’).  E.g.,

     Alias_Type NAME = item1, item2, item3 : NAME = item4, item5

     Синтаксическая ошибка - переопределять существующий псевдоним.
     Можно использовать одно и то же имя для псевдонимов разных типов, но
     это не рекомендуется.

     Ниже приведены определения того, что является действительным псевдонимом.

     User_List ::= User |
                   User ',' User_List

     User ::= '!'* user name |
              '!'* #uid |
              '!'* %group |
              '!'* %#gid |
              '!'* +netgroup |
              '!'* %:nonunix_group |
              '!'* %:#nonunix_gid |
              '!'* User_Alias

     User_List состоит из одного или нескольких имен пользователей, идентификаторов
     пользователей (с префиксом ‘#’), имен системных групп и IDs (с префиксом ‘%’ и
     ‘%#’ соответственно), сетевых групп (с префиксом ‘+’), имен не-Unix групп и IDs
     (с префиксом с ‘%:’ и ‘%:#’ соответственно) и User_Aliases. Каждый элемент списка
     может начинаться с нуля или более операторов ‘!’. Нечетное количество операторов
     ‘!’ сводит на нет значение элемента; четное число просто отменяет друг друга.
     Пользовательские сетевые группы сопоставляются с использованием только
     пользователей и членов домена; член хоста не используется при сопоставлении.

     Имя пользователя, uid, group, gid, netgroup, nonunix_group или nonunix_gid может
     быть заключено в двойные кавычки, чтобы избежать необходимости экранирования
     специальных символов. Альтернативно, специальные символы могут быть указаны в
     экранированном шестнадцатеричном режиме, например fl_x20 для космоса. При
     использовании двойных кавычек любые префиксные символы должны быть включены
     в кавычки.

     Фактический синтаксис nonunix_group и nonunix_gid зависит от подключаемого
     модуля основного провайдера. Например, плагин QAS AD поддерживает следующие
     форматы:

     ·     Группа в одном домене: "%:Group Name"

     ·     Группа в любом домене: "%:Group Name@FULLY.QUALIFIED.DOMAIN"

     ·     Группа SID: "%:S-1-2-34-5678901234-5678901234-5678901234-567"

     Смотрите GROUP PROVIDER PLUGINS для получения дополнительной информации.

     Обратите внимание, что кавычки вокруг имен групп являются необязательными.
     Строки без кавычек должны использовать обратную косую черту (‘\’) для
     экранирования пробелов и специальных символов. См. Другие специальные символы
     и зарезервированные слова для получения списка символов, которые необходимо
     экранировать.

     Runas_List ::= Runas_Member |
                    Runas_Member ',' Runas_List

     Runas_Member ::= '!'* user name |
                      '!'* #uid |
                      '!'* %group |
                      '!'* %#gid |
                      '!'* %:nonunix_group |
                      '!'* %:#nonunix_gid |
                      '!'* +netgroup |
                      '!'* Runas_Alias

     A Runas_List похож на User_List за исключением того, что вместо User_Aliases
     он может содержать Runas_Aliases.  Обратите внимание, что имена пользователей
     и группы сопоставляются как строки. Другими словами, два пользователя (groups)
     с одинаковым uid (gid) считаются разными. Если вы хотите сопоставить все имена
     пользователей с одинаковым uid  (например, root и toor), вы можете вместо этого
     использовать uid (#0 в данном примере).

     Host_List ::= Host |
                   Host ',' Host_List

     Host ::= '!'* host name |
              '!'* ip_addr |
              '!'* network(/netmask)? |
              '!'* +netgroup |
              '!'* Host_Alias

     Host_List состоит из одного или нескольких имен хостов, адреса IP, номера сетей,
     сетевые группы (с префиксом '+') и другие псевдонимы. Опять же, значение элемента
     может быть сведено на нет с помощью оператора '!'. Сетевые группы хостов
     сопоставляются с использованием только хоста (квалифицированного и
     неквалифицированного) и членов домена; пользовательский элемент не используется
     при сопоставлении. Если вы укажете номер сети без маски сети, sudo будет
     запрашивать каждый из сетевых интерфейсов локального хоста и, если номер сети
     соответствует одному из сетевых интерфейсов хостов, будет использовать маску
     сети этого интерфейса. Маска сети может быть указана либо в стандартном
     обозначении IP-адреса(e.g. 255.255.255.0 or ffff:ffff:ffff:ffff::), или
     в CIDR нотациии (количество бит, e.g. 24 or 64). Имя хоста может включать
     подстановочные знаки в стиле оболочки (см. Раздел Подстановочные знаки ниже), но
     если команда имени хоста на вашем компьютере не возвращает полное имя хоста, вам
     нужно будет использовать опцию fqdn, чтобы подстановочные знаки были полезны.
     Обратите внимание, что sudo проверяет только реальные сетевые интерфейсы; это
     означает, что IP-адрес 127.0.0.1 (localhost) никогда не будет совпадать. Кроме того,
     имя хоста 'localhost' будет совпадать только в том случае, если это фактическое
     имя хоста, что обычно имеет место только для не сетевых систем.

     digest ::= [A-Fa-f0-9]+ |
                [[A-Za-z0-9+/=]+

     Digest_Spec ::= "sha224" ':' digest |
                     "sha256" ':' digest |
                     "sha384" ':' digest |
                     "sha512" ':' digest

     Cmnd_List ::= Cmnd |
                   Cmnd ',' Cmnd_List

     command name ::= file name |
                      file name args |
                      file name '""'

     Cmnd ::= Digest_Spec? '!'* command name |
              '!'* directory |
              '!'* "sudoedit" |
              '!'* Cmnd_Alias

     Cmnd_List - это список из одного или нескольких имен команд, каталогов и других
     псевдонимов. Имя команды - это полное имя файла, которое может включать
     подстановочные знаки в стиле оболочки (см. Раздел «Подстановочные знаки» ниже).
     Простое имя файла позволяет пользователю запускать команду с любыми аргументами,
     которые он/она желает. Однако вы также можете указать аргументы командной строки
     (включая символы подстановки). Кроме того, вы можете указать "", чтобы указать,
     что команда может выполняться только без аргументов командной строки. Каталог -
     это полное имя пути, оканчивающееся на '/'. Когда вы укажете каталог в Cmnd_List,
     пользователь сможет запустить любой файл в этом каталоге (но не в каких-либо
     его подкаталогах).

     Если Cmnd имеет связанные аргументы командной строки, то аргументы в Cmnd
     должны точно соответствовать аргументам, заданным пользователем в командной строке
     (или совпадать с подстановочными знаками, если они есть). Обратите внимание, что
     следующие символы должны быть экранированы символом ‘\’, если они используются в
     аргументах команды: ‘,’, ‘:’, ‘=’, ‘\’. Встроенная команда “sudoedit” используется,
     чтобы позволить пользователю запускать sudo с опцией -e (или как sudoedit). Она
     может принимать аргументы командной строки так же, как обычная команда. Обратите
     внимание, что “sudoedit” - это команда, встроенная в сам sudo, и она должна быть
     указана в файле sudoers без начального пути.

     Если к имени команды добавляется префикс Digest_Spec, команда будет успешно
     соответствовать, только если она может быть проверена с использованием указанного
     дайджеста SHA-2. Поддерживаются следующие форматы дайджеста: sha224, sha256, sha384
     и sha512. Строка может быть указана в формате hex или base64 (base64 более компактен).
     Существует несколько утилит, способных генерировать дайджесты SHA-2 в
     шестнадцатеричном формате, таких как openssl, shasum, sha224sum, sha256sum,
     sha384sum, sha512sum.

     Например, используя openssl:

     $ openssl dgst -sha224 /bin/ls
     SHA224(/bin/ls)= 118187da8364d490b4a7debbf483004e8f3e053ec954309de2c41a25

     Также можно использовать openssl для генерации вывода base64:

     $ openssl dgst -binary -sha224 /bin/ls | openssl base64
     EYGH2oNk1JC0p9679IMATo8+BT7JVDCd4sQaJQ==

     Предупреждение: если у пользователя есть доступ на запись к самой команде (напрямую
     или с помощью команды sudo), пользователь может заменить команду после выполнения
     дайджест-проверки, но до ее выполнения. Аналогичное условие гонки существует в
     системах, в которых отсутствует системный вызов fexecve(2), когда каталог, в котором
     находится команда, доступен для записи пользователю.

     Дайджесты команд поддерживаются только версией 1.8.7 или выше.

   Defaults
     Некоторые параметры конфигурации могут быть изменены со своих значений по умолчанию
     во время выполнения через одну или несколько строк Default_Entry. Они могут повлиять
     на всех пользователей на любом хосте, всех пользователей на конкретном хосте,
     определенного пользователя, конкретной команды или команд, выполняемых от имени
     конкретного пользователя. Обратите внимание, что записи для каждой команды могут не
     включать аргументы командной строки. Если вам нужно указать аргументы, определите
     Cmnd_Alias и укажите на него ссылку.

     Default_Type ::= 'Defaults' |
                      'Defaults' '@' Host_List |
                      'Defaults' ':' User_List |
                      'Defaults' '!' Cmnd_List |
                      'Defaults' '>' Runas_List

     Default_Entry ::= Default_Type Parameter_List

     Parameter_List ::= Parameter |
                        Parameter ',' Parameter_List

     Parameter ::= Parameter '=' Value |
                   Parameter '+=' Value |
                   Parameter '-=' Value |
                   '!'* Parameter

     Параметры могут быть флагами, целочисленными значениями, строками или списками.
     Флаги неявно являются булевыми и могут быть отключены с помощью оператора '!'.
     Некоторые целочисленные, строковые и списочные параметры также могут использоваться
     в логическом контексте для их отключения. Значения могут быть заключены в двойные
     кавычки (""), если они содержат несколько слов. Специальные символы могут быть
     экранированы обратной косой чертой (‘\’).

     Списки имеют два дополнительных оператора присваивания, += и -=. Эти операторы
     используются для добавления и удаления из списка соответственно. Не является ошибкой
     использование оператора -= для удаления элемента, которого нет в списке.

     Записи в Defaults анализируются в следующем порядке: общие, хост и пользовательские
     Defaults сначала, затем runas Defaults и наконец команды по умолчанию.

     Смотри SUDOERS OPTIONS список поддерживаемых параметров Defaults.

   User specification
     User_Spec ::= User_List Host_List '=' Cmnd_Spec_List \
                   (':' Host_List '=' Cmnd_Spec_List)*

     Cmnd_Spec_List ::= Cmnd_Spec |
                        Cmnd_Spec ',' Cmnd_Spec_List

     Cmnd_Spec ::= Runas_Spec? SELinux_Spec? Tag_Spec* Cmnd

     Runas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'

     SELinux_Spec ::= ('ROLE=role' | 'TYPE=type')

     Tag_Spec ::= ('EXEC:' | 'NOEXEC:' | 'FOLLOW:' | 'NOFOLLOW' |
                   'LOG_INPUT:' | 'NOLOG_INPUT:' | 'LOG_OUTPUT:' |
                   'NOLOG_OUTPUT:' | 'MAIL:' | 'NOMAIL:' | 'PASSWD:' |
                   'NOPASSWD:' | 'SETENV:' | 'NOSETENV:')

     Пользовательская спецификация определяет, какие команды пользователь может
     выполнять (и какие пользователи) на указанных хостах. По умолчанию команды
     запускаются от имени пользователя root, но это можно изменить для каждой отдельной
     команды.

     Базовая структура пользовательской спецификации “who where = (as_whom)
     what”. Давайте разберем это на его составные части:

   Runas_Spec
     Runas_Spec определяет пользователя и/или группу, в которой может выполняться
     команда. Полностью определенный Runas_Spec состоит из двух Runas_Lists (как
     определено выше), разделенных двоеточием (‘:’) и заключенных в набор символов.
     Первый Runas_List указывает, для каких пользователей команда может быть запущена
     с помощью опции sudo -u. Второй определяет список групп, которые можно указать
     с помощью опции sudo -g. Если оба Runas_Lists указаны, команда может быть
     запущена с любой комбинацией пользователей и групп, перечисленных в их
     соответствующем Runas_Lists. Если указано только первое, команда может быть запущена
     от имени любого пользователя в списке, но опция -g не может быть указана. Если первый
     Runas_List пуст, но второй указан, команда может быть запущена как вызывающий
     пользователь с группой, установленной на любую из перечисленных в Runas_List. Если
     оба Runas_Lists пусты, команда может быть запущена только как вызывающий пользователь.
     Если Runas_Spec не указан, команда может быть запущена от имени root, а группа не
     указана.

     Runas_Spec устанавливает значение по умолчанию для команд, следующих за ним. Что
     это означает, что для входа:

     dgb     boulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm

     Пользователь dgb может запустить /bin/ls, /bin/kill, и /usr/bin/lprm—but только
     как оператор.  Как,

     $ sudo -u operator /bin/ls

     Также возможно переопределить Runas_Spec позже в записи. Если мы изменим
     запись так:

     dgb     boulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm

     Тогда пользователю dgb теперь разрешено запускать /bin/ls от имени operator,
     но /bin/kill и /usr/bin/lprm от имени пользователя root.

     Мы можем расширить это, чтобы dgb мог запускать /bin/ls с пользователем или
     группой, установленными на operator:

     dgb     boulder = (operator : operator) /bin/ls, (root) /bin/kill,\
             /usr/bin/lprm

     Обратите внимание, что хотя групповая часть Runas_Spec позволяет пользователю
     выполнять команду с этой группой, это не заставляет пользователя делать это. Если
     в командной строке не указана группа, команда будет выполняться с группой, указанной
     в записи базы данных паролей целевого пользователя. Следующее все будет разрешено
     входом sudoers выше:

     $ sudo -u operator /bin/ls
     $ sudo -u operator -g operator /bin/ls
     $ sudo -g operator /bin/ls

     В следующем примере пользователь tcm может запускать команды, которые обращаются
     к файлу модемного устройства с группой номеронабирателя.

     tcm     boulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\
             /usr/local/bin/minicom

     Обратите внимание, что в этом примере будет установлена ​​только группа, команда
     все еще выполняется от имени пользователя tcm. Например.

     $ sudo -g dialer /usr/bin/cu

     В Runas_Spec может присутствовать несколько пользователей и групп, и в этом случае
     пользователь может выбрать любую комбинацию пользователей и групп с помощью параметров
     -u и -g. В этом примере:

     alan    ALL = (root, bin : operator, system) ALL

     Пользователь alan может выполнить любую команду как пользователь root или bin,
     опционально установив группу operator или system.

   SELinux_Spec
     В системах с поддержкой SELinux записи файла sudoers могут дополнительно иметь
     правило и/или тип SELinux, связанные с командой. Если в команде указано правило или
     тип, она переопределит все значения по умолчанию, указанные в sudoers. Однако правило
     или тип, указанные в командной строке, заменят значения в sudoers.

   Tag_Spec
     Команда может иметь ноль или более тегов, связанных с ней. Существует десять
     возможных значений тегов: EXEC, NOEXEC, FOLLOW, NOFOLLOW, LOG_INPUT, NOLOG_INPUT,
     LOG_OUTPUT, NOLOG_OUTPUT, MAIL, NOMAIL, PASSWD, NOPASSWD, SETENV и NOSETENV. Как
     только тег установлен в Cmnd, последующие Cmnds в Cmnd_Spec_List наследуют тег, если
     он не переопределяется тегом противоположного действия (другими словами, PASSWD
     переопределяет NOPASSWD, а NOEXEC переопределяет EXEC).

     EXEC and NOEXEC

       Если sudo был скомпилирован с поддержкой noexec и соответствующая операционная
       система поддерживает его, тег NOEXEC можно использовать для предотвращения запуска
       динамически связанных исполняемых файлов самих команд.

       В следующем примере пользователь aaron может запустить /usr/bin/more и /usr/bin/vi,
       но экранирование оболочки будет отключено.

       aaron   shanty = NOEXEC: /usr/bin/more, /usr/bin/vi

       См. Раздел «Предотвращение побегов оболочки» ниже для получения более подробной
       информации о том, как работает NOEXEC и будет ли она работать в вашей системе.

     FOLLOW и NOFOLLOW Начиная с версии 1.8.15, sudoedit не будет открывать файл,
     который является символической ссылкой, если не включена опция sudoedit_follow.
     Теги FOLLOW и NOFOLLOW переопределяют значение sudoedit_follow и могут
     использоваться для разрешения (или запрета) редактирования символических ссылок для
     каждой команды. Эти теги эффективны только для команды sudoedit и игнорируются для
     всех других команд.

     LOG_INPUT и NOLOG_INPUT

       Эти теги переопределяют значение параметра log_input для каждой команды. Для
       получения дополнительной информации см. Описание log_input в разделе
       SUDOERS OPTIONS ниже.

     LOG_OUTPUT и NOLOG_OUTPUT

       Эти теги переопределяют значение параметра log_output для каждой команды.
       Для получения дополнительной информации см. Описание log_output в разделе
       SUDOERS OPTIONS ниже.

     MAIL и NOMAIL

       Эти теги обеспечивают детальный контроль над тем, будет ли отправляться почта,
       когда пользователь запускает команду, переопределяя значение параметра
       mail_all_cmnds для каждой отдельной команды. Они не действуют при запуске sudo
       с опциями -l или -v. Тег NOMAIL также переопределяет параметры mail_always и
       mail_no_perms. Для получения дополнительной информации см. Описания
       mail_all_cmnds, mail_always и mail_no_perms в разделе SUDOERS OPTIONS ниже.

     PASSWD и NOPASSWD

       По умолчанию sudo требует, чтобы пользователь аутентифицировал себя перед
       выполнением команды. Это поведение можно изменить с помощью тега NOPASSWD. Как и
       Runas_Spec, тег NOPASSWD устанавливает значение по умолчанию для команд, следующих
       за ним в Cmnd_Spec_List. И наоборот, тег PASSWD может быть использован для изменения
       положения вещей. Например:

       ray     rushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm

       позволит пользователю ray запускать /bin/kill, /bin/ls и /usr/bin/lprm в качестве
       пользователя root на машине rushmore без аутентификации. Если мы только хотим,
       чтобы ray мог запускать /bin/kill без пароля, запись будет такой:

       ray     rushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm

       Обратите внимание, что тег PASSWD не влияет на пользователей, входящих в
       группу, указанную в параметре exempt_group.

       По умолчанию, если тег NOPASSWD применяется к какой-либо записи для пользователя
       на текущем хосте, он или она сможет запустить “sudo -l” без пароля. Кроме того,
       пользователь может запускать “sudo -v” без пароля, только если тег NOPASSWD
       присутствует для всех записей пользователя, которые относятся к текущему хосту.
       Это поведение может быть изменено с помощью параметров verifypw и listpw.

     SETENV и NOSETENV

       Эти теги переопределяют значение параметра setenv для каждой команды. Обратите
       внимание, что если для команды был установлен SETENV, пользователь может отключить
       параметр env_reset из командной строки с помощью параметра -E.
       Кроме того, переменные окружения, установленные в командной строке, не подпадают
       под ограничения, накладываемые env_check, env_delete или env_keep. Таким образом,
       только доверенные пользователи должны иметь возможность устанавливать переменные
       таким образом. Если соответствует команде ALL, тег SETENV подразумевается для
       этой команды; это значение по умолчанию может быть переопределено с помощью тега
       NOSETENV.

   Wildcards
     sudo позволяет использовать подстановочные знаки в стиле оболочки (также называемые
     мета или глобальными символами) в именах хостов, путевых именах и аргументах командной
     строки в файле sudoers. Сопоставление с подстановочными знаками выполняется с помощью
     функций glob(3) и fnmatch(3), как указано в IEEE Std 1003.1 (“POSIX.1”).

     *         Совпадает с любым набором из нуля или более символов (включая пробелы).

     ?         Соответствует любому отдельному символу (включая пробелы).

     [...]     Соответствует любому символу в указанном диапазоне.

     [!...]    Соответствует любому символу, не входящему в указанный диапазон.

     \x        Для любого символа ‘x’ оценивается как ‘x’. Это используется для
               экранирования специальных символов, таких как: ‘*’, ‘?’, ‘[’, и ‘]’.

     Обратите внимание, что это не регулярные выражения. В отличие от регулярного
     выражения, нет способа сопоставить один или несколько символов в пределах диапазона.

     Классы символов могут использоваться, если функции вашей системы glob(3) и fnmatch(3)
     поддерживают их.  Однако, поскольку символ ':' имеет особое значение в sudoers,
     его необходимо экранировать. Например:

         /bin/ls [[\:alpha\:]]*

     Будет соответствовать любое имя файла, начинающееся с буквы.

     Обратите внимание, что косая черта (‘/’) не будет сопоставляться с подстановочными
     знаками, используемыми в части имени файла команды. Это сделать путь как:

         /usr/bin/*

     match /usr/bin/who but not /usr/bin/X11/xterm.

     Однако при сопоставлении аргументов командной строки косая черта сопоставляется с
     подстановочными знаками, поскольку аргументы командной строки могут содержать
     произвольные строки, а не только имена путей.

     Подстановочные знаки в аргументах командной строки следует использовать с
     осторожностью. Аргументы командной строки сопоставляются как одна сцепленная строка.
     Это означает, что подстановочный знак, такой как '?' Или '*', будет совпадать через
     границы слов, что может быть неожиданным. Например, в то время как запись sudoers,
     как:

         %operator ALL = /bin/cat /var/log/messages*

     позволит команду как:

         $ sudo cat /var/log/messages.1

     Это также позволит:

         $ sudo cat /var/log/messages /etc/shadow

     что, вероятно, не то, что было задумано. В большинстве случаев лучше выполнять
     обработку командной строки вне файла sudoers на языке сценариев.

   Исключения из правил подстановочных знаков
     Следующие исключения применяются к вышеуказанным правилам:

     ""        Если пустая строка "" является единственным аргументом командной строки
               в записи файла sudoers, это означает, что команда не может быть запущена
               с какими-либо аргументами.

     sudoedit  Аргументами командной строки встроенной команды sudoedit всегда должны
               быть имена путей, поэтому косая черта (‘/’) не будет совпадать с
               подстановочным знаком.

   Включение других файлов изнутри sudoers
     Можно включить другие файлы sudoers из файла sudoers, который в настоящее
     время анализируется, используя директивы #include и #includedir.

     Это можно использовать, например, для сохранения файла sudoers для всего сайта в
     дополнение к локальному файлу для каждого компьютера. В этом примере файл sudoers
     для всего сайта будет /etc/sudoers, а для каждого компьютера - /etc/sudoers.local.
     Чтобы включить /etc/sudoers.local из /etc/sudoers, мы бы использовали следующую
     строку в /etc/sudoers:

         #include /etc/sudoers.local

     Когда sudo достигает этой строки, он приостанавливает обработку текущего файла
     (/etc/sudoers) и переключается на /etc/sudoers.local. По достижении конца
     /etc/sudoers.local остальные файлы /etc/sudoers будут обработаны. Включенные
     файлы могут сами включать другие файлы. Для предотвращения зацикливания включаемых
     файлов применяется жесткое ограничение в 128 вложенных включаемых файлов.

     Если путь к файлу включения не указан полностью (не начинается с символа '/', он
     должен находиться в том же каталоге, что и файл sudoers, из которого он был включен.
     Например, если /etc/sudoers содержит строку :

         #include sudoers.local

     файл, который будет включен /etc/sudoers.local.

     Имя файла также может включать символ %h, обозначающий краткую форму имени хоста.
     Другими словами, если имя хоста машины - «xerxes», то

         #include /etc/sudoers.%h

     заставит sudo включить файл /etc/sudoers.xerxes.

     Директива #includedir может использоваться для создания каталога sudoers.d, в
     который менеджер системных пакетов может перетаскивать правила файла sudoers как
     часть установки пакета. Например, учитывая:

         #includedir /etc/sudoers.d

     sudo будет читать каждый файл в /etc/sudoers.d, пропуская имена файлов,
     заканчивающиеся на '~' или содержащие символ '.', чтобы избежать проблем с
     менеджером пакетов или редактором временных/резервных файлов. Файлы анализируются
     в отсортированном лексическом порядке. То есть /etc/sudoers.d/01_first будет
     проанализирован до /etc/sudoers.d/10_second. Имейте в виду, что поскольку сортировка
     является лексической, а не числовой, /etc/sudoers.d/1_whoops будет загружен после
     /etc/sudoers.d/10_second. Использование одинакового количества лидирующих нулей в
     именах файлов может быть использовано, чтобы избежать таких проблем.

     Обратите внимание, что в отличие от файлов, включаемых через #include, visudo не
     будет редактировать файлы в каталоге #includedir, если один из них не содержит
     синтаксическую ошибку. Все еще возможно запустить visudo с флагом -f, чтобы
     редактировать файлы напрямую, но это не поймает переопределение псевдонима, который
     также присутствует в другом файле.

   Другие специальные символы и зарезервированные слова
     Знак решетки ('#') используется для обозначения комментария (если только он не
     является частью директивы #include или если он не встречается в контексте имени
     пользователя и не сопровождается одной или несколькими цифрами, в этом случае он
     обрабатывается как UID). И символ комментария, и любой текст после него до конца
     строки игнорируются.

     Зарезервированное слово ALL - это встроенный псевдоним, который всегда приводит к
     успешному совпадению. Его можно использовать везде, где можно использовать Cmnd_Alias,
     User_Alias, Runas_Alias ​​или Host_Alias. Вы не должны пытаться определить свой
     собственный псевдоним ALL, так как встроенный псевдоним будет использоваться вместо
     вашего. Обратите внимание, что использование ALL может быть опасным, поскольку в
     контексте команд он позволяет пользователю выполнять любую команду в системе.

     Восклицательный знак (‘!’) Может использоваться как логический оператор not в
     списке или псевдониме, а также перед Cmnd. Это позволяет исключить определенные
     значения. Чтобы оператор '!' сработал, должно быть что-то, что можно исключить.
     Например, чтобы соответствовать всем пользователям, кроме root, можно использовать:

         ALL,!root

     Если ALL, опущено, то:

         !root

     он явно запретил бы root, но не соответствовал бы другим пользователям. Это
     отличается от настоящего оператора “negation”.

     Обратите внимание, однако, что использование ‘!’ В сочетании со встроенным
     псевдонимом ALL, позволяющим пользователю запускать команды “all but a few” (все
     кроме нескольких), редко работает так, как задумано. (смотри SECURITY NOTES ниже).

     Длинные строки можно продолжить с обратной косой чертой (‘\’) в качестве
     последнего символа в строке.

     Пробел между элементами в списке, а также специальными синтаксическими символами
     в User Specification (‘=’, ‘:’, ‘(’, ‘)’) не является обязательным.

     Следующие символы должны быть экранированы с помощью обратной косой черты (‘\’)
     при использовании в качестве части слова (например, имени пользователя или имени
     хоста): ‘!’, ‘=’, ‘:’, ‘,’, ‘(’, ‘)’, ‘\’.

SUDOERS OPTIONS
     Поведение sudo может быть изменено строками Default_Entry, как объяснялось ранее.
     Список всех поддерживаемых параметров по умолчанию, сгруппированных по типу,
     приведен ниже.

     Булевы флаги:

     always_query_group_plugin
                       Если group_plugin настроен, используйте его для разрешения
                       групп в форме %group, если нет также системной группы с тем же
                       именем. Обычно в group_plugin передаются только группы вида
                       %:group. Этот флаг отключен по умолчанию.

     always_set_home   Если включено, sudo установит переменную окружения HOME в
                       домашний каталог целевого пользователя (который является корневым,
                       если не используется опция -u). Это фактически означает, что
                       опция -H всегда подразумевается. Обратите внимание, что по
                       умолчанию HOME будет установлен в домашний каталог целевого
                       пользователя, когда включена опция env_reset, поэтому
                       Always_set_home действует только для конфигураций, в которых
                       либо env_reset отключен, либо HOME присутствует в списке
                       env_keep. Этот флаг отключен по умолчанию.

     authenticate      Если установлено, пользователи должны аутентифицировать себя с
                       помощью пароля (или другого средства аутентификации), прежде чем
                       они смогут запускать команды. Это значение по умолчанию может быть
                       переопределено с помощью тегов PASSWD и NOPASSWD. Этот флаг
                       включен по умолчанию.

     closefrom_override
                       Если установлено, пользователь может использовать опцию sudo -C,
                       которая переопределяет начальную точку по умолчанию, в которой
                       sudo начинает закрывать дескрипторы открытых файлов. Этот флаг
                       отключен по умолчанию.

     compress_io       Если установлено, и sudo настроен на запись ввода или вывода
                       команды, журналы I/O будут сжаты с использованием zlib. Этот флаг
                       включен по умолчанию, когда sudo компилируется с поддержкой zlib.

     exec_background   По умолчанию sudo запускает команду в качестве процесса переднего
                       плана, пока само sudo работает на переднем плане. Когда флаг
                       exec_background включен и команда запускается в pty (из-за
                       ведения журнала I/O или флага use_pty), команда будет выполняться
                       как фоновый процесс. Попытки чтения с управляющего терминала (или
                       изменения настроек терминала) приведут к приостановке команды с
                       помощью сигнала SIGTTIN (или SIGTTOU в случае настроек терминала).
                       Если это происходит, когда sudo является процессом переднего плана,
                       команда будет предоставлена ​​управляющему терминалу и возобновлена ​​
                       на переднем плане без вмешательства пользователя. Преимущество
                       первоначального запуска команды в фоновом режиме заключается в том,
                       что sudo не нужно читать с терминала, если только команда явно не
                       запрашивает его. В противном случае любой ввод с терминала должен
                       быть передан команде, независимо от того, требовала она этого или
                       нет (ядро буферизует терминалы, поэтому невозможно определить,
                       действительно ли команда хочет ввод). Это отличается от
                       исторического поведения sudo или когда команда не запускается
                       в pty.

                       Чтобы это работало без проблем, операционная система должна
                       поддерживать автоматический перезапуск системных вызовов. К
                       сожалению, не все операционные системы делают это по умолчанию, и
                       даже те, которые имеют, могут иметь ошибки. Например, Mac OS X не
                       может перезапустить системные вызовы tcgetattr() и tcsetattr()
                       (это ошибка в Mac OS X). Кроме того, поскольку это поведение
                       зависит от остановки команды с помощью сигналов SIGTTIN или SIGTTOU,
                       программы, которые улавливают эти сигналы и приостанавливают себя
                       другим сигналом (обычно SIGTOP), не будут автоматически
                       предопределены. Некоторые версии команды linux su(1) ведут себя
                       таким образом. Этот флаг отключен по умолчанию.

                       Этот параметр поддерживается только версией 1.8.7 или выше. Это не
                       имеет никакого эффекта, если не включено ведение журнала
                       ввода-вывода или не включен флаг use_pty.

     env_editor        Если установлено, visudo будет использовать значение переменных
                       окружения EDITOR или VISUAL, прежде чем вернуться к списку
                       редакторов по умолчанию. Обратите внимание, что это может создать
                       дыру в безопасности, поскольку это позволяет пользователю выполнять
                       любую произвольную команду от имени пользователя root без
                       регистрации. Более безопасной альтернативой является размещение
                       списка редакторов, разделенных двоеточиями, в переменной editor.
                       Затем visudo будет использовать EDITOR или VISUAL, только если они
                       соответствуют значению, указанному в редакторе. Этот флаг включен
                       по умолчанию.

     env_reset         Если установлено, sudo будет запускать команду в минимальной среде,
                       содержащей переменные TERM, PATH, HOME, MAIL, SHELL, LOGNAME, USER,
                       USERNAME and SUDO_*. Затем добавляются любые переменные в среде
                       вызывающего, которые соответствуют спискам env_keep и env_check, а
                       затем любые переменные, присутствующие в файле, заданном параметром
                       env_file (если есть). Содержимое списков env_keep и env_check,
                       измененное глобальными параметрами Defaults в sudoers, отображается,
                       когда sudo запускается пользователем root с опцией -V. Если опция
                       secure_path установлена, ее значение будет использоваться для
                       переменной окружения PATH. Этот флаг включен по умолчанию.

     fast_glob         Как правило, sudo использует функцию glob(3) для создания
                       глобализации в стиле оболочки при сопоставлении имен путей. Однако,
                       поскольку он обращается к файловой системе, для некоторых шаблонов
                       glob(3) может потребоваться много времени, особенно когда шаблон
                       ссылается на сетевую файловую систему, которая монтируется по
                       требованию (монтируется автоматически). Опция fast_glob заставляет
                       sudo использовать функцию fnmatch(3), которая не обращается к
                       файловой системе, чтобы выполнить ее сопоставление.  Недостатком
                       fast_glob является то, что он не может сопоставить относительные
                       имена путей, такие как ./ls или ../bin/ls. Это имеет значение для
                       безопасности, когда имена путей, которые включают символы-заглушки,
                       используются с оператором отрицания '!', Поскольку такие правила
                       можно обойти тривиально. Как таковая, эта опция не должна
                       использоваться, когда файл sudoers содержит правила, которые
                       содержат отрицательные имена путей, которые включают
                       символы-заглушки. Этот флаг отключен по умолчанию.

     fqdn              Установите этот флаг, если вы хотите поместить полные имена
                       хостов в файл sudoers, когда имя локального хоста (как
                       возвращено командой hostname) не содержит имя домена. Другими
                       словами, вместо myhost вы бы использовали myhost.mydomain.edu. Вы
                       можете по-прежнему использовать короткую форму, если хотите (и
                       даже смешивать их). Этот параметр действует только в том случае,
                       если имя хоста “canonical”, возвращаемое функцией getaddrinfo()
                       или gethostbyname(), является полностью определенным доменным
                       именем. Обычно это тот случай, когда система настроена на
                       использование DNS для разрешения имени хоста.

                       Если система настроена на использование файла /etc/hosts вместо
                       DNS, имя хоста “canonical” может быть не полностью определено.
                       Порядок запроса источников для разрешения имени хоста обычно
                       указывается в /etc/nsswitch.conf, /etc/netsvc.conf, /etc/host.conf
                       или, в некоторых случаях, в файле /etc/resolv.conf. В файле
                       /etc/hosts первым именем хоста записи считается имя “canonical”;
                       последующие имена - это псевдонимы, которые не используются
                       sudoers. Например, следующая строка файла hosts для машины
                       “xyzzy” содержит полное доменное имя в качестве имени хоста
                       “canonical” и короткую версию в качестве псевдонима.

                             192.168.1.1    xyzzy.sudo.ws xyzzy

                       Если запись файла хостов машины не отформатирована должным
                       образом, опция fqdn не будет работать, если ее запросить до DNS.

                       Помните, что при использовании DNS для разрешения имен хостов
                       включение fqdn требует использования sudoers для поиска в DNS,
                       что делает sudo непригодным для использования, если DNS перестает
                       работать (например, если машина отключена от сети). Также обратите
                       внимание, что, как и в случае с файлом hosts, вы должны использовать
                       имя “canonical”, поскольку DNS это знает. То есть вы не можете
                       использовать псевдоним хоста (запись CNAME) из-за проблем с
                       производительностью и того факта, что нет способа получить все
                       псевдонимы из DNS.

                       Этот флаг включен по умолчанию.

     ignore_dot        Если установлено, sudo будет игнорировать "." или "" (оба
                       обозначают текущий каталог) в переменной среды PATH; Сам PATH
                       не изменяется. Этот флаг отключен по умолчанию.

     ignore_local_sudoers
                       Если установлено через LDAP, разбор /etc/sudoers будет пропущен.
                       Это предназначено для предприятий, которые хотят запретить
                       использование локальных файлов sudoers, чтобы использовать только
                       LDAP. Это мешает усилиям мошенников, которые пытаются добавить
                       правила в /etc/sudoers. Когда эта опция присутствует, /etc/sudoers
                       даже не должен существовать. Так как эта опция говорит sudo, как
                       вести себя, когда не найдено ни одной конкретной записи LDAP,
                       эта sudoOption имеет смысл только для раздела cn=defaults. Этот
                       флаг отключен по умолчанию.

     insults           Если установлено, sudo будет оскорблять пользователей, когда
                       они вводят неверный пароль. Этот флаг отключен по умолчанию.

     log_host          Если установлено, имя хоста будет зарегистрировано в (не системном)
                       файле журнала sudo. Этот флаг отключен по умолчанию.

     log_input         Если установлено, sudo будет запускать команду в псевдо-tty и
                       записывать все пользовательские данные. Если стандартный ввод не
                       связан с tty пользователя, из-за перенаправления I/O или из-за того,
                       что команда является частью конвейера, этот ввод также записывается
                       и сохраняется в отдельном файле журнала. Для получения
                       дополнительной информации см. Раздел I/O LOG FILES. Этот флаг
                       отключен по умолчанию.

     log_output        Если установлено, sudo будет запускать команду в псевдо-tty и
                       записывать все выходные данные, которые отправляются на экран,
                       аналогично команде script(1). Для получения дополнительной
                       информации см. Раздел I/O LOG FILES. Этот флаг отключен
                       по умолчанию.

     log_year          Если установлено, четырехзначный год будет записываться в
                       (не системный журнал) файл журнала sudo. Этот флаг отключен
                       по умолчанию.

     long_otp_prompt   При проверке с использованием схемы (Одноразовый пароль)
                       One Time Password (OTP), такой как S/Key или OPIE, используется
                       двухэтапная авторизация, чтобы упростить вырезку и вставку запроса
                       в локальное окно. Это не так красиво, как по умолчанию, но
                       некоторые люди находят это более удобным. Этот флаг отключен
                       по умолчанию.

     mail_all_cmnds    Отправлять почту пользователю mailto каждый раз, когда пользователь
                       пытается выполнить команду через sudo (включая sudoedit). Почта не
                       будет отправляться, если пользователь запускает sudo с опцией -l
                       или -v, если только не произошла ошибка аутентификации и не
                       установлен флаг mail_badpass. Этот флаг отключен по умолчанию.

     mail_always       Отправлять почту пользователю mailto каждый раз, когда пользователь
                       запускает sudo. Этот флаг отключен по умолчанию.

     mail_badpass      Отправьте почту пользователю mailto, если пользователь, запускающий
                       sudo, не введет правильный пароль. Если команда, которую пытается
                       выполнить пользователь, не разрешена sudoers и установлены один из
                       флагов mail_all_cmnds, mail_always, mail_no_host, mail_no_perms или
                       mail_no_user, этот флаг не будет действовать. Этот флаг отключен
                       по умолчанию.

     mail_no_host      Если установлено, почта будет отправляться пользователю mailto,
                       если вызывающий пользователь существует в файле sudoers, но ему не
                       разрешено запускать команды на текущем хосте. Этот флаг отключен по
                       умолчанию.

     mail_no_perms     Если установлено, почта будет отправляться пользователю mailto,
                       если вызывающему пользователю разрешено использовать sudo, но
                       команда, которую он пытается выполнить, не указана в записи файла
                       sudoers или явно отклонена. Этот флаг отключен по умолчанию.

     mail_no_user      Если установлено, почта будет отправляться пользователю почты,
                       если вызывающего пользователя нет в файле sudoers. Этот флаг
                       включен по умолчанию.

     netgroup_tuple    Если установлено, поиск сетевой группы будет выполняться с
                       использованием полного кортежа сетевой группы: имя хоста, имя
                       пользователя и домен (если он установлен). Исторически sudo
                       сопоставлял только имя пользователя и домен для сетевых групп,
                       используемых в User_List, и только имя хоста и домен для сетевых
                       групп, используемых в Host_List. Этот флаг отключен по умолчанию.

     noexec            Если установлено, все команды, выполняемые с помощью sudo, будут
                       вести себя так, как если бы тег NOEXEC был установлен, если только
                       он не переопределен тегом EXEC. См. Описание EXEC и NOEXEC выше, а
                       также раздел «Предотвращение побегов оболочки» в конце этого
                       руководства. Этот флаг отключен по умолчанию.

     pam_session       В системах, которые используют PAM для аутентификации, sudo
                       создаст новый сеанс PAM для запуска команды. Отключение pam_session
                       может потребоваться в старых реализациях PAM или в операционных
                       системах, где открытие сеанса PAM изменяет файлы utmp или wtmp.
                       Если поддержка сеанса PAM отключена, ограничения ресурсов могут не
                       обновляться для выполняемой команды. Если pam_session, pam_setcred
                       и use_pty отключены и ведение журнала I/O не настроено, sudo
                       выполнит команду напрямую, вместо того, чтобы запускать ее как
                       дочерний процесс. Этот флаг включен по умолчанию.

                       Этот параметр поддерживается только версией 1.8.7 или выше.

     pam_setcred       В системах, которые используют PAM для аутентификации, sudo
                       попытается установить учетные данные для целевого пользователя по
                       умолчанию, если это поддерживается базовой системой аутентификации.
                       Одним из примеров учетных данных является билет Kerberos. Если
                       pam_session, pam_setcred и use_pty отключены и ведение журнала
                       I/O не настроено, sudo выполнит команду напрямую, вместо того,
                       чтобы запускать ее как дочерний процесс. Этот флаг
                       включен по умолчанию.

                       Этот параметр поддерживается только версией 1.8.8 или выше.

     passprompt_override
                       Запрос пароля, заданный passprompt, обычно используется только
                       в том случае, если запрос пароля, предоставляемый такими системами,
                       как PAM, соответствует строке “Password:”. Если задано
                       passprompt_override, passprompt всегда будет использоваться.
                       Этот флаг отключен по умолчанию.

     path_info         Обычно sudo сообщает пользователю, когда команда не может
                       быть найдена в их переменной окружения PATH. Некоторые сайты могут
                       захотеть отключить это, так как это может быть использовано для
                       сбора информации о расположении исполняемых файлов, к которым у
                       обычного пользователя нет доступа. Недостатком является то, что
                       если исполняемый файл просто отсутствует в пользовательском PATH,
                       sudo сообщит пользователю, что ему не разрешено его запускать, что
                       может привести к путанице. Этот флаг включен по умолчанию.

     preserve_groups   По умолчанию sudo инициализирует вектор группы в списке групп, в
                       которых находится целевой пользователь. Когда задано
                       preserve_groups, существующий вектор группы пользователя остается
                       неизменным. Однако действительная и эффективная группа IDs
                       по-прежнему настроена на соответствие целевому пользователю. Этот
                       флаг отключен по умолчанию.

     pwfeedback        По умолчанию sudo читает пароль, как и большинство других программ
                       Unix, отключая эхо, пока пользователь не нажмет клавишу возврата
                       (или ввода). Некоторых пользователей это смущает, так как им
                       кажется, что в этот момент sudo зависло. Когда установлен
                       pwfeedback, sudo будет предоставлять визуальную обратную связь,
                       когда пользователь нажимает клавишу. Обратите внимание, что это
                       влияет на безопасность, так как наблюдатель может определить длину
                       вводимого пароля. Этот флаг отключен по умолчанию.

     requiretty        Если установлено, sudo будет работать только тогда, когда
                       пользователь вошел в реальный tty. Когда этот флаг установлен,
                       sudo может быть запущен только из сеанса входа в систему, а не с
                       помощью других средств, таких как сценарии cron(8) или cgi-bin.
                       Этот флаг отключен по умолчанию.

     root_sudo         Если установлено, root также может запускать sudo. Отключение
                       этого параметра запрещает пользователям использовать команды
                       “chaining” sudo для получения корневой оболочки, выполняя что-то
                       вроде “sudo sudo /bin/sh”. Однако обратите внимание, что
                       отключение root_sudo также не позволит root запускать sudoedit.
                       Отключение root_sudo не обеспечивает реальной дополнительной
                       безопасности; он существует исключительно по историческим причинам.
                       Этот флаг включен по умолчанию.

     rootpw            Если установлено, sudo будет запрашивать пароль root вместо пароля
                       вызывающего пользователя при запуске команды или редактировании
                       файла. Этот флаг отключен по умолчанию.

     runaspw           Если установлено, sudo будет запрашивать пароль пользователя,
                       определенный параметром runas_default (по умолчанию root) вместо
                       пароля вызывающего пользователя при запуске команды или
                       редактировании файла. Этот флаг отключен по умолчанию.

     set_home          Если включено и sudo вызывается с опцией -s, переменная окружения
                       HOME будет установлена ​​в домашний каталог целевого пользователя
                       (который является корневым, если не используется опция -u). Это
                       эффективно делает опцию -s подразумевающей -H. Обратите внимание,
                       что HOME уже установлен, когда включена опция env_reset, поэтому
                       set_home действует только для конфигураций, где либо env_reset
                       отключен, либо HOME присутствует в списке env_keep. Этот флаг
                       отключен по умолчанию.

     set_logname       Обычно sudo устанавливает переменные окружения LOGNAME, USER и
                       USERNAME на имя целевого пользователя (обычно root, если не указана
                       опция -u). Однако, поскольку некоторые программы (включая систему
                       контроля версий RCS) используют LOGNAME для определения реальной
                       личности пользователя, может быть желательно изменить это поведение.
                       Это может быть сделано путем отрицания опции set_logname. Обратите
                       внимание, что set_logname не будет иметь эффекта, если опция
                       env_reset не была отключена, а список env_keep содержит LOGNAME,
                       USER или USERNAME. Этот флаг включен по умолчанию.

     set_utmp          Когда этот параметр включен, sudo будет создавать запись в файле
                       utmp (или utmpx) при выделении псевдо-tty. Псевдоответ выделяется
                       sudo, когда включены флаги log_input, log_output или use_pty. По
                       умолчанию новая запись будет копией существующей записи пользователя
                       utmp (если есть) с обновленными полями tty, time, type и pid. Этот
                       флаг включен по умолчанию.

     setenv            Разрешить пользователю отключать опцию env_reset из командной строки
                       через опцию -E. Кроме того, переменные окружения, установленные
                       через командную строку, не подпадают под ограничения, накладываемые
                       env_check, env_delete или env_keep. Таким образом, только
                       доверенные пользователи должны иметь возможность устанавливать
                       переменные таким образом. Этот флаг отключен по умолчанию.

     shell_noargs      Если set и sudo вызывается без аргументов, он действует так, как
                       если бы была задана опция -s. Таким образом, он запускает оболочку
                       от имени пользователя root (оболочка определяется переменной среды
                       SHELL, если она задана, и обратно обращается к оболочке, указанной
                       в записи вызывающего пользователя /etc/passwd, если нет). Этот флаг
                       отключен по умолчанию.

     stay_setuid       Обычно, когда sudo выполняет команду, действительный и эффективный
                       UIDs устанавливаются для целевого пользователя (по умолчанию root).
                       Эта опция изменяет это поведение так, что реальный UID остается в
                       качестве UID вызывающего пользователя. Другими словами, это
                       заставляет sudo действовать как оболочка setuid. Это может быть
                       полезно в системах, которые отключают некоторые потенциально опасные
                       функции, когда программа запускается с помощью setuid. Этот параметр
                       действует только в системах, которые поддерживают системный вызов
                       setreuid (2) или setresuid (2). Этот флаг отключен по умолчанию.

     sudoedit_checkdir
                       Если установлено, sudoedit будет проверять все компоненты каталога
                       пути, который будет отредактирован для возможности записи вызывающим
                       пользователем. Символьные ссылки не будут использоваться в
                       директориях для записи, и sudoedit откажется редактировать файл,
                       расположенный в директории для записи. Эти ограничения не
                       применяются, когда sudoedit запускается пользователем root. В
                       некоторых системах, если все компоненты каталога пути, подлежащего
                       редактированию, недоступны для чтения целевым пользователем,
                       sudoedit не сможет редактировать файл. Этот флаг включен
                       по умолчанию.

                       Эта настройка была впервые введена в версии 1.8.15, но изначально
                       страдала от состояния гонки. Проверка символических ссылок в
                       доступных для записи промежуточных каталогах была добавлена ​​
                       в версии 1.8.16.

     sudoedit_follow   По умолчанию sudoedit не будет переходить по символическим ссылкам
                       при открытии файлов. Опция sudoedit_follow может быть включена,
                       чтобы позволить sudoedit открывать символические ссылки. Он может
                       быть переопределен для каждой команды тегами FOLLOW и NOFOLLOW.
                       Этот флаг отключен по умолчанию.

                       Этот параметр поддерживается только версией 1.8.15 или выше.

     targetpw          Если установлено, sudo будет запрашивать пароль пользователя,
                       указанный в опции -u (по умолчанию root) вместо пароля вызывающего
                       пользователя при запуске команды или редактировании файла. Обратите
                       внимание, что этот флаг исключает использование uid, не указанного
                       в базе данных passwd, в качестве аргумента опции -u. Этот флаг
                       отключен по умолчанию.

     tty_tickets       Если установлено, пользователи должны проходить аутентификацию
                       отдельно. Если этот флаг включен, sudo будет использовать отдельную
                       запись в файле отметок времени для каждого tty. Если отключено, для
                       всех сеансов входа в систему используется одна запись. Этот флаг
                       включен по умолчанию.

     umask_override    Если установлено, sudo установит umask, как указано в файле
                       sudoers без изменений. Это позволяет указать в файле sudoers umask,
                       который является более разрешающим, чем собственный umask
                       пользователя, и соответствует историческому поведению. Если
                       umask_override не установлен, sudo установит umask как объединение
                       umask пользователя и того, что указано в sudoers. Этот флаг
                       отключен по умолчанию.

     use_netgroups     Если установлено, сетевые группы (с префиксом '+') могут
                       использоваться вместо пользователя или хоста. Для пользователей
                       LDAP-based поддержка сетевых групп требует дорогостоящего совпадения
                       подстрок на сервере, если в файле /etc/ldap.conf отсутствует
                       директива NETGROUP_BASE. Если сетевые группы не нужны, эту опцию
                       можно отключить, чтобы уменьшить нагрузку на сервер LDAP. Этот
                       флаг включен по умолчанию.

     use_pty           Если установлено, sudo будет запускать команду в псевдо-pty, даже
                       если не ведется запись в журнал I/O. Вредоносная программа,
                       запускаемая под sudo, может предположительно разорвать фоновый
                       процесс, который сохраняется на оконечном устройстве пользователя
                       после завершения основной программы. Использование этой опции
                       сделает это невозможным. Этот флаг отключен по умолчанию.

     utmp_runas        Если установлено, sudo будет сохранять имя пользователя runas при
                       обновлении файла utmp (или utmpx). По умолчанию sudo хранит имя
                       вызывающего пользователя. Этот флаг отключен по умолчанию.

     visiblepw         По умолчанию sudo откажется запускаться, если пользователь должен
                       ввести пароль, но отключить эхо на терминале невозможно. Если
                       установлен флаг visiblepw, sudo запросит пароль, даже если он будет
                       виден на экране. Это позволяет запускать такие вещи, как
                       “ssh somehost sudo ls”, так как по умолчанию ssh(1) не выделяет
                       tty при запуске команды. Этот флаг отключен по умолчанию.

     Целые:

     closefrom         Перед выполнением команды sudo закроет все открытые дескрипторы
                       файлов, кроме стандартного ввода, стандартного вывода и стандартной
                       ошибки (дескрипторы файлов 0-2). Параметр closefrom может
                       использоваться для указания другого дескриптора файла, с
                       которого начинается закрытие. По умолчанию 3.

     maxseq            Максимальный порядковый номер, который будет заменен на
                       экранирование “%{seq}” в файле журнала I/O (для получения
                       дополнительной информации см. Приведенное выше описание
                       iolog_dir). В то время как значение, заменяющее “%{seq}”,
                       находится в базе 36, само maxseq должно быть выражено в десятичном
                       виде.  Значения, превышающие 2176782336 (что соответствует
                       порядковому номеру 36 базы “ZZZZZZ”), будут молча усечены до
                       2176782336. Значение по умолчанию - 2176782336.

                       Как только локальный порядковый номер достигнет значения maxseq,
                       он будет "roll over" (перевернут) до нуля, после чего sudoers будет
                       обрезать и повторно использовать любые существующие имена путей
                       журнала I/O.

                       Этот параметр поддерживается только версией 1.8.7 или выше.

     passwd_tries      Количество попыток, которые пользователь получает, чтобы ввести
                       свой пароль до того, как sudo зарегистрирует ошибку и завершит
                       работу. По умолчанию 3.

     Целые числа, которые можно использовать в логическом контексте:

     loglinelen        Количество символов в строке для файла журнала. Это значение
                       используется, чтобы решить, когда переносить строки для файлов
                       журналов. Это не влияет на файл журнала системного журнала, только
                       на файл журнала. По умолчанию установлено значение 80 (используйте
                       0 или отмените опцию, чтобы отключить перенос слов).

     passwd_timeout    Количество минут до истечения срока действия пароля sudo или 0
                       без перерыва. Тайм-аут может включать дробный компонент, если
                       мелкой детализации недостаточно, например, 2.5. По умолчанию 0.

     timestamp_timeout
                       Количество минут, которое может пройти до того, как sudo снова
                       запросит пароль. Тайм-аут может включать дробную составляющую,
                       если мелкая детализация недостаточна, например, 2.5. По умолчанию
                       установлено значение 15. Установите 0, чтобы всегда запрашивать
                       пароль. Если установлено значение меньше 0, отметка времени
                       пользователя никогда не истечет. Это может использоваться, чтобы
                       позволить пользователям создавать или удалять свои собственные
                       метки времени через “sudo -v” и “sudo -k” соответственно.

     umask             Umask для использования при запуске команды. Отмените эту опцию
                       или установите 0777, чтобы сохранить маску пользователя. Фактически
                       используемый umask будет объединением umask пользователя и значения
                       параметра umask, значение по умолчанию - 0022. Это гарантирует,
                       что sudo никогда не понижает umask при выполнении команды.
                       Примечание: в системах, использующих PAM, конфигурация PAM по
                       умолчанию может указывать свой собственный umask, который будет
                       переопределять значение, установленное в sudoers.

     Строковые:

     badpass_message   Сообщение, которое отображается, если пользователь вводит неверный
                       пароль. По умолчанию используется Sorry, попробуйте еще раз.
                       если оскорбления не включены.

     editor            Список редакторов, разделенный двоеточиями (‘:’), разрешенный
                       для использования с visudo. visudo выберет редактор, который
                       соответствует переменной окружения EDITOR пользователя, если это
                       возможно, или первый редактор в списке, который существует и
                       является исполняемым. По умолчанию используется /usr/bin/editor.

     iolog_dir         Каталог верхнего уровня, используемый при создании пути к каталогу
                       журнала ввода/вывода. Используется только в том случае, если
                       включены опции log_input или log_output или когда для команды
                       присутствуют теги LOG_INPUT или LOG_OUTPUT. Порядковый номер
                       сеанса, если таковой имеется, хранится в каталоге. По умолчанию
                       это /var/log/sudo-io.

                       Поддерживаются следующие процентные escape-последовательности (‘%’):

                       %{seq}
                             расширен до монотонно увеличивающегося порядкового номера
                             base-36, такого как 0100A5, где каждые две цифры
                             используются для формирования нового каталога,
                             например, 01/00/А5

                       %{user}
                             расширен до имени пользователя вызывающего пользователя

                       %{group}
                             расширен до имени реальной группы вызывающего
                             пользователя ID

                       %{runas_user}
                             расширен до имени пользователя для входа в систему,
                             команда будет выполняться как (например, root)

                       %{runas_group}
                             расширен до имени группы пользователя, команда будет
                             выполняться как (например, колесо)

                       %{hostname}
                             расширен до локального имени хоста без имени домена

                       %{command}
                             расширен до базового имени запускаемой команды

                       Кроме того, любые escape-последовательности, поддерживаемые
                       функцией strftime(3) системы, будут расширены.

                       Чтобы включить буквальный символ ‘%’, следует использовать
                       строку ‘%%’.

     iolog_file        Имя пути относительно iolog_dir, в котором хранятся журналы
                       ввода/вывода, когда включены опции log_input или log_output или
                       когда для команды присутствуют теги LOG_INPUT или LOG_OUTPUT.
                       Обратите внимание, что iolog_file может содержать компоненты
                       каталога. По умолчанию используется “%{seq}”.

                       Посмотрите опцию iolog_dir выше для списка поддерживаемых
                       escape-последовательностей процента (‘%’).

                       В дополнение к escape-последовательностям, имена путей,
                       оканчивающиеся на шесть или более Xs, заменят Xs уникальной
                       комбинацией цифр и букв, аналогично функции mktemp(3).

                       Если путь, созданный объединением iolog_dir и iolog_file, уже
                       существует, существующий файл журнала I/O будет обрезан и
                       перезаписан, если только iolog_file не заканчивается на
                       шести или более Xs.

     lecture_status_dir
                       Каталог, в котором sudo хранит файлы состояния сессий для каждого
                       пользователя. Как только пользователь получил сессию, в этом
                       каталоге создается файл нулевой длины, чтобы sudo больше не читал
                       лекции пользователю. Этот каталог не следует очищать при
                       перезагрузке системы. По умолчанию используется
                       /var/lib/sudo/lectured.

     mailsub           Тема письма, отправленного пользователю почты. Escape %h расширится
                       до имени хоста машины. По умолчанию это
                       “*** SECURITY information for %h ***”.

     noexec_file       Начиная с версии 1.8.1 sudo, эта опция больше не поддерживается.
                       Путь к файлу noexec теперь должен быть указан в файле sudo.conf(5).

     pam_login_service
                       В системах, которые используют PAM для аутентификации, это имя
                       службы используется, когда указана опция -i. Значением по умолчанию
                       является “sudo”. Смотрите описание pam_service для получения
                       дополнительной информации.

                       Этот параметр поддерживается только версией 1.8.8 или выше.

     pam_service       В системах, которые используют PAM для аутентификации, имя службы
                       определяет политику PAM, которую нужно применить. Обычно это
                       соответствует записи в файле pam.conf или в файле /etc/pam.d.
                       Значением по умолчанию является “sudo”.

                       Этот параметр поддерживается только версией 1.8.8 или выше.

     passprompt        Подсказка по умолчанию для использования при запросе пароля; может
                       быть переопределено с помощью опции -p или переменной окружения
                       SUDO_PROMPT. Поддерживаются следующие процентные
                       escape-последовательности (‘%’):

                       %H    расширен до имени локального хоста, включая имя домена
                             (только если имя хоста машины полностью определено или
                             установлена ​​опция fqdn)

                       %h    расширен до локального имени хоста без имени домена

                       %p    расширен до пользователя, чей пароль запрашивается
                             (учитывает флаги rootpw, targetpw и runaspw в sudoers)

                       %U    расширен до имени пользователя, под которым будет
                             выполняться команда (по умолчанию root)

                       %u    расширен до имени пользователя вызывающего пользователя

                       %%    два последовательных символа % объединяются в один символ %

                       Значением по умолчанию является ##@“[sudo] password for %p:”@##.

     role              Правило SELinux по умолчанию, используемое при создании нового
                       контекста безопасности для запуска команды. Правило по умолчанию
                       может быть переопределена для каждой команды в файле sudoers или
                       с помощью параметров командной строки. Эта опция доступна только
                       тогда, когда sudo построен с поддержкой SELinux.

     runas_default     Пользователь по умолчанию для запуска команд, как будто опция -u
                       не указана в командной строке. По умолчанию это root.

     syslog_badpri     Приоритет системного журнала, используемый при неудачной
                       аутентификации пользователя. По умолчанию для оповещения.

                       Поддерживаются следующие приоритеты системного журнала: alert,
                       crit, debug, emerg, err, info, notice, и warning.

     syslog_goodpri    Приоритет системного журнала, используемый при успешной
                       аутентификации пользователя. По умолчанию 
                       заменить "(notice)".

                       Смотрите список поддерживаемых приоритетов системного
                       журнала в syslog_badpri.

     sudoers_locale    Язык, используемый при анализе файла sudoers, регистрации
                       команд и отправке электронной почты. Обратите внимание, что
                       изменение языкового стандарта может повлиять на интерпретацию
                       sudoers. По умолчанию используется “C”.

     timestampdir      Каталог, в котором sudo хранит свои файлы меток времени. Этот
                       каталог должен быть очищен при перезагрузке системы. По умолчанию
                       это /var/run/sudo/ts.

     timestampowner    Владелец каталога статуса сессии, каталога отметок времени и
                       всех файлов, хранящихся в нем. По умолчанию это root.

     type              Тип SELinux по умолчанию, который используется при создании нового
                       контекста безопасности для запуска команды. Тип по умолчанию может
                       быть переопределен для каждой команды в файле sudoers или с помощью
                       параметров командной строки. Эта опция доступна только тогда, когда
                       sudo построен с поддержкой SELinux.

     Строки, которые можно использовать в логическом контексте:

     env_file      Опция env_file указывает полный путь к файлу, содержащему переменные,
                   которые должны быть установлены в среде выполняемой программы. Записи
                   в этом файле должны иметь вид “VARIABLE=value” или
                   “export VARIABLE=value”. Значение может быть заключено в одинарные или
                   двойные кавычки. Переменные в этом файле зависят от других параметров
                   среды sudo, таких как env_keep и env_check.

     exempt_group  Пользователи этой группы освобождаются от требований к паролям и PATH.
                   Указанное имя группы не должно включать префикс %. Это не установлено
                   по умолчанию.

     group_plugin  Строка, содержащая плагин группы sudoers с необязательными аргументами.
                   Строка должна состоять из пути к плагину, либо полностью определенного,
                   либо относительно каталога /usr/lib/sudo, за которым следуют любые
                   аргументы конфигурации, которые требуются плагину. Эти аргументы (если
                   таковые имеются) будут переданы в функцию инициализации плагина. Если
                   аргументы присутствуют, строка должна быть заключена в двойные
                   кавычки ("").

                   Для получения дополнительной информации см.GROUP PROVIDER PLUGINS.

     lecture       Этот параметр определяет, когда короткая лекция будет напечатана
                   вместе с запросом пароля. Он имеет следующие возможные значения:

                   always  Всегда читать лекции пользователю.

                   never   Никогда не читайте лекции пользователю.

                   once    Читайте лекции пользователю только при первом запуске sudo.

                   Если значение не указано, подразумевается значение один раз. Отрицание
                   опции приводит к тому, что значение никогда не используется. Значением
                   по умолчанию никогда не является.

     lecture_file  Путь к файлу, содержащему альтернативную лекцию sudo, которая будет
                   использоваться вместо стандартной лекции, если указанный файл
                   существует. По умолчанию в sudo используется встроенная лекция.

     listpw        Эта опция контролирует, когда потребуется пароль, когда пользователь
                   запускает sudo с опцией -l. Имеет следующие возможные значения:

                   all       Все записи файла пользователя sudoers для текущего хоста
                             должны иметь установленный флаг NOPASSWD, чтобы не вводить
                             пароль.

                   always    Пользователь должен всегда вводить пароль, чтобы
                             использовать опцию -l.

                   any       По крайней мере одна из записей файла sudoers пользователя
                             для текущего хоста должна иметь установленный флаг NOPASSWD,
                             чтобы не вводить пароль.

                   never     Пользователю никогда не нужно вводить пароль для
                             использования опции -l.

                   Если значение не указано, подразумевается значение any. Отрицание
                   опции приводит к тому, что значение никогда не используется. Значением
                   по умолчанию является любое.

     logfile       Путь к файлу журнала sudo (не к файлу журнала syslog). Установка пути
                   включает запись в файл; Отрицание этого параметра отключает его. По
                   умолчанию sudo регистрируется через системный журнал.

     mailerflags   Флаги для использования при вызове почтовой программы. По
                   умолчанию используется -t.

     mailerpath    Путь к почтовой программе, используемой для отправки предупреждений.
                   По умолчанию путь к sendmail устанавливается во время настройки.

     mailfrom      Адрес для использования в качестве адреса “from” при отправке
                   предупреждений и сообщений об ошибках. Адрес должен быть заключен в
                   двойные кавычки ("") для защиты от интерпретации sudo знака @@. По
                   умолчанию используется имя пользователя, запускающего sudo.

     mailto        Адрес для отправки предупреждений и сообщений об ошибках. Адрес должен
                   быть заключен в двойные кавычки ("") для защиты от sudo,
                   интерпретирующего знак @@. По умолчанию root.

     secure_path   Путь, используемый для каждой команды, запускаемой из sudo. Если вы
                   не доверяете людям, работающим с sudo, иметь переменную среды
                   здравомыслящего PATH, вы можете использовать это. Другое использование,
                   если вы хотите, чтобы “root path” был отделен от “user path”.
                   secure_path не влияет на пользователей в группе, указанной параметром
                   exempt_group. Эта опция не установлена ​​по умолчанию.

     syslog        Средство системного журнала, если системный журнал используется для
                   ведения журнала (отключите, чтобы отключить ведение
                   системного журнала). По умолчанию используется authpriv.

                   Поддерживаются следующие средства системного журнала: authpriv
                   (если ваша ОС поддерживает это), auth, daemon, user, local0, local1,
                   local2, local3, local4, local5, local6, и local7.

     verifypw      Эта опция контролирует, когда потребуется пароль, когда пользователь
                   запускает sudo с опцией -v. Имеет следующие возможные значения:

                   all     Все записи файла sudoers пользователя для текущего хоста
                           должны иметь установленный флаг NOPASSWD, чтобы не
                           вводить пароль.

                   always  Пользователь должен всегда вводить пароль, чтобы использовать
                           опцию -v.

                   any     По крайней мере одна из записей файла sudoers пользователя
                           для текущего хоста должна иметь установленный флаг NOPASSWD,
                           чтобы не вводить пароль.

                   never   Пользователю никогда не нужно вводить пароль для
                           использования опции -v.

                   Если значение не указано, подразумевается значение ALL. Отрицание
                   опции приводит к тому, что значение никогда не используется. Значением
                   по умолчанию является ALL.

     Списки, которые можно использовать в логическом контексте:

     env_check         Переменные среды должны быть удалены из среды пользователя, если
                       они не рассматриваются как “safe”. Для всех переменных, кроме TZ,
                       “safe” означает, что значение переменной не содержит символов ‘%’
                       или ‘/’. Это может быть использовано для защиты от уязвимостей
                       формата printf в плохо написанных программах. Переменная TZ
                       считается небезопасной, если выполняется одно из следующих условий:

                       ·   Он состоит из полного имени пути, возможно, с префиксом
                           двоеточия (‘:’), которое не соответствует расположению
                           каталога zoneinfo.

                       ·   Он содержит элемент пути ..  .

                       ·   Он содержит пробелы или непечатаемые символы.

                       ·   Это больше, чем значение PATH_MAX.

                       Аргумент может быть двойной кавычкой, разделенным пробелами списком
                       или единственным значением без двойных кавычек. Список можно
                       заменить, добавить, удалить или отключить, используя операторы
                       =, +=, -=, и ! соответственно. Независимо от того, включена или
                       отключена опция env_reset, переменные, указанные в env_check, будут
                       сохранены в среде, если они пройдут вышеупомянутую проверку.
                       Глобальный список переменных среды для проверки отображается,
                       когда sudo запускается пользователем root с опцией -V.

     env_delete        Переменные среды, которые нужно удалить из среды пользователя,
                       когда опция env_reset не действует. Аргумент может быть двойной
                       кавычкой, разделенным пробелами списком или единственным значением
                       без двойных кавычек. Список можно заменить, добавить, удалить или
                       отключить, используя операторы =, +=, -=, и ! соответственно.
                       Глобальный список переменных среды для удаления отображается, когда
                       sudo запускается пользователем root с опцией -V. Обратите внимание,
                       что многие операционные системы удаляют потенциально опасные
                       переменные из среды любого процесса setuid (такого как sudo).

     env_keep          Переменные среды, которые должны быть сохранены в пользовательской
                       среде, когда включена опция env_reset. Это позволяет детально
                       контролировать среду, в которой будут появляться процессы,
                       порожденные sudo. Аргумент может быть двойной кавычкой, разделенным
                       пробелами списком или единственным значением без двойных кавычек.
                       Список можно заменить, добавить, удалить или отключить, используя
                       операторы =, +=, -=, и ! соответственно. Глобальный список
                       переменных, которые нужно сохранить, отображается, когда sudo
                       запускается пользователем root с опцией -V.

GROUP PROVIDER PLUGINS
     Плагин sudoers поддерживает собственный интерфейс плагина, который позволяет
     выполнять поиск не в Unix-группах, который может запрашивать источник группы,
     отличный от стандартной базы данных Unix-групп. Это может быть использовано для
     реализации поддержки синтаксиса nonunix_group, описанного ранее.

     Плагины групповых провайдеров задаются через настройку group_plugin Defaults.
     Аргумент group_plugin должен состоять из пути к плагину, либо полностью определенного,
     либо относительного к каталогу /usr/lib/sudo, с последующими любыми параметрами
     конфигурации, которые требуются плагину. Эти опции (если указаны) будут переданы в
     функцию инициализации плагина. Если параметры присутствуют, строка должна быть
     заключена в двойные кавычки ("").

     Следующие плагины провайдера группы установлены по умолчанию:

     group_file
               Плагин group_file поддерживает альтернативный файл группы, который
               использует тот же синтаксис, что и файл /etc/group. Путь к файлу группы
               должен быть указан в качестве опции к плагину. Например, если файл группы,
               который будет использоваться, это /etc/sudo-group:

               Defaults group_plugin="group_file.so /etc/sudo-group"

     system_group
               Плагин system_group поддерживает групповой поиск через стандартные функции
               библиотеки C getgrnam() и getgrid(). Этот плагин может использоваться в
               случаях, когда пользователь принадлежит к группам, которых нет в векторе
               дополнительных групп пользователя. Этот плагин не принимает никаких опций:

               Defaults group_plugin=system_group.so

     Плагин группы провайдера API подробно описан в sudo_plugin(8).

LOG FORMAT
     sudoers может регистрировать события, используя syslog(3) или простой файл журнала.
     Формат журнала практически идентичен в обоих случаях.

   Принятые записи журнала команд
     Команды, которые запускает sudo, регистрируются в следующем формате (разбиты на
     несколько строк для удобства чтения):

         date hostname progname: username : TTY=ttyname ; PWD=cwd ; \
             USER=runasuser ; GROUP=runasgroup ; TSID=logid ; \
             ENV=env_vars COMMAND=command

     Где поля следующие:

     date          Дата запуска команды. Как правило, это в формате “MMM, DD, HH:MM:SS”.
                   При ведении журнала через syslog(3) фактический формат даты
                   контролируется демоном syslog. Если при входе в файл включена опция
                   log_year, дата также будет включать год.

     hostname      Имя хоста sudo было запущено. Это поле присутствует только при
                   входе через syslog(3).

     progname      Название программы, обычно sudo или sudoedit. Это поле присутствует
                   только при входе через syslog(3).

     username      Имя пользователя, который запустил sudo.

     ttyname       Короткое имя терминала (как “console”, “tty01”, или “pts/0”)с которым
                   sudo было запущено, или “unknown”, если терминала не было.

     cwd           Текущий рабочий каталог, в котором был запущен sudo.

     runasuser     Пользователь, от имени которого  команда была запущена.

     runasgroup    Группа, от имени которой команда была выполнена, как если бы она
                   была указана в командной строке.

     logid         Идентификатор журнала I/O, который можно использовать для
                   воспроизведения выходных данных команды. Это присутствует, только
                   если включена опция log_input или log_output.

     env_vars      Список переменных среды, указанных в командной строке, если указан.

     command       Фактическая команда, которая была выполнена.

     Сообщения регистрируются с использованием локали, указанной в sudoers_locale, по
     умолчанию это локаль “C”.

   Запрещенные записи журнала команд
     Если пользователю не разрешено запускать команду, причиной отказа будет имя
     пользователя. Возможные причины включают в себя:

     user NOT in sudoers
       Пользователь не указан в файле sudoers.

     user NOT authorized on host
       Пользователь указан в файле sudoers, но ему не разрешено запускать
       команды на хосте..

     command not allowed
       Пользователь указан в файле sudoers для хоста, но ему не разрешено запускать
       указанную команду.

     3 incorrect password attempts
       Пользователь не смог ввести свой пароль после 3 попыток. Фактическое количество
       попыток будет зависеть от количества неудачных попыток и значения параметра
       passwd_tries.

     a password is required
       Параметр sudo -n был указан, но требуется пароль.

     sorry, you are not allowed to set the following environment variables
       Пользователь указал переменные среды в командной строке, которые не были
       разрешены sudoers.

   Error log entries
     Если возникает ошибка, sudoers регистрирует сообщение и, в большинстве случаев,
     отправляет сообщение администратору по электронной почте. Возможные ошибки включают
     в себя:

     parse error in /etc/sudoers near line N
       sudoers обнаружил ошибку при разборе указанного файла. В некоторых случаях
       фактическая ошибка может быть на одну строку выше или ниже указанного номера строки,
       в зависимости от типа ошибки.

     problem with defaults entries
       Файл sudoers содержит одну или несколько неизвестных настроек по умолчанию. Это
       не мешает запуску sudo, но файл sudoers должен быть проверен с помощью visudo.

     timestamp owner (username): No such user
       Владелец каталога меток времени, указанный в настройке метки времени, не может быть
       найден в базе данных паролей.

     unable to open/read /etc/sudoers
       Файл sudoers не может быть открыт для чтения. Это может произойти, если файл
       sudoers находится в удаленной файловой системе, которая отображает пользовательское
       значение ID 0 в другое значение. Обычно sudoers пытается открыть файл sudoers,
       используя разрешения группы, чтобы избежать этой проблемы. Рассмотрите возможность
       изменения владельца /etc/sudoers или добавления аргумента, подобного
       “sudoers_uid=N” (где ‘N’ - это пользователь ID, которому принадлежит файл
       sudoers), до конца строки sudoers Plugin в файле sudo.conf(5).

     unable to stat /etc/sudoers
       Файл /etc/sudoers пропал, отсутствует.

     /etc/sudoers is not a regular file
       Файл /etc/sudoers существует, но не является обычным файлом или символической
       ссылкой.

     /etc/sudoers is owned by uid N, should be 0
       Файл sudoers имеет неправильного владельца. Если вы хотите изменить владельца
       файла sudoers, добавьте “sudoers_uid=N” (где ‘N’ - пользователь ID, которому
       принадлежит файл sudoers) в строку sudoers Plugin в файле sudo.conf(5).

     /etc/sudoers is world writable
       Права доступа к файлу sudoers позволяют всем пользователям писать в него. Файл
       sudoers не должен быть доступен для записи всем, режим файла по умолчанию - 0440
       (доступен для чтения владельцу и группе, но не доступен для записи). Режим по
       умолчанию можно изменить с помощью параметра “sudoers_mode” на строку sudoers
       Plugin в файле sudo.conf(5).

     /etc/sudoers is owned by gid N, should be 1
       Файл sudoers имеет неправильное владение группой. Если вы хотите изменить
       владельца группы файлов sudoers, добавьте “sudoers_gid=N” (где ‘N’ - идентификатор
       группы, которому принадлежит файл sudoers) в строку sudoers Plugin в файле
       sudo.conf(5).

     unable to open /var/run/sudo/ts/username
       sudoers не удалось прочитать или создать файл метки времени пользователя. Это может
       произойти, когда timestampowner установлено для пользователя, отличного от root, и
       режим /var/run/sudo не доступен для поиска группой или другим пользователем. Режим
       по умолчанию для /var/run/sudo - 0711.

     unable to write to /var/run/sudo/ts/username
       sudoers не удалось записать в файл отметки времени пользователя.

     /var/run/sudo/ts is owned by uid X, should be Y
       Каталог меток времени принадлежит пользователю, отличному от метки времени. Это
       может произойти, когда значение timestampowner было изменено. sudoers будет
       игнорировать каталог отметок времени, пока владелец не будет исправлен.

     /var/run/sudo/ts is group writable
       Каталог меток времени доступен для записи в группе; это должно быть доступно для
       записи только метке времени. Режим по умолчанию для каталога отметок времени - 0700.
       sudoers будет игнорировать каталог отметок времени, пока режим не будет исправлен.

   Notes on logging via syslog
     По умолчанию sudoers регистрирует сообщения через syslog(3). Добавлены демоны
     системного журнала, а не самими жертвами. Они могут различаться по формату в разных
     системах.

     В большинстве систем syslog(3) имеет относительно небольшой буфер журнала. Чтобы
     предотвратить усечение аргументов командной строки, sudoers разделит сообщения
     журнала, которые больше, чем символы 960 (не включая дату, имя хоста и строку “sudo”).
     Когда сообщение разбивается, дополнительные части будут включать строку
     “(command continued)” после имени пользователя и до продолжения аргументов командной
     строки.

   Примечания по входу в файл
     Если установлена ​​опция logfile, sudoers будет записывать в локальный файл, такой
     как /var/log/sudo. При входе в файл sudoers использует формат, аналогичный syslog(3),
     с некоторыми важными отличиями:

     1.   Поля progname и hostname отсутствуют.

     2.   Если опция log_year включена, дата также будет включать год.

     3.   Строки, которые длиннее, чем символы логинелена (по умолчанию 80), переносятся
          по словам и продолжаются на следующей строке с отступом в четыре символа. Это
          облегчает чтение записей для человека, но затрудняет использование grep(1) в
          файлах журналов. Если опция loglinelen установлена ​​в 0 (или отменяется с помощью
          ‘!’), перенос слов будет отключен.

I/O LOG FILES
     Когда ведение журнала ввода/вывода включено, sudo запускает команду в псевдо-tty и
     регистрирует все пользовательские ввод и/или вывод. Ввод/вывод регистрируется в
     каталоге, указанном параметром iolog_dir (по умолчанию /var/log/sudo-io), используя
     уникальный сеанс ID, включенный в строку журнала sudo, с префиксом “TSID=”. Опция
     iolog_file может использоваться для управления форматом сессии ID.

     Каждый журнал I/O хранится в отдельном каталоге, который содержит следующие файлы:

     log       текстовый файл, содержащий время выполнения команды, имя пользователя,
               запустившего sudo, имя целевого пользователя, имя целевой группы
               (необязательно), терминал, с которого был запущен sudo, количество строк
               и столбцы терминала, рабочий каталог, из которого была запущена команда, и
               путь к самой команде (с аргументами, если они есть)

     timing    журнал количества времени между и количеством байтов в каждой записи журнала
               I/O (используется для воспроизведения сеанса)

     ttyin     ввод от пользователя tty (что пользователь вводит)

     stdin     ввод из канала или файла

     ttyout    вывод из псевдо-tty (что команда пишет на экран)

     stdout    стандартный вывод в канал или перенаправление в файл

     stderr    стандартная ошибка в канал или перенаправление в файл

     Все файлы, кроме журнала, сжимаются в формате gzip, если опция compress_io не была
     отключена. Из-за буферизации данные журнала I/O не будут завершены, пока команда
     sudo не будет выполнена. Выходную часть файла журнала I/O можно просмотреть с
     помощью утилиты sudoreplay(8), которую также можно использовать для просмотра или
     поиска доступных журналов.

     Обратите внимание, что пользовательский ввод может содержать конфиденциальную
     информацию, такую ​​как пароли (даже если они не отображаются на экране), которая будет
     храниться в незашифрованном файле журнала. В большинстве случаев регистрация выходных
     данных команды через log_output или LOG_OUTPUT - это все, что требуется.

     Поскольку журналы I/O каждого сеанса хранятся в отдельном каталоге, традиционные
     утилиты ротации журналов нельзя использовать для ограничения количества журналов I/O.
     Самый простой способ ограничить количество I/O - установить для параметра maxseq
     максимальное количество журналов, которые вы хотите сохранить. Как только порядковый
     номер журнала I/O достигнет maxseq, он будет сброшен до нуля, и sudoers будет обрезать
     и повторно использовать любые существующие журналы I/O.

FILES
     /etc/sudo.conf            Конфигурация внешнего интерфейса Sudo

     /etc/sudoers              Список кто может что запустить

     /etc/group                Файл локальных групп

     /etc/netgroup             Список сетевых групп

     /var/log/sudo-io          I/O лог-файлы

     /var/run/sudo/ts          Каталог, содержащий метки времени для политики
                               безопасности sudoers

     /var/lib/sudo/lectured    Каталог, содержащий файлы статуса сессии для политики
                               безопасности sudoers

     /etc/environment          Исходная среда для режима -i в системах AIX и Linux

EXAMPLES
     Ниже приведены примеры записей файла sudoers. Следует признать, что некоторые из них
     немного надуманные. Сначала мы разрешаем нескольким переменным среды проходить, а
     затем определяем наши псевдонимы:

     # Запускать X приложения через sudo; HOME используется для поиска файла .Xauthority.
     # Обратите внимание, что другие программы используют HOME для поиска файлов
     # конфигурации, и это может привести к повышению привилегий!
     Defaults env_keep += "DISPLAY HOME"

     # Алиасы псевдонима пользователя
     User_Alias      FULLTIMERS = millert, mikef, dowdy
     User_Alias      PARTTIMERS = bostley, jwfox, crawl
     User_Alias      WEBMASTERS = will, wendy, wim

     # Алиасы псевдонима Runas
     Runas_Alias     OP = root, operator
     Runas_Alias     DB = oracle, sybase
     Runas_Alias     ADMINGRP = adm, oper

     # Алиасы псевдонима хоста
     Host_Alias      SPARC = bigtime, eclipse, moet, anchor :\
                     SGI = grolsch, dandelion, black :\
                     ALPHA = widget, thalamus, foobar :\
                     HPPA = boa, nag, python
     Host_Alias      CUNETS = 128.138.0.0/255.255.0.0
     Host_Alias      CSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0
     Host_Alias      SERVERS = master, mail, www, ns
     Host_Alias      CDROM = orion, perseus, hercules

     # Алиасы псевдонима Cmnd
     Cmnd_Alias      DUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\
                             /usr/sbin/restore, /usr/sbin/rrestore,\
                             sha224:0GomF8mNN3wlDt1HD9XldjJ3SNgpFdbjO1+NsQ== \
                             /home/operator/bin/start_backups
     Cmnd_Alias      KILL = /usr/bin/kill
     Cmnd_Alias      PRINTING = /usr/sbin/lpc, /usr/bin/lprm
     Cmnd_Alias      SHUTDOWN = /usr/sbin/shutdown
     Cmnd_Alias      HALT = /usr/sbin/halt
     Cmnd_Alias      REBOOT = /usr/sbin/reboot
     Cmnd_Alias      SHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\
                              /usr/local/bin/tcsh, /usr/bin/rsh,\
                              /usr/local/bin/zsh
     Cmnd_Alias      SU = /usr/bin/su
     Cmnd_Alias      PAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less

     Здесь мы переопределяем некоторые из скомпилированных значений по умолчанию. Мы
     хотим, чтобы sudo регистрировалась через syslog(3) с использованием средства
     авторизации во всех случаях. Мы не хотим подвергать штатный персонал сессии sudo,
     пользователю millert не нужно давать пароль, и мы не хотим сбрасывать переменные
     окружения LOGNAME, USER или USERNAME при запуске команд от имени пользователя root.
     Кроме того, на машинах в SERVERS Host_Alias мы храним дополнительный локальный файл
     журнала и следим за тем, чтобы мы записывали год в каждой строке журнала, поскольку
     записи журнала будут храниться в течение нескольких лет. Наконец, мы отключаем
     экранирование оболочки для команд в PAGERS Cmnd_Alias (/usr/bin/more, /usr/bin/pg и
     /usr/bin/less). Обратите внимание, что это не будет эффективно ограничивать
     пользователей с привилегиями sudo ALL.

     # Переопределить встроенные значения по умолчанию
     Defaults                syslog=auth
     Defaults>root           !set_logname
     Defaults:FULLTIMERS     !lecture
     Defaults:millert        !authenticate
     Defaults@@SERVERS        log_year, logfile=/var/log/sudo.log
     Defaults!PAGERS         noexec

     Спецификация User - это та часть, которая фактически определяет, кто и что может
     выполнять.

     root            ALL = (ALL) ALL
     %wheel          ALL = (ALL) ALL

     Мы разрешаем root и любому пользователю в групповом поле запускать любую команду
     на любом хосте, как любой пользователь.

     FULLTIMERS      ALL = NOPASSWD: ALL

     Системные администраторы, работающие полный рабочий день (millert, mikef, и dowdy),
     могут запускать любую команду на любом хосте без аутентификации.

     PARTTIMERS      ALL = ALL

     Неполный рабочий день системные администраторы (bostley, jwfox, и crawl) могут
     запускать любую команду на любом хосте, но они должны сначала пройти аутентификацию
     (поскольку в записи отсутствует тег NOPASSWD).

     jack            CSNETS = ALL

     Пользовательский разъем может выполнять любую команду на машинах с псевдонимом
     CSNETS (сети 128.138.243.0, 128.138.204.0, и 128.138.242.0). Из этих сетей только
     128.138.204.0 имеет явную маску сети (в нотации CIDR), указывающую, что это сеть
     класса C. Для других сетей в CSNETS во время сопоставления будет использоваться
     маска локальной сети.

     lisa            CUNETS = ALL

     Пользователь lisa может выполнить любую команду на любом хосте в псевдониме
     CUNETS (сеть 128.138.0.0 класса B).

     operator        ALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\
                     sudoedit /etc/printcap, /usr/oper/bin/

     Пользователь operator может запускать команды, ограниченные простым обслуживанием.
     Здесь это команды, связанные с резервным копированием, процессами уничтожения,
     системой печати, выключением системы и любыми командами в каталоге /usr/oper/bin/.
     Обратите внимание, что одна команда в DUMPS Cmnd_Alias включает в себя sha224 digest,
     /home/operator/bin/start_backups. Это потому, что каталог, содержащий скрипт,
     доступен для записи пользователю operator. Если скрипт будет изменен (что приведет
     к несоответствию дайджеста), будет невозможно запустить его через sudo.

     joe             ALL = /usr/bin/su operator

     Пользователь joe может только su(1) от operator.

     pete            HPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root

     %opers          ALL = (: ADMINGRP) /usr/sbin/

     Пользователи в группе opers могут запускать команды в /usr/sbin/ от имени любой
     группы в ADMINGRP Runas_Alias (группы adm и oper).

     Пользователь pete может изменять любой пароль, кроме root, на машинах HPPA. Поскольку
     аргументы командной строки совпадают как одна объединенная строка, подстановочный
     знак ‘*’ будет соответствовать нескольким словам. В этом примере предполагается, что
     passwd(1) не принимает несколько имен пользователей в командной строке. Обратите
     внимание, что в системах GNU параметры passwd(1) могут быть указаны после
     пользовательского аргумента. В результате это правило также позволит:

         passwd username --expire

     что может быть нежелательно.

     bob             SPARC = (OP) ALL : SGI = (OP) ALL

     Пользователь bob может запускать что угодно на машинах SPARC и SGI, как любой
     пользователь, указанный в OP Runas_Alias (root и operator.)

     jim             +biglab = ALL

     Пользователь jim может выполнить любую команду на машинах в сетевой группе biglab.
     sudo знает, что “biglab” является сетевой группой благодаря префиксу ‘+’.

     +secretaries    ALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser

     Пользователи в сетевой группе секретарей должны помогать управлять принтерами, а
     также добавлять и удалять пользователей, поэтому им разрешено выполнять эти команды
     на всех машинах.

     fred            ALL = (DB) NOPASSWD: ALL

     Пользователь fred может запускать команды как любой пользователь в
     DB Runas_Alias (oracle или sybase) без указания пароля.

     john            ALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*

     На машинах ALPHA пользователь john может su кому угодно, кроме root, но ему не
     разрешено указывать какие-либо параметры для команды su(1).

     jen             ALL, !SERVERS = ALL

     Пользователь jen может запустить любую команду на любом компьютере, кроме тех,
     что в SERVERS Host_Alias(master, mail, www и ns).

     jill            SERVERS = /usr/bin/, !SU, !SHELLS

     Для любой машины в SERVERS Host_Alias jill может запускать любые команды в
     каталоге /usr/bin/, кроме тех, которые принадлежат SU и SHELLS Cmnd_Aliases. Хотя
     это и не упомянуто в правиле, все команды в PAGERS Cmnd_Alias находятся в /usr/bin
     и имеют установленную опцию noexec.

     steve           CSNETS = (operator) /usr/local/op_commands/

     Пользователь steve может выполнить любую команду в каталоге /usr/local/op_commands/,
     но только как пользователь operator.

     matt            valkyrie = KILL

     На его личной рабочей станции, valkyrie, matt должен иметь возможность убивать
     зависшие процессы.

     WEBMASTERS      www = (www) ALL, (root) /usr/bin/su www

     На хосте www любой пользователь в WEBMASTERS User_Alias (will, wendy и wim) может
     выполнить любую команду от имени пользователя www (которому принадлежат веб-страницы)
     или просто от su(1) до www.

     ALL             CDROM = NOPASSWD: /sbin/umount /CDROM,\
                     /sbin/mount -o nosuid\,nodev /dev/cd0a /CDROM

     Любой пользователь может подключить или отключить CD-ROM на компьютерах в
     CDROM Host_Alias (orion, perseus, hercules) без ввода пароля. Это немного
     утомительно для пользователей, поэтому он является основным кандидатом для
     инкапсуляции в сценарии оболочки.

SECURITY NOTES
   Ограничения оператора ‘!’
     Как правило, команды “subtract” из ALL с помощью оператора ‘!’ неэффективны.
     Пользователь может тривиально обойти это, скопировав нужную команду под другим
     именем и затем выполнив ее. Например:

     bill    ALL = ALL, !SU, !SHELLS

     На самом деле не мешает bill запускать команды, перечисленные в SU или SHELLS,
     поскольку он может просто скопировать эти команды под другим именем или использовать
     экранирование оболочки из редактора или другой программы. Поэтому такого рода
     ограничения следует в лучшем случае считать рекомендациями (и усиленными политикой).

     В общем, если у пользователя есть sudo ALL, ничто не мешает ему создать свою
     собственную программу, которая предоставляет ему корневую оболочку (или создает
     собственную копию оболочки), независимо от каких-либо элементов ‘!’ в
     пользовательской спецификации.

   Использование fast_glob для безопасности
     Если используется опция fast_glob, невозможно надежно отрицать команды, в
     которых имя пути содержит символы подстановки (подстановочные знаки). Это потому,
     что функция fnmatch(3) библиотеки C не может разрешать относительные пути. Хотя
     это обычно создает неудобства для правил, предоставляющих привилегии, это может
     привести к проблеме безопасности для правил, которые вычитают или
     отменяют привилегии.

     Например, учитывая следующую запись файла sudoers:

     john    ALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\
                   /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root

     Пользователь john может по-прежнему запускать /usr/bin/passwd root, если
     включен fast_glob, изменив /usr/bin и запустив вместо него ./passwd root.

   Предотвращение побега оболочки
     Когда sudo выполняет программу, она может делать все, что пожелает, в том числе
     запускать другие программы. Это может быть проблемой безопасности, поскольку
     программа нередко разрешает экранирование оболочки, что позволяет пользователю
     обходить контроль доступа и ведение журнала sudo. К распространенным программам,
     разрешающим экранирование оболочки, относятся оболочки (очевидно), редакторы,
     paginators, почта и терминальные программы.

     Есть два основных подхода к этой проблеме:

     restrict  Избегайте предоставления пользователям доступа к командам, которые
               позволяют пользователю выполнять произвольные команды. Многие редакторы
               имеют ограниченный режим, в котором экранирование отключено, хотя sudoedit-
               лучшее решение для запуска редакторов через sudo. Из-за большого количества
               программ, которые предлагают экранирование оболочки, ограничение
               пользователей набором программ, которые обычно не являются
               неработоспособными.

     noexec    Многие системы, поддерживающие разделяемые библиотеки, имеют возможность
               переопределять функции библиотеки по умолчанию, указывая переменную среды
               (обычно LD_PRELOAD) на альтернативную разделяемую библиотеку. В таких
               системах sudo можно использовать функцию noexec, чтобы предотвратить
               выполнение программы sudo другими программами. Однако обратите внимание,
               что это относится только к собственным динамически связанным исполняемым
               файлам. Статически связанные исполняемые и сторонние исполняемые файлы,
               работающие в режиме двоичной эмуляции, не затрагиваются.

               Известно, что функция noexec работает с SunOS, Solaris, *BSD,
               Linux, IRIX, Tru64 UNIX, MacOS X, HP-UX 11.x и AIX 5.3 и выше. Он должен
               поддерживаться в большинстве операционных систем, которые поддерживают
               переменную окружения LD_PRELOAD. Проверьте страницы руководства вашей
               операционной системы на наличие динамического компоновщика (обычно ld.so,
               ld.so.1, dyld, dld.sl, rld, или loader), чтобы увидеть, поддерживается
               ли LD_PRELOAD.

               Чтобы включить noexec для команды, используйте тег NOEXEC, как описано
               в разделе «Спецификация пользователя» выше. Вот этот пример снова:

               aaron   shanty = NOEXEC: /usr/bin/more, /usr/bin/vi

               Это позволяет пользователю aaron запускать /usr/bin/more и /usr/bin/vi с
               включенным noexec. Это предотвратит выполнение этими двумя командами других
               команд (например, оболочки). Если вы не уверены, может ли ваша система
               поддерживать noexec, вы всегда можете просто попробовать и проверить,
               работает ли оболочка, когда включен noexec.

     Обратите внимание, что ограничение выхода из оболочки не является панацеей.
     Программы, работающие от имени пользователя root, по-прежнему способны выполнять
     множество потенциально опасных операций (таких как изменение или перезапись файлов),
     которые могут привести к непреднамеренному повышению привилегий. В конкретном случае
     редактора более безопасный подход - дать пользователю разрешение на запуск sudoedit
     (см. Ниже)..

   Безопасное редактирование
     Плагин sudoers включает поддержку sudoedit, которая позволяет пользователям безопасно
     редактировать файлы с помощью редактора по своему выбору. Поскольку sudoedit является
     встроенной командой, она должна быть указана в файле sudoers без начального пути.
     Однако он может принимать аргументы командной строки так же, как обычная команда.
     Ожидается, что подстановочные знаки, используемые в аргументах командной строки
     sudoedit, будут именами путей, поэтому косая черта (‘/’) не будет сопоставляться с
     подстановочными знаками.

     В отличие от других команд sudo, редактор запускается с разрешениями вызывающего
     пользователя и с неизмененной средой. Дополнительную информацию можно найти в
     описании опции -e в sudo(8).

     Например, чтобы позволить оператору пользователя редактировать файл
     “message of the day” (сообщение дня):

           operator        sudoedit /etc/motd

     Затем пользователь operator запускает sudoedit следующим образом:

           $ sudoedit /etc/motd

     Редактор будет работать как пользователь operator, а не как root, на временной
     копии /etc/motd. После того, как файл будет отредактирован, /etc/motd будет обновлен
     с содержимым временной копии.

     Пользователям никогда не следует предоставлять разрешение sudoedit на редактирование
     файла, который находится в каталоге, к которому у пользователя есть права на запись,
     либо напрямую, либо с помощью подстановочного знака. Если у пользователя есть права
     на запись в каталог, можно заменить законный файл ссылкой на другой файл, что
     позволяет редактировать произвольные файлы. Чтобы предотвратить это, начиная с
     версии 1.8.16, символические ссылки не будут использоваться в доступных для записи
     каталогах, и sudoedit откажется редактировать файл, расположенный в доступном для
     записи каталоге, если опция sudoedit_checkdir не была отключена или вызывающий
     пользователь не является пользователем root. Кроме того, в версии 1.8.15 и выше,
     sudoedit откажется открывать символическую ссылку, если не включена опция
     sudoedit_follow или если команде sudoedit не предшествует тег FOLLOW в файле sudoers.

   Проверка файла с отметкой времени
     sudoers проверит принадлежность своего каталога отметок времени (по умолчанию
     /var/run/sudo/ts) и проигнорирует содержимое каталога, если он не принадлежит
     пользователю root или доступен для записи пользователем, отличным от root. Старые
     версии sudo хранят файлы меток времени в /tmp; это больше не рекомендуется, так как
     пользователь может самостоятельно создать отметку времени в системах, которые
     позволяют непривилегированным пользователям изменять владельца создаваемых файлов.

     Хотя каталог отметок времени должен очищаться во время перезагрузки, не все системы
     содержат каталог /var/run. Чтобы избежать потенциальных проблем, sudoers будет
     игнорировать файлы меток времени, которые датируются до загрузки машины в системах,
     где доступно время загрузки.

     Некоторые системы с графическим окружением рабочего стола позволяют
     непривилегированным пользователям изменять системные часы. Поскольку sudoers
     полагается на системные часы для проверки метки времени, пользователь может в таких
     системах запускать sudo дольше, чем timestamp_timeout, устанавливая часы назад. Для
     борьбы с этим sudoers использует монотонные часы (которые никогда не перемещаются
     назад) для своих отметок времени, если система поддерживает их.

     sudoers не будут соблюдать отметки времени, установленные далеко в будущем.
     Отметки времени с датой, превышающей current_time + 2 * TIMEOUT, будут
     игнорироваться, а sudoers будет регистрироваться и жаловаться.

     Поскольку файлы меток времени находятся в файловой системе, они могут пережить
     сеанс входа пользователя в систему. В результате пользователь может войти в систему,
     выполнить команду с sudo после аутентификации, выйти из системы, снова войти в систему
     и запустить sudo без аутентификации, если отметка времени записи находится в пределах
     15 минут (или любое другое значение, установленное для таймаута в файле sudoers).
     Когда опция tty_tickets включена, запись отметки времени включает в себя номер
     устройства терминала, с которым аутентифицирован пользователь. Это обеспечивает
     отличную детализацию, но записи с отметками времени все еще могут пережить сессию
     пользователя. Запись метки времени также включает в себя идентификатор сеанса
     последнего аутентифицированного процесса. Это не позволяет процессам в разных сеансах
     терминала использовать одну и ту же запись отметки времени. Это также помогает снизить
     вероятность того, что пользователь сможет запускать sudo без ввода пароля при выходе
     из системы и повторном входе на тот же терминал.

DEBUGGING
     Версии 1.8.4 и выше плагина sudoers поддерживают гибкую инфраструктуру отладки,
     которая может помочь отследить, что плагин делает внутри, если есть проблема.
     Это можно настроить в файле sudo.conf(5).

     Плагин sudoers использует тот же формат флага отладки, что и внешний интерфейс sudo:
     subsystem@@priority.

     Приоритеты, используемые sudoers, в порядке уменьшения серьезности, являются:
     crit, err, warn, notice, diag, info, trace и debug. Каждый приоритет, если он указан,
     также включает в себя все приоритеты выше его. Например, приоритет уведомления будет
     включать отладочные сообщения, зарегистрированные в уведомлении и выше.

     Следующие подсистемы используются плагином sudoers:

     alias     User_Alias, Runas_Alias, Host_Alias и Cmnd_Alias процессы

     all       соответствует каждой подсистеме

     audit     BSM и Linux код аудита

     auth      аутентификация пользователя

     defaults  Настройки файла sudoers Defaults

     env       обработка среды

     ldap      Sudoers на основе LDAP

     logging   поддержка ведения журнала

     match     сопоставление пользователей, групп, хостов и сетевых групп в файле sudoers

     netif     обработка сетевого интерфейса

     nss       обработка переключателя сетевого сервиса в sudoers

     parser    анализ файла sudoers

     perms     настройка разрешений

     plugin    Эквивалент для основного плагина.

     pty       псевдо-tty связанный код

     rbtree    RedBlack дерево внутренности

     sssd      SSSD-based sudoers

     util      вспомогательные функции
     Например:

     Debug sudo /var/log/sudo_debug match@@info,nss@@info

     Для получения дополнительной информации см. Руководство sudo.conf(5)..

SEE ALSO
     ssh(1), su(1), fnmatch(3), glob(3), mktemp(3), strftime(3), sudo.conf(5),
     sudoers.ldap(5), sudo(8), sudo_plugin(8), visudo(8)

AUTHORS
     Many people have worked on sudo over the years; this version consists of
     code written primarily by:

           Todd C. Miller

     Смотрите файл CONTRIBUTORS в дистрибутиве sudo
     (https://www.sudo.ws/contributors.html) для получения исчерпывающего
     списка людей, которые внесли свой вклад в sudo.

CAVEATS
     Файл sudoers всегда должен редактироваться командой visudo, которая блокирует
     файл и выполняет грамматическую проверку. Крайне важно, чтобы файл sudoers не
     содержал синтаксических ошибок, поскольку sudo не будет работать с синтаксически
     некорректным файлом sudoers.

     При использовании сетевых групп компьютеров (в отличие от пользователей), если
     вы сохраняете полностью определенное имя хоста в сетевой группе (как это обычно
     бывает), вам необходимо либо указать полное имя хоста машины, которое возвращает
     команда hostname, либо использовать опция fqdn в sudoers.

BUGS
     Если вы считаете, что обнаружили ошибку в sudo, отправьте отчет об ошибке по адресу
     https://bugzilla.sudo.ws/

SUPPORT
     Ограниченная бесплатная поддержка доступна через список рассылки sudo-users, см.
     https://www.sudo.ws/mailman/listinfo/sudo-users подписаться или искать в архивах.

DISCLAIMER
     sudo предоставляется “AS IS”, и любые явные или подразумеваемые гарантии, в том
     числе подразумеваемые гарантии пригодности для продажи и пригодности для
     определенных целей, не принимаются. Смотрите файл LICENSE, распространяемый вместе
     с sudo или https://www.sudo.ws/license.html для получения полной информации.

Sudo 1.8.16                    January 20, 2016                    Sudo 1.8.16
