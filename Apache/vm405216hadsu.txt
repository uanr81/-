<IfModule mod_ssl.c>
	<VirtualHost _default_:443>
		ServerAdmin webmaster@localhost

		DocumentRoot /var/www/html

		# Доступные уровни: trace8, ..., trace1, debug, info, notice, warn,
		# error, crit, alert, emerg.
		# Также возможно настроить уровень логирования для конкретных модулей, например,
		#LogLevel info ssl:warn

		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

		# Для большинства файлов конфигурации из conf-available /, которые включены или
		#отключены на глобальном уровне, можно включить строку только для одного
		#конкретного виртуального хоста. Например, следующая строка включает конфигурацию
		#CGI для этого хоста только после того, как он был глобально отключен с
		#помощью"a2disconf".
		#Include conf-available/serve-cgi-bin.conf

		#   SSL Выключатель двигателя:
		#   Enable/Disable SSL для этого виртуального хоста.
		SSLEngine on

		#   Самозаверяющий (snakeoil) сертификат можно создать, установив пакет ssl-cert. See
		#   /usr/share/doc/apache2/README.Debian.gz для получения дополнительной информации.
		#Если и ключ, и сертификат хранятся в одном файле, необходима только директива SSLCertificateFile.
		SSLCertificateFile	/etc/ssl/certs/ssl-cert-snakeoil.pem
		SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

		#   Цепочка сертификатов сервера:
		#   Укажите SSLCertificateChainFile на файл, содержащий объединение сертификатов CA
		#в кодировке PEM, которые образуют цепочку сертификатов для сертификата сервера. В
		#качестве альтернативы указанный файл может быть тем же самым, что и SSLCertificateFile,
		#когда сертификаты CA непосредственно добавляются к сертификату сервера для удобства.
		#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

		#   Certificate Authority (CA):
		#   Задайте путь проверки сертификата CA, где найти сертификаты CA для
		#аутентификации клиента или, в качестве альтернативы, один огромный файл,
		#содержащий их все (файл должен быть в кодировке PEM). Примечание. Используйте
		#предоставленный Makefile для обновления символьных ссылок хеша после изменений.
		#SSLCACertificatePath /etc/ssl/certs/
		#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

		#   Certificate Revocation Lists (CRL):
		#   Установите путь отзыва CA, где найти CA CRL для проверки подлинности
		#клиента или, в качестве альтернативы, один огромный файл, содержащий все
		#их (файл должен быть в кодировке PEM). Примечание. Используйте предоставленный
		#Makefile для обновления символьных ссылок хеша после изменений.
		#SSLCARevocationPath /etc/apache2/ssl.crl/
		#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

		#   Client Authentication (Type):
		#   Тип и глубина проверки сертификата клиента.  Это типы
		#   none, optional, require and optional_no_ca.  Глубина - это число, которое
		#указывает, насколько глубоко нужно проверить цепочку издателя сертификата,
		#прежде чем решить, что сертификат недействителен.
		#SSLVerifyClient require
		#SSLVerifyDepth  10

		#   SSL Engine Options:
		#   Установите различные параметры для механизма SSL.
		#   o FakeBasicAuth:
		#	 Переведите клиент X.509 в Basic Authorisation. Это означает, что стандартные
		#	 методы Auth/DBMAuth могут использоваться для контроля доступа. Имя пользователя - это
		#	 версия `one line' сертификата клиента X.509. Обратите внимание, что пароль не получен
		#	 от пользователя. Каждой записи в файле пользователя нужен этот пароль: `xxj31ZMTZzkVA'.
		#   o ExportCertData:
		#	 Это экспортирует две дополнительные переменные окружения: SSL_CLIENT_CERT и
		#	 SSL_SERVER_CERT. Они содержат PEM-кодированные сертификаты сервера
		#	 (всегда существующего) и клиента (существующего только при использовании
		#	 аутентификации клиента). Это можно использовать для импорта сертификатов в сценарии CGI.
		#   o StdEnvVars:
		#	 Это экспортирует стандартные переменные окружения `SSL_*', связанные с SSL/TLS.
		#	 По умолчанию этот экспорт отключен по соображениям производительности, поскольку
		#	 этап извлечения является дорогостоящей операцией и обычно бесполезен для
		#	 обслуживания статического содержимого. Поэтому обычно разрешается экспорт только
		#	 для запросов CGI и SSI.
		#   o OptRenegotiate:
		#	 Это позволяет оптимизировать обработку пересмотра SSL-соединений,
		#	 когда директивы SSL используются в контексте каждого каталога.
		#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
		<FilesMatch "\.(cgi|shtml|phtml|php)$">
				SSLOptions +StdEnvVars
		</FilesMatch>
		<Directory /usr/lib/cgi-bin>
				SSLOptions +StdEnvVars
		</Directory>

		#   SSL Настройки протокола:
		#   Безопасный и стандартный, но все еще совместимый со стандартом
		#SSL/TLS подход к закрытию состоит в том, что mod_ssl отправляет
		#оповещение о закрытии, но не ожидает оповещения о закрытии от клиента.
		#Когда вам нужен другой подход к отключению, вы можете использовать одну из следующих переменных:
		#   o ssl-unclean-shutdown:
		#	 Это вызывает нечистое завершение работы при закрытии соединения,
		#	 то есть оповещение о закрытии SSL не отправляется или не разрешено
		#	 к получению. Это нарушает стандарт SSL/TLS, но необходимо для
		#	 некоторых браузеров с мертвой головой. Используйте это, когда вы
		#	 получаете ошибки I/O из-за стандартного подхода, при котором
		#	 mod_ssl отправляет предупреждение о закрытии.
		#   o ssl-accurate-shutdown:
		#	 Это приводит к точному отключению при закрытии соединения, то есть
		#	 отправляется оповещение о закрытии уведомления SSL, а mod_ssl
		#	 ожидает оповещения о закрытии уведомления клиента. Это
		#	 соответствует стандарту 100% SSL/TLS, но на практике часто
		#	 приводит к зависанию соединений с браузерами с мертвыми мозгами.
		#	 Используйте это только для браузеров, где вы знаете, что их
		#	 реализация SSL работает правильно.
		#   Примечание. Большинство проблем неработающих клиентов также связано со
		#   средством поддержания активности HTTP, поэтому обычно для этих клиентов
		#   обычно требуется отключить keep-alive. Для этого используйте переменную
		#   "nokeepalive". Точно так же нужно заставить некоторых клиентов использовать
		#   HTTP / 1.0, чтобы обойти свою некорректную реализацию HTTP / 1.1. Для
		#   этого используйте переменные "downgrade-1.0" и "force-response-1.0".
		# BrowserMatch "MSIE [2-6]" \
		#		nokeepalive ssl-unclean-shutdown \
		#		downgrade-1.0 force-response-1.0

	</VirtualHost>
</IfModule>
