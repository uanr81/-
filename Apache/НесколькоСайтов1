Apache2. Виртуальные хосты (несколько сайтов на одном IP)
7-9 минут

Обновлено: 10.01.2017 - 04:29

Установка нескольких сайтов на веб-сервер Apache2, редирект с IP-адреса сервера на домен чтобы посетитель не зашел в корневой каталог сервера, редирект с www на "без www", доступ Apache к директории с правами 755 и закрытие доступа к PHPmyadmin.

При загрузке, Apache может выдать такое предупреждение:
[....] Stopping web server: apache2apache2: apr_sockaddr_info_get() failed for debian
apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName
[ ok waiting .
root@debian:/# /etc/init.d/apache2 start
[....] Starting web server: apache2apache2: apr_sockaddr_info_get() failed for debian
apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName
. ok

Сайт работать будет, но лучше исправить ошибку чтобы не мешало.
Это значит что Apache не знает свое серверное имя, укажем его командой
echo ServerName localhost | sudo tee -a /etc/apache2/conf.d/vhosts.conf или
echo ServerName localhost | sudo tee -a /etc/apache2/apache2.conf
Настраиваем виртуальные узлы (сайты)

nano /etc/apache2/sites-available/

<VirtualHost *:80>

 ServerName  
 ServerAlias www. 

 DocumentRoot "/var/www/ "

 <Directory "/var/www/libreimg">
   Options Indexes FollowSymLinks MultiViews
                AllowOverride All
                Order allow,deny
                allow from all

 </Directory>

</VirtualHost>


nano /etc/apache2/sites-available/libreportal.net/images

<VirtualHost *:80>

 ServerName libreportal.net/images
 ServerAlias www.libreportal.net/images

 DocumentRoot "/var/www/libreportal.net/images"

 <Directory "/var/www/libreportal.net/images">
   Options Indexes FollowSymLinks MultiViews
                AllowOverride None
                Order allow,deny
                allow from all

 </Directory>

</VirtualHost>


Теперь создадим папки сайтов:
mkdir /var/www/
mkdir /var/www/libreportal.net/images

Файлы из папки /etc/apache2/sites-available нужно скопировать в /etc/apache2/sites-enabled или поставить ссылки. Это можно сделать программкой a2ensite:
a2ensite
a2ensite libreportal.net/images
и перезапустить Apache:
/etc/init.d/apache2 restart
Настраиваем mod_rewrite

Без этого модуля не работает ни один динамический сайт

cd /etc/apache2/mods-enabled
ln -s ../mods-available/rewrite.load rewrite.load

Изменяем настройки виртуальных хостов:
Directory /var/www/>
Options Indexes FollowSymLinks MultiViews
AllowOverride All Меняем None на All
Order allow,deny
allow from all Меняем None на All

a2enmod rewrite
Перезапускаем Apache2:
apache2ctl restart
или
/etc/init.d/apache2 restart
Редирект с IP-адреса сервера на домен

В файле /etc/apache2/sites-available/000-default.conf
нужно перед
добавить:
Redirect / http://site.com
и перезагрузить сервер:
service apache2 restart
Но есть два нюанса:

1. Если вы запускаете Apache в chroot, нужно примонтировать proc и sysfs, игаче при заходе на сайт, apache перейдёт не на /var/ww/site.com а на /var/www
mount /proc chroot/proc -t proc
mount /sys chroot/sys -t sysfs
Иначе Apache не сможет нормально перезагружаться, будет ошибка [FAIL] Restarting web server: apache2 failed.
Редирект с www.site.com на site.com
nano /var/www/site.ru/.htaccess

RewriteEngine On
#RewriteBase /

RewriteCond %{HTTP_HOST} ^www\.libreimg\.com$ [NC]
RewriteRule ^(.*)$ http:// /$1 [R=301,L]
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [S=35]


Настройка DNS-записей
Доступ Apache к директории с правами 755
cd /var/www/
chmod -R 755 .
chown -R www-data:www-data .
Закрытие доступа к PHPmyadmin
Зайдя на /phpmyadmin любопытный посетитель увидит вход в PHPmyadmin. Зачем ему это видеть ?
Чтобы в PHPmyadmin можно было зайти по адресу сервера, в /etc/apache2/apache2.conf включен файл настроек phpmyadmin:
Include /etc/phpmyadmin/apache.conf

Откроем это файл и изменим строку Alias /phpmyadmin /usr/share/phpmyadmin на Alias /dfadafdy7qjl0dfan5aln1lanltian /usr/share/phpmyadmin
Такой адрес сложно угадать, но чтобы вообще закрыть доступ к PHPmyadmin можно поставить знак # перед Alias.
Решения некоторых проблем

Apache2

При перезапуске Apache показывает ошибку и выключается:
/etc/init.d/apache2 restart
[....] Restarting web server: apache2httpd (pid 21825) already running
. ok

Если повторно ввести команду /etc/init.d/apache2 restart, apache2 выводит сообщение о успешном перезапуске и работает.
[ ok ] Restarting web server: apache2.

В /var/log/apache2/error.log написано:
[Sat Apr 19 18:14:19 2014] [notice] caught SIGTERM, shutting down
[Sat Apr 19 18:14:22 2014] [notice] Apache/2.2.22 (Debian) configured -- resuming normal operations

Если вы работаете в chroot, нужно добавить в chroot файлы /etc/fstab и /etc/mtab:
/etc/mtab:

rootfs / rootfs rw 0 0
sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
udev /dev devtmpfs rw,relatime,size=10240k,nr_inodes=62128,mode=755 0 0
devpts /dev/pts devpts rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0
tmpfs /run tmpfs rw,nosuid,noexec,relatime,size=50896k,mode=755 0 0
/dev/disk/by-label/DOROOT / ext4 rw,relatime,errors=remount-ro,user_xattr,barrier=1,data=ordered 0 0
tmpfs /run/lock tmpfs rw,nosuid,nodev,noexec,relatime,size=5120k 0 0
tmpfs /run/shm tmpfs rw,nosuid,nodev,noexec,relatime,size=101780k 0 0
/proc /home/chroot/proc proc rw,relatime 0 0
/sys /home/chroot/sys sysfs rw,relatime 0 0
udev /home/chroot/dev devtmpfs rw,relatime,size=10240k,nr_inodes=62128,mode=755 0 0

/etc/fstab

LABEL=DOROOT / ext4 errors=remount-ro 0 1

Возможные ошибки при запуске Apache:

Invalid Mutex directory in argument file:${APACHE_LOCK_DIR}
или
AH00526: Syntax error on line 84 of /etc/apache2/apache2.conf:
Invalid command 'LockFile', perhaps misspelled or defined by a module not included in the server configuration
Решение:
source /etc/apache2/envvars
/usr/sbin/apache2 -V

Mysql

/etc/init.d/mysql restart
df: Warning: cannot read table of mounted file systems: No such file or directory

1. Измените владельца папки /var/lock/apache2 на www-data:
cd /var/lock/apache2
chown www-data -R .
2. Если работаете в chroot, добавьте /etc/fstab и /etc/mtab:
/etc/mtab:

rootfs / rootfs rw 0 0
sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
udev /dev devtmpfs rw,relatime,size=10240k,nr_inodes=62128,mode=755 0 0
devpts /dev/pts devpts rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0
tmpfs /run tmpfs rw,nosuid,noexec,relatime,size=50896k,mode=755 0 0
/dev/disk/by-label/DOROOT / ext4 rw,relatime,errors=remount-ro,user_xattr,barrier=1,data=ordered 0 0
tmpfs /run/lock tmpfs rw,nosuid,nodev,noexec,relatime,size=5120k 0 0
tmpfs /run/shm tmpfs rw,nosuid,nodev,noexec,relatime,size=101780k 0 0
/proc /home/chroot/proc proc rw,relatime 0 0
/sys /home/chroot/sys sysfs rw,relatime 0 0
udev /home/chroot/dev devtmpfs rw,relatime,size=10240k,nr_inodes=62128,mode=755 0 0

/etc/fstab

LABEL=DOROOT / ext4 errors=remount-ro 0 1

Импорт дампа большого объёма

Заходим в папку с файлом дапма и в командной строке последовательно выполняем:
mysql -p -u base_login
use bdname.sql
set names cp1251;
source bd.sql

********************************************************************
Настройка виртуальных хостов APACHE
admin
9-12 минут

Информация взята из https://www.8host.com/blog/nastrojka-virtualnyx-xostov-apache-v-ubuntu-16-04/

Apache является одним из самых популярных веб-серверов в мире.

Скрыть объявление


Компоненты и функции Apache разделены на отдельные элементы, которые можно индивидуально устанавливать и настраивать. Одним из базовых элементов, отвечающим за индивидуальные параметры сайта или домена, является виртуальный хост.

Виртуальные хосты позволяют администратору использовать один сервер для размещения нескольких сайтов (в рамках одного интерфейса или IP-адреса). Каждый домен, настроенный таким образом, будет направлять посетителя на соответствующий сайт.

    Количество виртуальных хостов на одном сервере ограничивается исключительно ресурсами этого сервера.

Данное руководство поможет настроить виртуальные хосты на выделенном сервере Linux, Debian, Ubuntu, что позволит обслуживать разный контент в зависимости от запрашиваемого домена.

Что нужно?

    Предварительно настроенный сервер.
    Не-root пользователь с расширенными привилегиями.
    Установленный веб-сервер Apache

    sudo apt-get update
    sudo apt-get install apache2

Примечание: В руководстве используются условные домены example.com и test.com; не забудьте заменить их своим доменным именем.
Создание структуры каталогов Apache

Для начала нужно создать структуру каталогов, в которой будут храниться данные сайта.

Каталог document root (каталог, содержащий контент для Apache) по умолчанию находится в /var/www; в нём нужно создать отдельный каталог для каждого виртуального хоста. В каждом таком каталоге будет размещен каталог public_html, в котором будут находиться нужные файлы. Благодаря этому хостинг становится более гибким.

Необходимые каталоги можно создать при помощи следующих команд:

    sudo mkdir -p /var/www/example.com/public_html
    sudo mkdir -p /var/www/test.com/public_html

Примечание: Не забудьте указать свои доменные имена в командах.
Настройка прав Apache

Структура каталогов готова, но все они принадлежат пользователю root. Чтобы не-рутовый пользователь мог вносить изменения в файлы веб-каталога, нужно изменить права на эти файлы при помощи следующей команды:

    sudo chown -R $USER:$USER /var/www/example.com/public_html
    sudo chown -R $USER:$USER /var/www/test.com/public_html

Переменная $USER примет имя текущего пользователя. После этого подкаталоги каталоги public_html, содержащие контент сайтов, будут принадлежать текущему пользователю.

Также нужно изменить привилегии и открыть веб-каталог и всё его содержимое для чтения, в противном случае страницы будут отображаться некорректно.

    sudo chmod -R 755 /var/www

Теперь все права установлены верно; можно приступать к созданию контента в специальных каталогах.
Создание демо-страниц для виртуальных хостов Apache

Создайте тестовый контент; для пробной настройки хостов простых страниц будет достаточно. Просто создайте страницы index.html для каждого сайта.

Начнём с example.com; откройте файл index.html в текстовом редакторе:

    nano /var/www/example.com/public_html/index.html

В этом файле создайте простой HTML-документ, который указывает, к какому сайту подключена страница. В данном случае этот файл выглядит так:

    <html>
    <head>
    <title>Welcome to Example.com!</title>
    </head>
    <body>
    <h1>Success! The example.com virtual host is working!</h1>
    </body>
    </html>

Сохраните и закройте файл.

Затем можно скопировать этот файл и использовать его как шаблон для второго сайта:

    cp /var/www/example.com/public_html/index.html /var/www/test.com/public_html/index.html

Откройте скопированный файл

    nano /var/www/test.com/public_html/index.html

и внесите соответствующие коррективы:

    <html>
    <head>
    <title>Welcome to Test.com!</title>
    </head>
    <body> <h1>Success! The test.com virtual host is working!</h1>
    </body>
    </html>

Сохраните и закройте файл. Теперь тестовые страницы готовы.
Создание файлов виртуальных хостов Apache

Файлы виртуальных хостов задают настройки отдельных сайтов и помогают Apache корректно отвечать на запросы.

Apache поставляется со стандартным файлом хоста по имени 000-default.conf, который можно использовать в качестве шаблона. Скопируйте его, чтобы создать виртуальный хост для каждого доменного имени.

Примечание: По умолчанию настройки Ubuntu требуют, чтобы файлы виртуальных хостов заканчивались на .conf.

Для начала скопируйте файл для первого домена:

    sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf

Откройте файл в текстовом редакторе с привилегиями root:

    sudo nano /etc/apache2/sites-available/example.com.conf

С опущенными комментариями файл будет выглядеть примерно так:

    <VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    </VirtualHost>

Как видите, файл не такой уж объёмный. Теперь нужно внести данные о первом домене и добавить несколько директив. Этот виртуальный хост будет отвечать на запросы, отправляемые на стандартный HTTP-порт 80.

Сначала нужно изменить директиву ServerAdmin, указав электронный адрес администратора сайта.

    ServerAdmin admin@example.com

После этого нужно добавить две директивы. Первая – ServerName, которая определяет базовый домен, для которого предназначен хост. Вторая – ServerAlias, которая определяет псевдонимы домена (например, домен с префиксом www):

    ServerName example.com
    ServerAlias www.example.com

Осталось внести в файл хоста последнее изменение – указать нахождение(расположение) document root этого домена. Укажите в DocumentRoot ранее созданный каталог:

    DocumentRoot /var/www/example.com/public_html

В результате файл хоста выглядит так:

    <VirtualHost *:80>
    ServerAdmin admin@example.com
    ServerName example.com
    ServerAlias www.example.com
    DocumentRoot /var/www/example.com/public_html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    </VirtualHost>

Сохраните и закройте файл.

Скопируйте только что созданный файл и используйте его как шаблон для виртуального хоста второго сайта, отредактировав соответствующие данные.

    sudo cp /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-available/test.com.conf

Откройте новый файл с привилегиями root в текстовом редакторе:

    sudo nano /etc/apache2/sites-available/test.com.conf

Теперь осталось отредактировать соответствующие данные, чтобы файл мог обслуживать второй домен. В результате второй файл виртуального хоста имеет такой вид:

    <VirtualHost *:80>
    ServerAdmin admin@test.com
    ServerName test.com
    ServerAlias www.test.com
    DocumentRoot /var/www/test.com/public_html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    </VirtualHost>

Сохраните и закройте файл.
Включение виртуальных хостов Apache

Создав файлы виртуальных хостов, нужно включить их. Apache предоставляет для этого специальные инструменты.

К примеру, для этого можно использовать a2ensite:

    sudo a2ensite example.com.conf
    sudo a2ensite test.com.conf

Затем отключите стандартный виртуальный хост 000-default.conf:

    sudo a2dissite 000-default.conf

Перезапустите Apache, чтобы активировать изменения:

    sudo systemctl restart apache2

Обратите внимание: система Ubuntu использует systemctl.

Также можно использовать команду:

    sudo service apache2 restart

Эта команда ещё поддерживается, однако она может вернуть нестандартный результат.
Настройка локальных хостов Apache (опционально)

Если у вас нет доменного имени, и вместо настоящего вы использовали условный домен, вы можете протестировать настройки, временно отредактировав файл hosts на локальном компьютере. он будет перехватывать запросы на настроенные ранее домены и направлять их на VPS (то есть, выполнять работу DNS). Но этот метод работает только на локальной машине и подходит только для тестирования.

Примечание: Убедитесь, что вы перешли на локальную машину. Для выполнения данного раздела нужны учётные данные администратора.

В системах Mac или Linux отредактируйте файл hosts с привилегиями администратора.

    sudo nano /etc/hosts

Примечание: Пользователи Windows могут найти необходимые инструкции по этой ссылке.

В этом файле нужно указать IP-адрес сервера, а затем доменное имя, которое будет использоваться для доступа к серверу.

К примеру, если IP-адрес сервера — 111.111.111.111, в конец файла хоста нужно внести следующие строки

    127.0.0.1 localhost
    127.0.1.1 guest-desktop
    111.111.111.111 example.com
    111.111.111.111 test.com

Теперь все запросы к example.com и test.com будут отправлены на локальный компьютер, а оттуда — на IP-адрес сервера.

Сохраните и закройте файл.
Результаты работы

Чтобы протестировать настройку виртуальных хостов, просто откройте домены в веб-браузере:

    http://example.com

В данном случае на экране появится сообщение:

    Success! The example.com virtual host is working!

Примечание: Результат, появившийся на экране, зависит от содержания файла, созданного в разделе 3.

Точно так же нужно проверить и второй сайт:

    http://test.com

На экране появится следующий результат:

    Success! The test.com virtual host is working!

Если оба сайта работают, значит, виртуальные хосты успешно настроены. Если файл hosts на локальном компьютере был изменён, после тестирования удалите внесённые в него строки, чтобы не засорять файл ненужными записями.
Заключение

Теперь сервер Linux поддерживает два сайта на отдельных доменах. В целом, количество хостов, которое может поддерживать Apache, зависит только от ресурсов виртуального выделенного сервера. Чтобы добавить на сервер новый виртуальный хост, просто повторите весь вышеописанный процесс.