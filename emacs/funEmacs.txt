** Перемещение курсора и получение позиции
*** point текущее значение указателя числа символов от начала буфера, начиная с *единицы*
*** point-min минимально возможное значение указателя числа символов от начала буфера, начиная
 с *единицы*.
*** point-max максимально возможное значение указателя числа символов от начала буфера, начиная
 с *единицы*
*** forward-char перемещает курсор на один символ вправо.
*** forward-word перемещает курсор на одно слово вправо.
*** forward-line перемещает курсор на одну строку вниз.
*** backward-char перемещает курсор на один символ влево.
*** backward-word перемещает курсор на одно слово влево.
*** backward-line перемещает курсор на одну строку вверх.
Пример:
(forwar-word)
(backward-char)
*** goto-char Перемещает курсор на заданную позицию. Формат вызова: (goto-char POSITION)
Здесь POSITION -- номер символа или маркер. 
Пример:
(goto-char 1)                 ; Переместить в начало буфера
(goto-char (point-max))  ; Переместить в конец буфера
*** line-number-at-pos Вернет номер строки, на которой стоит курсор. Формат вызова:
(line-number-at-pos &optional POS)
Необязательный параметр POS - номер символа в буфере, для которого необходимо найти номер строки.
Пример:
(line-number-at-pos)                  ; Вернет номер текущей строки
(line-number-at-pos (point-min)) ; Вернет 1
*** current-column Вернет номер символа в строке, на котором стоит курсор. Начинаются с *нуля*. 
Пример:
(current-column) ; 16
*** beginning-of-line перемещает курсор на начало строки;
*** end-of-line перемещает курсор на конец строки;
*** beginning-of-buffer перемещает курсор в начало буфера;
*** end-of-buffer перемещает курсор в конец буфера;
** Регион/Выделение текста
*** region-active-p Возвращает true если включен режим показа выделения (transient mark) и текст 
выделен.
Пример:
(if (region-active-p) 
    (message "Текст выделен")  
(message "Текст не выделен"))
 *** region-beginning возвращает номер символа, на котом начинается выделение.
 *** region-end возвращает номер символа окончания выделения.
Пример:
(region-beginning)
(region-end)
*** kill-region Вырезает часть текста между указанными номерами символов. Формат вызова:
(kill-region BEG END)
Пример:
; Удалит выделенный фрагмент текста
(kill-region (region-beginning) (region-end)) 
*** kill-ring-save Данная функция аналогична kill-region за исключением того, что не вырезает, а только
копирует текст.
** Группа функций search
*** search-forward функция ищет указанный текст вправо от курсора
*** search-backward функция ищет указанный текст влево от курсора
*** search-forward-regexp функция ищет указанное регулярное выражение вправо от курсора
*** search-backward-regexp функция ищет указанное регулярное выражение вправо от курсора. Формат
 вызова: (search-forward STRING &optional BOUND NOERROR COUNT)
=STRING= -- текст для поиска.
Остальные параметры -- необязательные:
=BOUND= -- ограничитель поиска (номер символа в буфере, после которого поиск производиться не будет)
Если параметр равен =nil= (по умолчанию), то поиск производится до конца буфера.
=NOERROR= -- если =t=, то в случае безуспешного поиска функция просто вернет =nil=. Иначе -- установит 
курсор на последний просмотренный символ и вернет =nil.=
=COUNT= -- количество повторений поиска при успехе.
Функции =search-backward=, =search-forward-regexp=, =search-backward-regexp= имеют идентичный формат
 вызова. Чуствительность к регистру при поиске определяется глобальной переменной =case-fold-search=
Пример:
(search-forward "My search text")
(setq case-fold-search nil) ;; TODO: лучше не менять его во всем мире!
(search-backward "MY SEARCH TEXT")
** Работа с буфером
*** buffer-name Возвращает имя буфера в виде строки. Формат вызова (buffer-name &optional BUFFER)
Если вызвана без параметров, то вернет имя активного буфера.  Если в функцию передан буфер, то 
вернет имя указанного буфера.
Пример:
(buffer-name) ;; Вернет "funEmacs.txt"
*** buffer-list Вернет список всех буферов. Внимание: в списке будут объекты-буфера, а не их текстовые
названия. Для получения имени такого буфера воспользуйтесь функцией =buffer-name=. Формат вызова:
(buffer-list &optional FRAME)
Вызванная без параметров, вернет список буферов активного фрейма. Если передать в функцию объект
фрейма, то вернет список буферов для этого фрейма.
Пример:
(buffer-list); Вернет (#<buffer funEmacs.txt> #<buffer EmacsGuide.muse> #<buffer emacs> #<buffer shkola> и т.д.
*** with-current-buffer Выполняет указанные действия в заданным буфере. Возвращает значение, которое
вернет последняя вызванная в теле функция. Формат вызова:
(with-current-buffer BUFFER-OR-NAME &rest BODY)
 - =BUFFER-OR-NAME= -- объект буфера или его имя.
 - =BODY= -- вызовы функций, которые нужно выполнить в заданном буфере.
Пример:
(with-current-buffer "*scratch*"
  (insert "Hello!"))
*** switch-to-buffer Переключает окно на указанный буфер и возвращает объект этого буфера. Формат
 вызова: (switch-to-buffer BUFFER-OR-NAME &optional NORECORD FORCE-SAME-WINDOW)
- =BUFFER-OR-NAME= -- буфер, его название или nil. Если передан буфер или его название, то переключает
на указанный буфер. Если nil -- то переключает на буфер, который укажет функций.
Необязательные параметры.
- =NORECORD= -- если не nil, то эта функция не будет помещать указаннй буфер в начало списка буферов
и не сделает окно, отображающее буфер, последним выбранным.
- =FORCE-SAME-WINDOW= -- если nil, то выбранный буфер может быть отображен в любом окне. Иначе -- 
отобразить в активном окне или выдать ошибку.
Пример: (switch-to-buffer "*scratch*")
*** current-word Вернет слово или символ в виде строки, на котором находится курсор. Формат вызова:
(current-word &optional STRICT REALLY-WORD)
Необязательные параметры:
- =STRICT= если не-=nil=, то функция вернет =nil= только если курсор не на (или рядом) слове или символе.
- =REALLY-WORD= если не =nil=, то просто находит слово. (обычно функция ищет символ).
Пример: (setq my-word (current-word))
*** insert Вставит указанную строку или набор символов в буфер на позиции курсора. Формат вызова:
(insert &rest ARGS)
- =ARGS= -- набор строк или символов.
Пример: (insert "Hello, World!")
*** count-lines Посчитает количество строк между указанными номерами символов. Формат вызова:
(count-lines START END)
=START= и =END= -- номера символов в буфере, между которыми необходимо посчитать количество строк.
Пример: (count-lines 5 17)
*** find-file Откроет буфер с указанным файлом. Если такого буфера еще нет, то создаст его, загрузит  
файл и сделает буфер активным. Формат вызова: (find-file FILENAME &optional WILDCARDS)
- =FILENAME= -- путь к файлу.
Необязательный параметр:
- =WILDCARDS= -- если не nil и содержит шаблон имени файла, то по указанному пути откроет все файлы, 
подходящие под заданный шаблон.
Пример: (find-file "~/text.txt")
*** delete-and-extract-region Удалить текст между указанными символами и вернуть его. Формат вызова:
(delete-and-extract-region START END) Удалит текст между символами с номерами =START= и =END= и вернет
 этот текст. Пример: (delete-and-extract-region 10 17)
** Прочее
*** save-excursion Cначала сохраняет данные о текущей точке, метке и текущем буфере, затем 
выполняет выражения заданные в BODY, и после завершения работы, восстанавливает значения 
сохраненных переменных.  Эту функцию рекомендуется применять когда вы изменяете текущую 
позицию в буфере, или переключаетесь в другой буфер, и т.д. Формат вызова: =(save-excursion BODY)=
Пример:  (beginning-of-line))
** Группа функций completing-read/ido-completing-read
Предлагают пользователю ввести текст при помощи автодополнения. Формат вызова обеих функций 
одинаковый.
- =completing-read= -- функция входит в стандартную поставку Emacs.
- =ido-completing-read= -- функция доступна в пакете IDO.
Формат вызова:
(completing-read PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)
- =PROMPT= -- строка приглашения, которая будет показана пользователю;
- =COLLECTION= -- список строк для автодополнения.
Необязательные параметры:
- =PREDICATE= -- функция-предикат, которая отфильтрует, какие элементы =COLLECTION= показывать при 
автодополнении. В =ido-completing-read= этот параметр игнорируется и присутствует только для 
совместимости с =completing-read=
- =REQUIRE-MATCH= может принимать одно из следующих значений:
- =t= -- означает, что функция не завершится до тех пор, пока пользователь не введет текст, 
совпадающий с одним из элементов коллекции, или пустую строку.
- =nil= -- означает, что пользователь может ввести любой текст, как совпадающий, так и не совпадающий
с предложенными вариантыми из COLLECTION.
- =confirm-after-completion= -- значит, что можно ввести любой текст, даже не совпадающий с 
предложенными вариантами, но пользователь должен будет подтвердить свой ввод.
- что угодно, кроме t, ведет себя также, как с параметром t, только не разрешает вводить пустую строку.
- =INITIAL-INPUT= -- устаревшая опция, не рекомендуется для использования. Если передана строка, то эта 
строка будет значением по умолчанию.
- =HIST= -- список с "историей" введенных значений.
- =DEF= -- значение по умолчанию.
Пример:
(completing-read ">>" '("111" "122" "133"))


