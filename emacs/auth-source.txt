2 Help for users
****************

“Netrc” файлы являются стандартом де-факто. Они выглядят так:
     machine MYMACHINE login MYLOGINNAME password MYPASSWORD port MYPORT

   'machine' является сервером (либо имя DNS, либо адрес IP).
Он известен как :HOST в запросах ‘auth-source-search’.
Вы также можете использовать ‘host’.

   'port' является портом подключения или протоколом.  Он известен как
   :PORT в запросах ‘auth-source-search’.

   'user' - это имя пользователя.  Он известен как :USER в запросах
   ‘auth-source-search’.  Вы также можете использовать ‘login’ и ‘account’.

   Пробелы всегда являются OK, поскольку это касается auth-source
   (но другим программам они могут не нравиться). Просто
   поместите данные в кавычки, избегая кавычек, как
   и следовало ожидать с помощью '\'.

   Все это необязательно.  Вы могли бы просто сказать (но мы не
   рекомендуем это, мы просто показываем, что это возможно)

     password MYPASSWORD

   везде использовать один и тот же пароль. Опять же,
   _НЕ ДЕЛАЙТЕ ЭТОГО_, или вы будете избиты, как говорят дети.

   Файлы “Netrc” обычно называются ‘.authinfo’ или ‘.netrc’; в
   настоящее время ‘.authinfo’ кажется более популярным, и
   библиотека auth-source поощряет эту путаницу,
   принимая оба, как вы увидите позже.

   Если у вас возникли проблемы с поиском, установите для
   ‘auth-source-debug’ значение ‘'trivia’ и посмотрите,
   какой хост, порт и пользователь проверяет библиотека
   в буфере ‘*Messages*’. То же самое касается любых
   других проблем. Ваш первый шаг - всегда видеть,
   что проверяется. Второй шаг, конечно, это написать
   в блоге запись и дождаться ответа в комментариях.

   Вы можете настроить переменную ‘auth-sources’.
   Следующее может потребоваться, если вы используете
   старую версию Emacs или если библиотека
   auth-source не загружена по какой-либо другой причине.

     (require 'auth-source)             ;; probably not necessary
     (customize-variable 'auth-sources) ;; optional, do it once

 -- Variable: auth-sources

     Переменная ‘auth-sources’ сообщает библиотеке auth-source,
     где находятся ваши файлы netrc или элементы коллекции
     Secret Service API для определенного хоста и протокола.
     В то время как вы можете придумать, по умолчанию и с
     амая простая конфигурация:

          ;;; по умолчанию: требуется :host and :port, больше не нужен
          (setq auth-sources '((:source "~/.authinfo.gpg" :host t :port t)))
          ;;; в основном эквивалент (см. ниже о запасных вариантах), но короче:
          (setq auth-sources '((:source "~/.authinfo.gpg")))
          ;;; еще короче и _default_:
          (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
          ;;; использовать коллекцию LOGIN для Secrets API
          ;;; (*note Secret Service API::)
          (setq auth-sources '("secrets:Login"))

     Добавляя несколько записей в ‘auth-sources’ с определенным
     хостом или протоколом, вы можете иметь определенные файлы
     netrc для этого хоста или протокола. Обычно это не нужно,
     но может иметь смысл, если у вас есть общие файлы netrc
     или какие-то другие необычные настройки (90% пользователей
     Emacs имеют необычные настройки, а оставшиеся 10%
     _really_ необычные).

     Вот смешанный пример с использованием двух источников:

          (setq auth-sources '((:source (:secrets default)
                                :host "myserver" :user "joe")
                               "~/.authinfo.gpg"))

   Если вы не настроите ‘auth-sources’, вам придется
   жить по умолчанию: незашифрованный файл netrc ‘~/.authinfo’
   будет использоваться для любого хоста и любого порта.

   Если это не удается, любой хост и любой порт ищутся в
   файле netrc ‘~/.authinfo.gpg’, который является
   зашифрованным файлом GnuPG. (*note GnuPG and EasyPG Assistant Configuration::).

   Наконец, незашифрованный файл netrc ‘~/.netrc’ будет
   использоваться для любого хоста и любого порта.

   Типичный пример строки netrc без порта.

     machine YOURMACHINE login YOU password YOURPASSWORD

   Это будет соответствовать любому порту аутентификации.
   Просто, правда? Но что, если на порту 433 этого
   компьютера есть SMTP-сервер, которому нужен пароль,
   отличный от IMAP-сервера?

     machine YOURMACHINE login YOU password SMTPPASSWORD port 433
     machine YOURMACHINE login YOU password GENERALPASSWORD

   Для аутентификации url-auth (HTTP / HTTPS) вам нужно
   поместить это в ваш файл netrc:

     machine yourmachine.com:80 port http login testuser password testpass

   Это будет соответствовать любой области и методу аутентификации
   (базовый или дайджест) по HTTP. HTTPS настроен аналогично.
   Если вы хотите более точные элементы управления,
   изучите исходный код и переменные url-auth.

   Для аутентификации Tramp используйте:

     machine yourmachine.com port scp login testuser password testpass

   Обратите внимание, что порт обозначает метод соединения Tramp.
   Когда вы не используете запись порта, вы подходите к любому
   методу Tramp, как объяснялось ранее. Так как Tramp имеет
   около 88 способов подключения, это может быть необходимо,
   если у вас необычная (см. Ранее комментарий к ним) настройка.

