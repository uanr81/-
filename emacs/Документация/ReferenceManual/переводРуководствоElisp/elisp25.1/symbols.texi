@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2016 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Symbols
@chapter Symbols
@cindex symbol

  @dfn{symbol} это объект с уникальным именем. Эта глава
описывает символы, их компоненты, их списки свойств и как они
создаются и интернированы. В отдельных главах описывается использование символов
как переменных и ка имена функций; смотри @ref{Variables}, и
@ref{Functions}.  Для точного синтаксиса чтения символов см.
@ref{Symbol Type}.

  Вы можете проверить, является ли произвольный объект Lisp символом с
помощью @code{symbolp}:

@defun symbolp object
Эта функция возвращает @code{t} если @var{object} это символ, @code{nil}
в противном случае.
@end defun

@menu
* Symbol Components::        Символы имеют имена, значения, определения функций
                               и списки свойств.
* Definitions::              В определении говорится, как будет использоваться символ.
* Creating Symbols::         Как символы сохраняются уникальными.
* Symbol Properties::        Каждый символ имеет список свойств
                               для записи различной информации.
@end menu

@node Symbol Components
@section Symbol Components
@cindex symbol components

  Каждый символ имеет четыре компонента (или ``ячейки''), каждая, из которых
ссылается на другой объект:

@table @asis
@item Print name
@cindex Ячейка печатное имя
Имя символа.

@item Value
@cindex Ячейка значение
Текущее значение символа как переменной.

@item Function
@cindex Ячейка функция
Определение функции символа. Он также может содержать символ,
раскладку или клавиатурный макрос.

@item Property list
@cindex Ячейка список свойств
Список свойств символа.
@end table

@noindent
Ячейка имени печати всегда содержит строку и не может быть изменено.
Каждая из трех осталтных ячеек может быть установлена ​​на любой объект Lisp.

  Ячейка имени печати содержит строку, которая является именем символа.
Поскольку символы представлены текстовыми именами, не возможно
иметь два символа с одинаковым именем. Интерпретатор Лиспа
обеспечивает это: каждый раз, когда он читает символ, он ищет существующий
символ с указанным именем перед созданием нового. Чтобы получить
имя символа, используйте функцию @code{symbol-name} (@pxref{Creating
Symbols}).

  Ячейка значения содержит значение символа в качестве переменной, которое
вы получаете, если символ оценивается как выражение Lisp.
@xref{Variables}, для получения подробной информации о том, как значения устанавливаются 
и извлекаются, включая такие осложнения, как @dfn{local bindings} и @dfn{scoping
rules}.  Большинство символов могут иметь любой объект Lisp в качестве значения, но 
определенные специальные символы имеют значения, которые нельзя изменить; к ним 
относятся @code{nil} и @code{t}, и любой символ, имя которого начинается с
@samp{:} (они называются @dfn{keywords}).  @xref{Constant
Variables}.

  Функциональная ячейка содержит определение функции символа. Часто мы
ссылаемся на ``функцию @code{foo}'' когда мы действительно имеем в виду функцию
хранящуюся в функциональной ячейке @code{foo}; мы делаем различие
только в случае необходимости. Как правило, функциональная ячейка используется для
удерживания функции (@pxref{Functions}) или макроса (@pxref{Macros}).
Однако она также может использоваться для хранения символа (@pxref{Function
Indirection}), клавиатурного макроса (@pxref{Keyboard Macros}), раскладки
(@pxref{Keymaps}), или объекта автозагрузки (@pxref{Autoloading}).  Для получения
содержимого ячейки функции символа, используйте функцию
@code{symbol-function} (@pxref{Function Cells}).

  Обычно ячейка списка свойств должна содержать правильно отформатированный
список свойств. Чтобы получить список свойств символа, используйте функцию
@code{symbol-plist}.  @xref{Symbol Properties}.

  Функциональная ячейка или ячейка значения могут быть @dfn {void}, что означает
что ячейка не ссылается ни на какой объект. (Это не то же самое
как символ @code{void}, ни то же самое, что удерживать
символ @code{nil}.)  Изучение ячейки функции или значения, которая является 
недействительной приводит к ошибке, например @samp{Symbol's value as variable is void}.

  Поскольку каждый символ имеет отдельные ячейки значений и функций, переменные
имена и имена функций не конфликтуют. Например, символ
@code{buffer-file-name} имеет значение (имя файла, являющегося
посещенным в текущем буфере), а также определение функции 
(примитивная функция, которая возвращает имя файла):

@example
buffer-file-name
     @result{} "/gnu/elisp/symbols.texi"
(symbol-function 'buffer-file-name)
     @result{} #<subr buffer-file-name>
@end example

@node Definitions
@section Defining Symbols
@cindex definitions of symbols

  @dfn{definition} Это особый вид выражения Лиспа, который
объявляет о намерении использовать символ определенным образом. Это
обычно указывает значение или значение для символа для одного вида
использования, а также документацию по его значению при использовании таким образом. 
Таким образом, когда вы определяете символ как переменную, вы можете указать 
начальное значение для переменной, плюс документацию для переменной.

  @code{defvar} и @code{defconst} являются особыми формами, которые определяют
символ как @dfn{global variable}---переменную, к которой можно получить доступ
любая точка в программе Lisp.  @xref{Variables}, для получения дополнительной информации
о переменных. Чтобы определить настраиваемую переменную, используйте
@code{defcustom} макрос, который также вызывает @code{defvar} как подпрограмма
(@pxref{Customization}).

  В принципе, вы можете присвоить значение переменной любому символу с помощью
@code{setq}, если она не была сначала определена как переменная.
Тем не менее, вы должны написать определение переменной для каждой глобальной
переменной, которую вы хотите использовать; В противном случае ваша программа Lisp может не
действовать правильно, если оценивается с включенной лексической видимостью
(@pxref{Variable Scoping}).

  @code{defun} определяет символ как функцию, создавая лямбда
выражение и сохранения его в ячейке функции символа. 
Таким образом, лямбда-выражение становится определением функции символа.
(Термин ``определение функции '', означает содержание ячейки функции,
и вытекает из идеи, что @code{defun} дает символ
определения как функцию.)  @code{defsubst} и @code{defalias} два
других способа определения функции.  @xref{Functions}.

  @code{defmacro} определяет символ как макрос. Он создает 
объект макроса и сохраняет его в ячейке функции символа. Заметим, что
данный символ может быть макросом или функцией, но не обоими сразу, потому что
оба и макрос и определения функций хранятся в функциональной ячейке, и
эта ячейка может удерживать только один объект Lisp в любой момент времени.
@xref{Macros}.

  Как отмечалось ранее, Emacs Lisp позволяет определить один и тот же символ
как переменная (e.g., with @code{defvar}) и как функцию или
макрос (e.g., with @code{defun}).  Такие определения не конфликтуют.

  Это определение также выступает в качестве руководства для инструментов программирования. 
Например, @kbd{C-h f} и @kbd{C-h v} команды создают вспомогательные буферы
содержащие ссылки на соответствующую переменную, определение функции или макроса.
 @xref{Name Help,,, emacs, The GNU Emacs Manual}.

@node Creating Symbols
@section Creating and Interning Symbols
@cindex reading symbols

  Чтобы понять, как создаются символы в GNU Emacs Lisp, вы должны знать
как Лисп читает их. Lisp должен убедиться, что он находит тот же символ
каждый раз, когда он читает один и тот же набор символов. Несоблюдение этого 
приводило бы к полному замешательству.

@cindex symbol name hashing
@cindex hashing
@cindex obarray
@cindex bucket (in obarray)
  Когда интерпретатор Lisp встречает символ, он считывает все символы
имени. Затем он хэширует эти символы, чтобы найти в индекс 
таблице @dfn{obarray}.  Хеширование - эффективный метод
осмотра поверхностно. Например, вместо поиска телефона Обинякина Алексея
по всей телефонной книги, вы начинаете искать где находится ``О" и 
идете оттуда. Это простая версия хэширования. Каждый элемент
obarray является @dfn{bucket} который содержит все символы с заданным
хэш-код; Искать какое-то имя, достаточно посмотреть
все символы в obarray для хэш-кода этого имени. 
(Эта же идея используется для общих хэш-таблиц Emacs, но они являются
другим типом данных; смотри @ref{Hash Tables}.)

@cindex interning
  Если найден символ с нужным именем, интерпретатор использует этот
символ. Если obarray не содержит символ с таким именем,
интерпретатор создает новый символ и добавляет его к obarray. J,yfhe;tybt или добавление
символ с определенным именем называется @dfn{interning} его и
символ затем называется @dfn{interned symbol}.

  Interning гарантирует, что каждый obarray имеет только один символ с любым
конкретным именем. Другие похожие символы могут существовать, но не в
той же obarray. Таким образом, интерпретатор получает одинаковые символы для одного и того же
имени, пока вы продолжаете читать с того же obarray.

  Интернинг обычно происходит автоматически в интерпретаторе, но иногда
другие программы должны это сделать. Например, после @kbd{M-x} команды
интерпретатор получает имя команды в виде строки, используя минибуфер, потом
получает строку, чтобы получить интернированный символ с этим именем.

@cindex symbol equality
@cindex uninterned symbol
  Не все символы содержит obarray; На самом деле, некоторые символы не в
obarray. Они называются @dfn{uninterned symbols}.  Неинтернированный 
символ имеет те же четыре ячейки, что и другие символы; Однако, единственный способ
получить доступ к нему - найти его в каком-то другом объекте или в качестве
значения переменной.

Создание неинтерминированного символа полезно при генерации кода Lisp,
потому что неинтерминированный символ, используемый в качестве переменной в коде, 
который вы генерируете не может столкнуться с любыми переменными, используемыми 
в других программах Lisp.

  В Emacs Lisp, obarray - фактически вектор. Каждый элемент
вектора  - @dfn{bucket}. Его значение является либо интернированным символом, чье имя
хэш для этого obarray, или 0, если obarray пуст. Каждый интернированный
cимвол имеет внутреннюю ссылку (невидимую для пользователя) на следующий символ
в bucket. Поскольку эти ссылки невидимы, нет никакого способа
yайти все символы в obarray, за исключением использования @code{mapatoms} (ниже).
Порядок символов в bucket не имеет значения.

  В пустом obarray каждый элемент равен 0, поэтому вы можете создать obarray
с @code{(make-vector @var{length} 0)}.  @strong{это единственный
действительный способ создания obarray.}  Простые числа как длины
приводят к хорошему хэшированию; Длины, меньшие, чем степень двойки, также
хорошо.

  @strong{Не пытайтесь помещать символы в obarray самостоятельно.}  Это 
не сработает --- только @code{intern} может ввести символ в obarray правильно.

@cindex CL note---symbol in obarrays
@quotation
@b{Common Lisp note:} В отличие от Common Lisp, Emacs Lisp не предоставляет
интернирование одного символа в нескольких obarrays.
@end quotation

  Большинство функций ниже используют имя, а иногда и
аргументы.  В @code{wrong-type-argument} ошибка сигнализируется, если имя
не является строкой, или если obarray не является вектором.

@defun symbol-name symbol
Эта функция возвращает строку, которая @var{symbol}'s имя символа.  Например:

@example
@group
(symbol-name 'foo)
     @result{} "foo"
@end group
@end example

@strong{Внимание:} изменение строки путем подстановки символов
изменит имя символа, но не обновит obarray, так что не
делай это!
@end defun

@defun make-symbol name
This function returns a newly-allocated, uninterned symbol whose name is
@var{name} (which must be a string).  Its value and function definition
are void, and its property list is @code{nil}.  In the example below,
the value of @code{sym} is not @code{eq} to @code{foo} because it is a
distinct uninterned symbol whose name is also @samp{foo}.

@example
(setq sym (make-symbol "foo"))
     @result{} foo
(eq sym 'foo)
     @result{} nil
@end example
@end defun

@defun intern name &optional obarray
This function returns the interned symbol whose name is @var{name}.  If
there is no such symbol in the obarray @var{obarray}, @code{intern}
creates a new one, adds it to the obarray, and returns it.  If
@var{obarray} is omitted, the value of the global variable
@code{obarray} is used.

@example
(setq sym (intern "foo"))
     @result{} foo
(eq sym 'foo)
     @result{} t

(setq sym1 (intern "foo" other-obarray))
     @result{} foo
(eq sym1 'foo)
     @result{} nil
@end example
@end defun

@cindex CL note---interning existing symbol
@quotation
@b{Common Lisp note:} In Common Lisp, you can intern an existing symbol
in an obarray.  In Emacs Lisp, you cannot do this, because the argument
to @code{intern} must be a string, not a symbol.
@end quotation

@defun intern-soft name &optional obarray
This function returns the symbol in @var{obarray} whose name is
@var{name}, or @code{nil} if @var{obarray} has no symbol with that name.
Therefore, you can use @code{intern-soft} to test whether a symbol with
a given name is already interned.  If @var{obarray} is omitted, the
value of the global variable @code{obarray} is used.

The argument @var{name} may also be a symbol; in that case,
the function returns @var{name} if @var{name} is interned
in the specified obarray, and otherwise @code{nil}.

@example
(intern-soft "frazzle")        ; @r{No such symbol exists.}
     @result{} nil
(make-symbol "frazzle")        ; @r{Create an uninterned one.}
     @result{} frazzle
@group
(intern-soft "frazzle")        ; @r{That one cannot be found.}
     @result{} nil
@end group
@group
(setq sym (intern "frazzle"))  ; @r{Create an interned one.}
     @result{} frazzle
@end group
@group
(intern-soft "frazzle")        ; @r{That one can be found!}
     @result{} frazzle
@end group
@group
(eq sym 'frazzle)              ; @r{And it is the same one.}
     @result{} t
@end group
@end example
@end defun

@defvar obarray
This variable is the standard obarray for use by @code{intern} and
@code{read}.
@end defvar

@defun mapatoms function &optional obarray
@anchor{Definition of mapatoms}
This function calls @var{function} once with each symbol in the obarray
@var{obarray}.  Then it returns @code{nil}.  If @var{obarray} is
omitted, it defaults to the value of @code{obarray}, the standard
obarray for ordinary symbols.

@example
(setq count 0)
     @result{} 0
(defun count-syms (s)
  (setq count (1+ count)))
     @result{} count-syms
(mapatoms 'count-syms)
     @result{} nil
count
     @result{} 1871
@end example

See @code{documentation} in @ref{Accessing Documentation}, for another
example using @code{mapatoms}.
@end defun

@defun unintern symbol obarray
This function deletes @var{symbol} from the obarray @var{obarray}.  If
@code{symbol} is not actually in the obarray, @code{unintern} does
nothing.  If @var{obarray} is @code{nil}, the current obarray is used.

If you provide a string instead of a symbol as @var{symbol}, it stands
for a symbol name.  Then @code{unintern} deletes the symbol (if any) in
the obarray which has that name.  If there is no such symbol,
@code{unintern} does nothing.

If @code{unintern} does delete a symbol, it returns @code{t}.  Otherwise
it returns @code{nil}.
@end defun

@node Symbol Properties
@section Symbol Properties
@cindex symbol property

  A symbol may possess any number of @dfn{symbol properties}, which
can be used to record miscellaneous information about the symbol.  For
example, when a symbol has a @code{risky-local-variable} property with
a non-@code{nil} value, that means the variable which the symbol names
is a risky file-local variable (@pxref{File Local Variables}).

  Each symbol's properties and property values are stored in the
symbol's property list cell (@pxref{Symbol Components}), in the form
of a property list (@pxref{Property Lists}).

@menu
* Symbol Plists::        Accessing symbol properties.
* Standard Properties::  Standard meanings of symbol properties.
@end menu

@node Symbol Plists
@subsection Accessing Symbol Properties

  The following functions can be used to access symbol properties.

@defun get symbol property
This function returns the value of the property named @var{property}
in @var{symbol}'s property list.  If there is no such property, it
returns @code{nil}.  Thus, there is no distinction between a value of
@code{nil} and the absence of the property.

The name @var{property} is compared with the existing property names
using @code{eq}, so any object is a legitimate property.

See @code{put} for an example.
@end defun

@defun put symbol property value
This function puts @var{value} onto @var{symbol}'s property list under
the property name @var{property}, replacing any previous property value.
The @code{put} function returns @var{value}.

@example
(put 'fly 'verb 'transitive)
     @result{}'transitive
(put 'fly 'noun '(a buzzing little bug))
     @result{} (a buzzing little bug)
(get 'fly 'verb)
     @result{} transitive
(symbol-plist 'fly)
     @result{} (verb transitive noun (a buzzing little bug))
@end example
@end defun

@defun symbol-plist symbol
This function returns the property list of @var{symbol}.
@end defun

@defun setplist symbol plist
This function sets @var{symbol}'s property list to @var{plist}.
Normally, @var{plist} should be a well-formed property list, but this is
not enforced.  The return value is @var{plist}.

@example
(setplist 'foo '(a 1 b (2 3) c nil))
     @result{} (a 1 b (2 3) c nil)
(symbol-plist 'foo)
     @result{} (a 1 b (2 3) c nil)
@end example

For symbols in special obarrays, which are not used for ordinary
purposes, it may make sense to use the property list cell in a
nonstandard fashion; in fact, the abbrev mechanism does so
(@pxref{Abbrevs}).

You could define @code{put} in terms of @code{setplist} and
@code{plist-put}, as follows:

@example
(defun put (symbol prop value)
  (setplist symbol
            (plist-put (symbol-plist symbol) prop value)))
@end example
@end defun

@defun function-get symbol property &optional autoload
This function is identical to @code{get}, except that if @var{symbol}
is the name of a function alias, it looks in the property list of the
symbol naming the actual function.  @xref{Defining Functions}.  If the
optional argument @var{autoload} is non-@code{nil}, and @var{symbol}
is auto-loaded, this function will try to autoload it, since
autoloading might set @var{property} of @var{symbol}.  If
@var{autoload} is the symbol @code{macro}, only try autoloading if
@var{symbol} is an auto-loaded macro.
@end defun

@defun function-put function property value
This function sets @var{property} of @var{function} to @var{value}.
@var{function} should be a symbol.  This function is preferred to
calling @code{put} for setting properties of a function, because it
will allow us some day to implement remapping of old properties to new
ones.
@end defun

@node Standard Properties
@subsection Standard Symbol Properties

  Here, we list the symbol properties which are used for special
purposes in Emacs.  In the following table, whenever we say ``the
named function'', that means the function whose name is the relevant
symbol; similarly for ``the named variable'' etc.

@table @code
@item :advertised-binding
This property value specifies the preferred key binding, when showing
documentation, for the named function.  @xref{Keys in Documentation}.

@item char-table-extra-slots
The value, if non-@code{nil}, specifies the number of extra slots in
the named char-table type.  @xref{Char-Tables}.

@item customized-face
@itemx face-defface-spec
@itemx saved-face
@itemx theme-face
These properties are used to record a face's standard, saved,
customized, and themed face specs.  Do not set them directly; they are
managed by @code{defface} and related functions.  @xref{Defining
Faces}.

@item customized-value
@itemx saved-value
@itemx standard-value
@itemx theme-value
These properties are used to record a customizable variable's standard
value, saved value, customized-but-unsaved value, and themed values.
Do not set them directly; they are managed by @code{defcustom} and
related functions.  @xref{Variable Definitions}.

@item disabled
If the value is non-@code{nil}, the named function is disabled as a
command.  @xref{Disabling Commands}.

@item face-documentation
The value stores the documentation string of the named face.  This is
set automatically by @code{defface}.  @xref{Defining Faces}.

@item history-length
The value, if non-@code{nil}, specifies the maximum minibuffer history
length for the named history list variable.  @xref{Minibuffer
History}.

@item interactive-form
The value is an interactive form for the named function.  Normally,
you should not set this directly; use the @code{interactive} special
form instead.  @xref{Interactive Call}.

@item menu-enable
The value is an expression for determining whether the named menu item
should be enabled in menus.  @xref{Simple Menu Items}.

@item mode-class
If the value is @code{special}, the named major mode is special.
@xref{Major Mode Conventions}.

@item permanent-local
If the value is non-@code{nil}, the named variable is a buffer-local
variable whose value should not be reset when changing major modes.
@xref{Creating Buffer-Local}.

@item permanent-local-hook
If the value is non-@code{nil}, the named function should not be
deleted from the local value of a hook variable when changing major
modes.  @xref{Setting Hooks}.

@item pure
If the value is non-@code{nil}, the named function is considered to be
side-effect free.  Calls with constant arguments can be evaluated at
compile time.  This may shift run time errors to compile time.

@item risky-local-variable
If the value is non-@code{nil}, the named variable is considered risky
as a file-local variable.  @xref{File Local Variables}.

@item safe-function
If the value is non-@code{nil}, the named function is considered
generally safe for evaluation.  @xref{Function Safety}.

@item safe-local-eval-function
If the value is non-@code{nil}, the named function is safe to call in
file-local evaluation forms.  @xref{File Local Variables}.

@item safe-local-variable
The value specifies a function for determining safe file-local values
for the named variable.  @xref{File Local Variables}.

@item side-effect-free
A non-@code{nil} value indicates that the named function is free of
side-effects, for determining function safety (@pxref{Function
Safety}) as well as for byte compiler optimizations.  Do not set it.

@item variable-documentation
If non-@code{nil}, this specifies the named variable's documentation
string.  This is set automatically by @code{defvar} and related
functions.  @xref{Defining Faces}.
@end table
