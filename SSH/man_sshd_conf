SSHD_CONFIG(5)              BSD File Formats Manual             SSHD_CONFIG(5)

NAME
     sshd_config — OpenSSH SSH daemon configuration file

SYNOPSIS
     /etc/ssh/sshd_config

DESCRIPTION
     sshd (8) считывает данные конфигурации из /etc/ssh/sshd_config (или файл, указанный с -f в командной строке). Файл содержит пары ключевых
     слов-аргументов, по одному на строку. Строки, начинающиеся с «#» и пустых строк, интерпретируются как комментарии. Аргументы могут быть
     необязательно заключены в двойные кавычки (") для представления аргументов, содержащих пробелы.

     Обратите внимание, что пакет Debian openssh-server устанавливает несколько параметров в стандартном файле /etc/ssh/sshd_config, которые не 
     являются значениями по умолчанию в sshd (8). Точный список зависит от того, был ли пакет установлен новым или обновлен из разных возможных 
     предыдущих версий, но включает в себя, по крайней мере, следующее:

           ·   ChallengeResponseAuthentication no
           ·   X11Forwarding yes
           ·   PrintMotd no
           ·   AcceptEnv LANG LC_*
           ·   Subsystem sftp /usr/lib/openssh/sftp-server
           ·   UsePAM yes

     Возможные ключевые слова и их значения следующие (обратите внимание, что ключевые слова не чувствительны к регистру, а аргументы 
     чувствительны к регистру):

     AcceptEnv
             Указывает, какие переменные среды, отправленные клиентом, будут скопированы в среду сеанса (7). См. SendEnv в ssh_config (5) для 
	     настройки клиента. Переменная окружения TERM всегда отправляется всякий раз, когда клиент запрашивает псевдотерминал, как того 
	     требует протокол. Переменные задаются по имени, которое может содержать подстановочные знаки '*' и '?'. Несколько переменных среды 
	     могут быть разделены пробелом или разбросаны по нескольким директивам AcceptEnv. Следует предупредить, что некоторые переменные среды
	      могут использоваться для обхода ограниченных пользовательских сред. По этой причине следует соблюдать осторожность при использовании		 этой директивы. По умолчанию не принимаются никакие переменные среды.

     AddressFamily
             Указывает, какое семейство адресов должно использоваться sshd (8). Допустимыми аргументами являются «any», «inet» (только для IPv4) 
	     или «inet6» (только для IPv6). Значение по умолчанию - «any».

     AllowAgentForwarding
             Указывает, разрешена ли пересылка ssh-agent (1). Значение по умолчанию - «yes». Обратите внимание, что отключение перенаправления 
	     агентов не повышает безопасность, если пользователям также не разрешен доступ к оболочке, так как они всегда могут устанавливать свои
	     собственные форвардеры.

     AllowGroups
             За этим ключевым словом может следовать список шаблонов имен групп, разделенных пробелами. Если указано, вход разрешен только для 
	     пользователей, чья основная группа или дополнительный список групп соответствуют одному из шаблонов. Действительны только имена 
	     групп; идентификатор числовой группы не распознается. По умолчанию вход для всех групп разрешен. Директивы allow/deny обрабатываются 
	     в следующем порядке: DenyUsers, AllowUsers, DenyGroups и, наконец, AllowGroups.

             See PATTERNS in ssh_config(5) for more information on patterns.

     AllowTcpForwarding
             Указывает, разрешена ли пересылка TCP. Доступными параметрами являются «yes» или «all», чтобы разрешить пересылку TCP, «no», чтобы 
	     предотвратить всю пересылку TCP, «local», чтобы разрешить локальную (с точки зрения ssh (1)) пересылку или «remote», Чтобы
	     разрешить только дистанционную пересылку. Значение по умолчанию - «yes». Обратите внимание, что отключение переадресации TCP не
	     повышает безопасность, если пользователям также не разрешен доступ к оболочке, так как они всегда могут устанавливать свои
	     собственные форвардеры.

     AllowStreamLocalForwarding
             Указывает, разрешена ли пересылка StreamLocal (Unix-domain socket). Доступными параметрами являются «yes» или «all», чтобы разрешить 
	     пересылку StreamLocal, «no», чтобы предотвратить пересылку StreamLocal, «local», чтобы разрешить локальные (с точки зрения ssh (1)) 
	     только «remote» или «удаленные» ", Чтобы разрешить только дистанционную пересылку. Значение по умолчанию - «yes». Обратите внимание,
	     что отключение пересылки StreamLocal не повышает безопасность, если пользователям также не разрешен доступ к оболочке, поскольку они
	     всегда могут устанавливать свои собственные форвардеры.

     AllowUsers
             За этим ключевым словом может следовать список шаблонов имен пользователей, разделенных пробелами. Если указано, вход разрешен только
	     для имен пользователей, соответствующих одному из шаблонов. Действительны только имена пользователей; числовой идентификатор
	     пользователя не распознается. По умолчанию вход для всех пользователей разрешен. Если шаблон принимает форму USER @ HOST, то USER и
	     HOST проверяются отдельно, ограничивая логины для определенных пользователей с определенных хостов. Директивы allow/deny
	     обрабатываются в следующем порядке: DenyUsers, AllowUsers, DenyGroups и, наконец, AllowGroups.

             See PATTERNS in ssh_config(5) for more information on patterns.

     AuthenticationMethods
             Определяет методы аутентификации, которые должны быть успешно завершены для доступа пользователя к доступу. За этой опцией должен
	     следовать один или несколько списков имен методов аутентификации, разделенных запятыми. Успешная аутентификация требует завершения
	     каждого метода, по крайней мере, в одном из этих списков.

             Например, аргумент “publickey,password
             publickey,keyboard-interactive” потребует от пользователя полной проверки подлинности с открытым ключом, а затем с помощью
	     интерактивной проверки пароля или клавиатуры. На каждом этапе предлагаются только те методы, которые входят в один или несколько
	     списков, поэтому для этого примера невозможно было бы попытаться использовать пароль или клавиатурную интерактивную аутентификацию
	     перед открытым ключом.

             Для интерактивная аутентификация клавиатуры также можно ограничить аутентификацию определенным устройством, добавив двоеточие, за
	     которым следует идентификатор устройства “bsdauth”, “pam”, или “skey”, в зависимости от конфигурации сервера. Например,
             “keyboard-interactive:bsdauth” ограничило бы клавиатурную интерактивную аутентификацию устройством «bsdauth».

             Если метод «publickey» указан более одного раза, sshd (8) проверяет, что используемые ранее ключи не используются повторно для
	     последующей аутентификации. Например, методы аутентификации «publickey, publickey» потребуют успешной аутентификации с использованием
	     двух разных открытых ключей.

             Эта опция приведет к фатальной ошибке, если она включена, если включен протокол 1. Обратите внимание, что каждый указанный метод
	     проверки подлинности также должен быть явно включен в конфигурации. По умолчанию не требуется многократная аутентификация; достаточно
	     успешного завершения одного метода аутентификации.

     AuthorizedKeysCommand
             Указывает программу, которая будет использоваться для поиска открытых ключей пользователя. Программа должна принадлежать root, а не
	     записываться группами или другими и указываться абсолютным путем.

             Аргументы для AuthorizedKeysCommand могут предоставляться с использованием следующих токенов, которые будут расширены во время
	     выполнения: %% заменяется литералом '%',% u заменяется именем пользователя, который аутентифицируется,% h заменяется на дом каталог
	     пользователя, прошедшего проверку подлинности,% t заменяется типом ключа, предлагаемым для аутентификации,% f заменяется отпечатком
	     ключа, а% k заменяется ключом, предлагаемым для аутентификации. Если аргументы не указаны, то будет указано имя пользователя целевого
	     пользователя.

             Программа должна производить на стандартном выходе нуль или больше строк разрешенных_выпусков (см. AUTHORIZED_KEYS в sshd (8)). Если
	     ключ, предоставленный AuthorizedKeysCommand, не выполняет проверку подлинности и авторизации пользователя, аутентификация открытого
	     ключа продолжается с использованием обычных файлов AuthorizedKeysFile. По умолчанию не запускается AuthorizedKeysCommand.

     AuthorizedKeysCommandUser
             Указывает пользователя, в чью учетную запись запускается AuthorizedKeysCommand. Рекомендуется использовать выделенного пользователя,
	     который не имеет другой роли на хосте, чем запуск разрешенных команд ключей. Если AuthorizedKeysCommand указан, но
	     AuthorizedKeysCommandUser нет, то sshd (8) откажется запускаться.

     AuthorizedKeysFile
             Задает файл, содержащий открытые ключи, которые могут использоваться для аутентификации пользователя. Формат описан в разделе
	     AUTHO-RIZED_KEYS FILE FORMAT sshd (8). AuthorizedKeysFile может содержать токены формы% T, которые заменяются при настройке соединения
	     Определены следующие токены: %% заменяется литералом '%',% h заменяется домашним каталогом аутентифицируемого пользователя, а% u
	     заменяется на имя пользователя этого пользователя. После расширения AuthorizedKeysFile воспринимается как абсолютный путь или один по
	     отношению к домашнему руководству пользователя. Можно указать несколько файлов, разделенных пробелами. В качестве альтернативы для
	     этой опции может быть установлено значение «none», чтобы пропустить проверку ключей пользователя в файлах. По умолчанию используется
	     «.ssh / authorized_keys .ssh / authorized_keys2».

     AuthorizedPrincipalsCommand
             Указывает программу, которая будет использоваться для создания списка разрешенных типов сертификатов согласно
	     AuthorizedPrincipalsFile. Программа должна принадлежать root, а не записываться группой или другими и указываться абсолютным путем.

             Arguments to AuthorizedPrincipalsCommand may be provided using
             the following tokens, which will be expanded at runtime: %% is
             replaced by a literal '%', %u is replaced by the username being
             authenticated and %h is replaced by the home directory of the
             user being authenticated.

             The program should produce on standard output zero or more lines
             of AuthorizedPrincipalsFile output.  If either
             AuthorizedPrincipalsCommand or AuthorizedPrincipalsFile is speci‐
             fied, then certificates offered by the client for authentication
             must contain a principal that is listed.  By default, no Autho‐
             rizedPrincipalsCommand is run.

     AuthorizedPrincipalsCommandUser
             Specifies the user under whose account the AuthorizedPrinci‐
             palsCommand is run.  It is recommended to use a dedicated user
             that has no other role on the host than running authorized prin‐
             cipals commands.  If AuthorizedPrincipalsCommand is specified but
             AuthorizedPrincipalsCommandUser is not, then sshd(8) will refuse
             to start.

     AuthorizedPrincipalsFile
             Specifies a file that lists principal names that are accepted for
             certificate authentication.  When using certificates signed by a
             key listed in TrustedUserCAKeys, this file lists names, one of
             which must appear in the certificate for it to be accepted for
             authentication.  Names are listed one per line preceded by key
             options (as described in AUTHORIZED_KEYS FILE FORMAT in sshd(8)).
             Empty lines and comments starting with ‘#’ are ignored.

             AuthorizedPrincipalsFile may contain tokens of the form %T which
             are substituted during connection setup.  The following tokens
             are defined: %% is replaced by a literal '%', %h is replaced by
             the home directory of the user being authenticated, and %u is
             replaced by the username of that user.  After expansion,
             AuthorizedPrincipalsFile is taken to be an absolute path or one
             relative to the user's home directory.

             The default is “none”, i.e. not to use a principals file – in
             this case, the username of the user must appear in a certifi‐
             cate's principals list for it to be accepted.  Note that
             AuthorizedPrincipalsFile is only used when authentication pro‐
             ceeds using a CA listed in TrustedUserCAKeys and is not consulted
             for certification authorities trusted via ~/.ssh/authorized_keys,
             though the principals= key option offers a similar facility (see
             sshd(8) for details).

     Banner  The contents of the specified file are sent to the remote user
             before authentication is allowed.  If the argument is “none” then
             no banner is displayed.  By default, no banner is displayed.

     ChallengeResponseAuthentication
             Specifies whether challenge-response authentication is allowed
             (e.g. via PAM).  The default is “yes”.

     ChrootDirectory
             Specifies the pathname of a directory to chroot(2) to after
             authentication.  At session startup sshd(8) checks that all com‐
             ponents of the pathname are root-owned directories which are not
             writable by any other user or group.  After the chroot, sshd(8)
             changes the working directory to the user's home directory.

             The pathname may contain the following tokens that are expanded
             at runtime once the connecting user has been authenticated: %% is
             replaced by a literal '%', %h is replaced by the home directory
             of the user being authenticated, and %u is replaced by the user‐
             name of that user.

             The ChrootDirectory must contain the necessary files and directo‐
             ries to support the user's session.  For an interactive session
             this requires at least a shell, typically sh(1), and basic /dev
             nodes such as null(4), zero(4), stdin(4), stdout(4), stderr(4),
             and tty(4) devices.  For file transfer sessions using “sftp”, no
             additional configuration of the environment is necessary if the
             in-process sftp server is used, though sessions which use logging
             may require /dev/log inside the chroot directory on some operat‐
             ing systems (see sftp-server(8) for details).

             For safety, it is very important that the directory hierarchy be
             prevented from modification by other processes on the system
             (especially those outside the jail).  Misconfiguration can lead
             to unsafe environments which sshd(8) cannot detect.

             The default is “none”, indicating not to chroot(2).

     Ciphers
             Specifies the ciphers allowed.  Multiple ciphers must be comma-
             separated.  If the specified value begins with a ‘+’ character,
             then the specified ciphers will be appended to the default set
             instead of replacing them.

             The supported ciphers are:

                   3des-cbc
                   aes128-cbc
                   aes192-cbc
                   aes256-cbc
                   aes128-ctr
                   aes192-ctr
                   aes256-ctr
                   aes128-gcm@openssh.com
                   aes256-gcm@openssh.com
                   arcfour
                   arcfour128
                   arcfour256
                   blowfish-cbc
                   cast128-cbc
                   chacha20-poly1305@openssh.com

             The default is:

                   chacha20-poly1305@openssh.com,
                   aes128-ctr,aes192-ctr,aes256-ctr,
                   aes128-gcm@openssh.com,aes256-gcm@openssh.com

             The list of available ciphers may also be obtained using the -Q
             option of ssh(1) with an argument of “cipher”.

     ClientAliveCountMax
             Sets the number of client alive messages (see below) which may be
             sent without sshd(8) receiving any messages back from the client.
             If this threshold is reached while client alive messages are
             being sent, sshd will disconnect the client, terminating the ses‐
             sion.  It is important to note that the use of client alive mes‐
             sages is very different from TCPKeepAlive (below).  The client
             alive messages are sent through the encrypted channel and there‐
             fore will not be spoofable.  The TCP keepalive option enabled by
             TCPKeepAlive is spoofable.  The client alive mechanism is valu‐
             able when the client or server depend on knowing when a connec‐
             tion has become inactive.

             The default value is 3.  If ClientAliveInterval (see below) is
             set to 15, and ClientAliveCountMax is left at the default, unre‐
             sponsive SSH clients will be disconnected after approximately 45
             seconds.

     ClientAliveInterval
             Sets a timeout interval in seconds after which if no data has
             been received from the client, sshd(8) will send a message
             through the encrypted channel to request a response from the
             client.  The default is 0, indicating that these messages will
             not be sent to the client.

     Compression
             Specifies whether compression is enabled after the user has
             authenticated successfully.  The argument must be “yes”,
             “delayed” (a legacy synonym for “yes”) or “no”.  The default is
             “yes”.

     DebianBanner
             Specifies whether the distribution-specified extra version suffix
             is included during initial protocol handshake.  The default is
             “yes”.

     DenyGroups
             This keyword can be followed by a list of group name patterns,
             separated by spaces.  Login is disallowed for users whose primary
             group or supplementary group list matches one of the patterns.
             Only group names are valid; a numerical group ID is not recog‐
             nized.  By default, login is allowed for all groups.  The
             allow/deny directives are processed in the following order:
             DenyUsers, AllowUsers, DenyGroups, and finally AllowGroups.

             See PATTERNS in ssh_config(5) for more information on patterns.

     DenyUsers
             This keyword can be followed by a list of user name patterns,
             separated by spaces.  Login is disallowed for user names that
             match one of the patterns.  Only user names are valid; a numeri‐
             cal user ID is not recognized.  By default, login is allowed for
             all users.  If the pattern takes the form USER@HOST then USER and
             HOST are separately checked, restricting logins to particular
             users from particular hosts.  The allow/deny directives are pro‐
             cessed in the following order: DenyUsers, AllowUsers, DenyGroups,
             and finally AllowGroups.

             See PATTERNS in ssh_config(5) for more information on patterns.

     FingerprintHash
             Specifies the hash algorithm used when logging key fingerprints.
             Valid options are: “md5” and “sha256”.  The default is “sha256”.

     ForceCommand
             Forces the execution of the command specified by ForceCommand,
             ignoring any command supplied by the client and ~/.ssh/rc if
             present.  The command is invoked by using the user's login shell
             with the -c option.  This applies to shell, command, or subsystem
             execution.  It is most useful inside a Match block.  The command
             originally supplied by the client is available in the
             SSH_ORIGINAL_COMMAND environment variable.  Specifying a command
             of “internal-sftp” will force the use of an in-process sftp
             server that requires no support files when used with
             ChrootDirectory.  The default is “none”.

     GatewayPorts
             Указывает, разрешено ли удаленным хостам подключаться к портам, перенаправленным для клиента. По умолчанию sshd (8) связывает
	     удаленные переадресации портов с адресом loopback. Это предотвращает подключение других удаленных хостов к перенаправленным портам.
	     GatewayPorts можно использовать для указания того, что sshd должно разрешать удаленные пересылки портов для привязки к адресам без
	     обратной связи, что позволяет другим хостам подключаться. Аргумент может быть «no», чтобы заставить удаленные пересылки портов быть
	     доступными только локальному хосту, «yes», чтобы принудительно перенаправить удаленные пересылки портов на подстановочный адрес или
	     «clientpecified», чтобы клиент мог выбрать адрес, на который пересылка связана. По умолчанию «no».

     GSSAPIAuthentication
             Specifies whether user authentication based on GSSAPI is allowed.
             The default is “no”.

     GSSAPIKeyExchange
             Specifies whether key exchange based on GSSAPI is allowed. GSSAPI
             key exchange doesn't rely on ssh keys to verify host identity.
             The default is “no”.

     GSSAPICleanupCredentials
             Specifies whether to automatically destroy the user's credentials
             cache on logout.  The default is “yes”.

     GSSAPIStrictAcceptorCheck
             Determines whether to be strict about the identity of the GSSAPI
             acceptor a client authenticates against.  If set to “yes” then
             the client must authenticate against the host service on the cur‐
             rent hostname.  If set to “no” then the client may authenticate
             against any service key stored in the machine's default store.
             This facility is provided to assist with operation on multi homed
             machines.  The default is “yes”.

     GSSAPIStoreCredentialsOnRekey
             Controls whether the user's GSSAPI credentials should be updated
             following a successful connection rekeying. This option can be
             used to accepted renewed or updated credentials from a compatible
             client. The default is “no”.

     HostbasedAcceptedKeyTypes
             Specifies the key types that will be accepted for hostbased
             authentication as a comma-separated pattern list.  Alternately if
             the specified value begins with a ‘+’ character, then the speci‐
             fied key types will be appended to the default set instead of
             replacing them.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             The -Q option of ssh(1) may be used to list supported key types.

     HostbasedAuthentication
             Specifies whether rhosts or /etc/hosts.equiv authentication
             together with successful public key client host authentication is
             allowed (host-based authentication).  The default is “no”.

     HostbasedUsesNameFromPacketOnly
             Specifies whether or not the server will attempt to perform a
             reverse name lookup when matching the name in the ~/.shosts,
             ~/.rhosts, and /etc/hosts.equiv files during
             HostbasedAuthentication.  A setting of “yes” means that sshd(8)
             uses the name supplied by the client rather than attempting to
             resolve the name from the TCP connection itself.  The default is
             “no”.

     HostCertificate
             Specifies a file containing a public host certificate.  The cer‐
             tificate's public key must match a private host key already spec‐
             ified by HostKey.  The default behaviour of sshd(8) is not to
             load any certificates.

     HostKey
             Specifies a file containing a private host key used by SSH.  The
             default is /etc/ssh/ssh_host_key for protocol version 1, and
             /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_ecdsa_key,
             /etc/ssh/ssh_host_ed25519_key and /etc/ssh/ssh_host_rsa_key for
             protocol version 2.

             Note that sshd(8) will refuse to use a file if it is group/world-
             accessible and that the HostKeyAlgorithms option restricts which
             of the keys are actually used by sshd(8).

             It is possible to have multiple host key files.  “rsa1” keys are
             used for version 1 and “dsa”, “ecdsa”, “ed25519” or “rsa” are
             used for version 2 of the SSH protocol.  It is also possible to
             specify public host key files instead.  In this case operations
             on the private key will be delegated to an ssh-agent(1).

     HostKeyAgent
             Identifies the UNIX-domain socket used to communicate with an
             agent that has access to the private host keys.  If
             “SSH_AUTH_SOCK” is specified, the location of the socket will be
             read from the SSH_AUTH_SOCK environment variable.

     HostKeyAlgorithms
             Specifies the host key algorithms that the server offers.  The
             default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             The list of available key types may also be obtained using the -Q
             option of ssh(1) with an argument of “key”.

     IgnoreRhosts
             Specifies that .rhosts and .shosts files will not be used in
             RhostsRSAAuthentication or HostbasedAuthentication.

             /etc/hosts.equiv and /etc/ssh/shosts.equiv are still used.  The
             default is “yes”.

     IgnoreUserKnownHosts
             Specifies whether sshd(8) should ignore the user's
             ~/.ssh/known_hosts during RhostsRSAAuthentication or
             HostbasedAuthentication.  The default is “no”.

     IPQoS   Specifies the IPv4 type-of-service or DSCP class for the connec‐
             tion.  Accepted values are “af11”, “af12”, “af13”, “af21”,
             “af22”, “af23”, “af31”, “af32”, “af33”, “af41”, “af42”, “af43”,
             “cs0”, “cs1”, “cs2”, “cs3”, “cs4”, “cs5”, “cs6”, “cs7”, “ef”,
             “lowdelay”, “throughput”, “reliability”, or a numeric value.
             This option may take one or two arguments, separated by white‐
             space.  If one argument is specified, it is used as the packet
             class unconditionally.  If two values are specified, the first is
             automatically selected for interactive sessions and the second
             for non-interactive sessions.  The default is “lowdelay” for
             interactive sessions and “throughput” for non-interactive ses‐
             sions.

     KbdInteractiveAuthentication
             Specifies whether to allow keyboard-interactive authentication.
             The argument to this keyword must be “yes” or “no”.  The default
             is to use whatever value ChallengeResponseAuthentication is set
             to (by default “yes”).

     KerberosAuthentication
             Specifies whether the password provided by the user for
             PasswordAuthentication will be validated through the Kerberos
             KDC.  To use this option, the server needs a Kerberos servtab
             which allows the verification of the KDC's identity.  The default
             is “no”.

     KerberosGetAFSToken
             If AFS is active and the user has a Kerberos 5 TGT, attempt to
             acquire an AFS token before accessing the user's home directory.
             The default is “no”.

     KerberosOrLocalPasswd
             If password authentication through Kerberos fails then the pass‐
             word will be validated via any additional local mechanism such as
             /etc/passwd.  The default is “yes”.

     KerberosTicketCleanup
             Specifies whether to automatically destroy the user's ticket
             cache file on logout.  The default is “yes”.

     KexAlgorithms
             Specifies the available KEX (Key Exchange) algorithms.  Multiple
             algorithms must be comma-separated.  Alternately if the specified
             value begins with a ‘+’ character, then the specified methods
             will be appended to the default set instead of replacing them.
             The supported algorithms are:

                   curve25519-sha256@libssh.org
                   diffie-hellman-group1-sha1
                   diffie-hellman-group14-sha1
                   diffie-hellman-group-exchange-sha1
                   diffie-hellman-group-exchange-sha256
                   ecdh-sha2-nistp256
                   ecdh-sha2-nistp384
                   ecdh-sha2-nistp521

             The default is:

                   curve25519-sha256@libssh.org,
                   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
                   diffie-hellman-group-exchange-sha256,
                   diffie-hellman-group14-sha1

             The list of available key exchange algorithms may also be
             obtained using the -Q option of ssh(1) with an argument of “kex”.

     KeyRegenerationInterval
             In protocol version 1, the ephemeral server key is automatically
             regenerated after this many seconds (if it has been used).  The
             purpose of regeneration is to prevent decrypting captured ses‐
             sions by later breaking into the machine and stealing the keys.
             The key is never stored anywhere.  If the value is 0, the key is
             never regenerated.  The default is 3600 (seconds).

     ListenAddress
             Указывает локальные адреса, которые должен прослушать sshd (8). Могут использоваться следующие формы:

                   ListenAddress host|IPv4_addr|IPv6_addr
                   ListenAddress host|IPv4_addr:port
                   ListenAddress [host|IPv6_addr]:port

             Если порт не указан, sshd будет прослушивать адрес и все параметры порта. По умолчанию используется прослушивание по всем локальным
	     адресам. Разрешены несколько параметров ListenAddress.

     LoginGraceTime
             The server disconnects after this time if the user has not suc‐
             cessfully logged in.  If the value is 0, there is no time limit.
             The default is 120 seconds.

     LogLevel
             Gives the verbosity level that is used when logging messages from
             sshd(8).  The possible values are: QUIET, FATAL, ERROR, INFO,
             VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3.  The default is INFO.
             DEBUG and DEBUG1 are equivalent.  DEBUG2 and DEBUG3 each specify
             higher levels of debugging output.  Logging with a DEBUG level
             violates the privacy of users and is not recommended.

     MACs    Specifies the available MAC (message authentication code) algo‐
             rithms.  The MAC algorithm is used for data integrity protection.
             Multiple algorithms must be comma-separated.  If the specified
             value begins with a ‘+’ character, then the specified algorithms
             will be appended to the default set instead of replacing them.

             The algorithms that contain “-etm” calculate the MAC after
             encryption (encrypt-then-mac).  These are considered safer and
             their use recommended.  The supported MACs are:

                   hmac-md5
                   hmac-md5-96
                   hmac-ripemd160
                   hmac-sha1
                   hmac-sha1-96
                   hmac-sha2-256
                   hmac-sha2-512
                   umac-64@openssh.com
                   umac-128@openssh.com
                   hmac-md5-etm@openssh.com
                   hmac-md5-96-etm@openssh.com
                   hmac-ripemd160-etm@openssh.com
                   hmac-sha1-etm@openssh.com
                   hmac-sha1-96-etm@openssh.com
                   hmac-sha2-256-etm@openssh.com
                   hmac-sha2-512-etm@openssh.com
                   umac-64-etm@openssh.com
                   umac-128-etm@openssh.com

             The default is:

                   umac-64-etm@openssh.com,umac-128-etm@openssh.com,
                   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,
                   hmac-sha1-etm@openssh.com,
                   umac-64@openssh.com,umac-128@openssh.com,
                   hmac-sha2-256,hmac-sha2-512,hmac-sha1

             The list of available MAC algorithms may also be obtained using
             the -Q option of ssh(1) with an argument of “mac”.

     Match   Вводит условный блок. Если все критерии в строке соответствия выполнены,
     	     ключевые слова в следующих строках переопределяют те, которые установлены
	     в глобальном разделе конфигурационного файла, до любой другой строки
	     соответствия или конца файла. Если ключевое слово отображается в нескольких
	     блоках соответствия, которые удовлетворяются, применяется только первый
	     экземпляр ключевого слова.

             The arguments to Match are one or more criteria-pattern pairs or
             the single token All which matches all criteria.  The available
             criteria are User, Group, Host, LocalAddress, LocalPort, and
             Address.  The match patterns may consist of single entries or
             comma-separated lists and may use the wildcard and negation oper‐
             ators described in the PATTERNS section of ssh_config(5).

             The patterns in an Address criteria may additionally contain
             addresses to match in CIDR address/masklen format, e.g.
             “192.0.2.0/24” or “3ffe:ffff::/32”.  Note that the mask length
             provided must be consistent with the address - it is an error to
             specify a mask length that is too long for the address or one
             with bits set in this host portion of the address.  For example,
             “192.0.2.0/33” and “192.0.2.0/8” respectively.

             Only a subset of keywords may be used on the lines following a
             Match keyword.  Available keywords are AcceptEnv,
             AllowAgentForwarding, AllowGroups, AllowStreamLocalForwarding,
             AllowTcpForwarding, AllowUsers, AuthenticationMethods,
             AuthorizedKeysCommand, AuthorizedKeysCommandUser,
             AuthorizedKeysFile, AuthorizedPrincipalsCommand,
             AuthorizedPrincipalsCommandUser, AuthorizedPrincipalsFile,
             Banner, ChrootDirectory, DenyGroups, DenyUsers, ForceCommand,
             GatewayPorts, GSSAPIAuthentication, HostbasedAcceptedKeyTypes,
             HostbasedAuthentication, HostbasedUsesNameFromPacketOnly, IPQoS,
             KbdInteractiveAuthentication, KerberosAuthentication,
             MaxAuthTries, MaxSessions, PasswordAuthentication,
             PermitEmptyPasswords, PermitOpen, PermitRootLogin, PermitTTY,
             PermitTunnel, PermitUserRC, PubkeyAcceptedKeyTypes,
             PubkeyAuthentication, RekeyLimit, RevokedKeys,
             RhostsRSAAuthentication, RSAAuthentication, StreamLocalBindMask,
             StreamLocalBindUnlink, TrustedUserCAKeys, X11DisplayOffset,
             X11Forwarding and X11UseLocalHost.

     MaxAuthTries
             Specifies the maximum number of authentication attempts permitted
             per connection.  Once the number of failures reaches half this
             value, additional failures are logged.  The default is 6.

     MaxSessions
             Specifies the maximum number of open shell, login or subsystem
             (e.g. sftp) sessions permitted per network connection.  Multiple
             sessions may be established by clients that support connection
             multiplexing.  Setting MaxSessions to 1 will effectively disable
             session multiplexing, whereas setting it to 0 will prevent all
             shell, login and subsystem sessions while still permitting for‐
             warding.  The default is 10.

     MaxStartups
             Specifies the maximum number of concurrent unauthenticated con‐
             nections to the SSH daemon.  Additional connections will be
             dropped until authentication succeeds or the LoginGraceTime
             expires for a connection.  The default is 10:30:100.

             Alternatively, random early drop can be enabled by specifying the
             three colon separated values “start:rate:full” (e.g. "10:30:60").
             sshd(8) will refuse connection attempts with a probability of
             “rate/100” (30%) if there are currently “start” (10) unauthenti‐
             cated connections.  The probability increases linearly and all
             connection attempts are refused if the number of unauthenticated
             connections reaches “full” (60).

     PasswordAuthentication
             Specifies whether password authentication is allowed.  The
             default is “yes”.

     PermitEmptyPasswords
             When password authentication is allowed, it specifies whether the
             server allows login to accounts with empty password strings.  The
             default is “no”.

     PermitOpen
             Указывает адресатов, которым разрешена пересылка TCP-порта. Спецификация пересылки должна быть одной из следующих форм:

                   PermitOpen host:port
                   PermitOpen IPv4_addr:port
                   PermitOpen [IPv6_addr]:port

             Несколько форвардов можно указать, разделив их на пробел. Аргумент «any» может использоваться для удаления всех ограничений и
	     разрешения любых запросов на пересылку. Аргумент «none» может использоваться для запрета всех запросов на пересылку. По умолчанию
	     разрешены все запросы переадресации портов.

     PermitRootLogin
             Specifies whether root can log in using ssh(1).  The argument
             must be “yes”, “prohibit-password”, “without-password”,
             “forced-commands-only”, or “no”.  The default is
             “prohibit-password”.

             If this option is set to “prohibit-password” or
             “without-password”, password and keyboard-interactive authentica‐
             tion are disabled for root.

             If this option is set to “forced-commands-only”, root login with
             public key authentication will be allowed, but only if the
             command option has been specified (which may be useful for taking
             remote backups even if root login is normally not allowed).  All
             other authentication methods are disabled for root.

             If this option is set to “no”, root is not allowed to log in.

     PermitTunnel
             Указывает, разрешена ли пересылка устройства tun(4). Аргумент должен быть «yes», «point-to-point» (уровень 3), «ethernet» (уровень 2)
	     или «no». Указание «yes» допускает как «point-to-point», так и «ethernet». По умолчанию «no».

             Независимо от этого параметра, разрешения для выбранного устройства tun(4) должны обеспечивать доступ к пользователю.

     PermitTTY
             Specifies whether pty(4) allocation is permitted.  The default is
             “yes”.

     PermitUserEnvironment
             Specifies whether ~/.ssh/environment and environment= options in
             ~/.ssh/authorized_keys are processed by sshd(8).  The default is
             “no”.  Enabling environment processing may enable users to bypass
             access restrictions in some configurations using mechanisms such
             as LD_PRELOAD.

     PermitUserRC
             Specifies whether any ~/.ssh/rc file is executed.  The default is
             “yes”.

     PidFile
             Specifies the file that contains the process ID of the SSH dae‐
             mon, or “none” to not write one.  The default is
             /var/run/sshd.pid.

     Port    Specifies the port number that sshd(8) listens on.  The default
             is 22.  Multiple options of this type are permitted.  See also
             ListenAddress.

     PrintLastLog
             Specifies whether sshd(8) should print the date and time of the
             last user login when a user logs in interactively.  The default
             is “yes”.

     PrintMotd
             Specifies whether sshd(8) should print /etc/motd when a user logs
             in interactively.  (On some systems it is also printed by the
             shell, /etc/profile, or equivalent.)  The default is “yes”.

     Protocol
             Specifies the protocol versions sshd(8) supports.  The possible
             values are ‘1’ and ‘2’.  Multiple versions must be comma-sepa‐
             rated.  The default is ‘2’.  Protocol 1 suffers from a number of
             cryptographic weaknesses and should not be used.  It is only
             offered to support legacy devices.

             Note that the order of the protocol list does not indicate pref‐
             erence, because the client selects among multiple protocol ver‐
             sions offered by the server.  Specifying “2,1” is identical to
             “1,2”.

     PubkeyAcceptedKeyTypes
             Specifies the key types that will be accepted for public key
             authentication as a comma-separated pattern list.  Alternately if
             the specified value begins with a ‘+’ character, then the speci‐
             fied key types will be appended to the default set instead of
             replacing them.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             The -Q option of ssh(1) may be used to list supported key types.

     PubkeyAuthentication
             Specifies whether public key authentication is allowed.  The
             default is “yes”.

     RekeyLimit
             Specifies the maximum amount of data that may be transmitted
             before the session key is renegotiated, optionally followed a
             maximum amount of time that may pass before the session key is
             renegotiated.  The first argument is specified in bytes and may
             have a suffix of ‘K’, ‘M’, or ‘G’ to indicate Kilobytes,
             Megabytes, or Gigabytes, respectively.  The default is between
             ‘1G’ and ‘4G’, depending on the cipher.  The optional second
             value is specified in seconds and may use any of the units docu‐
             mented in the TIME FORMATS section.  The default value for
             RekeyLimit is “default none”, which means that rekeying is per‐
             formed after the cipher's default amount of data has been sent or
             received and no time based rekeying is done.

     RevokedKeys
             Specifies revoked public keys file, or “none” to not use one.
             Keys listed in this file will be refused for public key authenti‐
             cation.  Note that if this file is not readable, then public key
             authentication will be refused for all users.  Keys may be speci‐
             fied as a text file, listing one public key per line, or as an
             OpenSSH Key Revocation List (KRL) as generated by ssh-keygen(1).
             For more information on KRLs, see the KEY REVOCATION LISTS sec‐
             tion in ssh-keygen(1).

     RhostsRSAAuthentication
             Specifies whether rhosts or /etc/hosts.equiv authentication
             together with successful RSA host authentication is allowed.  The
             default is “no”.  This option applies to protocol version 1 only.

     RSAAuthentication
             Specifies whether pure RSA authentication is allowed.  The
             default is “yes”.  This option applies to protocol version 1
             only.

     ServerKeyBits
             Defines the number of bits in the ephemeral protocol version 1
             server key.  The default and minimum value is 1024.

     StreamLocalBindMask
             Sets the octal file creation mode mask (umask) used when creating
             a Unix-domain socket file for local or remote port forwarding.
             This option is only used for port forwarding to a Unix-domain
             socket file.

             The default value is 0177, which creates a Unix-domain socket
             file that is readable and writable only by the owner.  Note that
             not all operating systems honor the file mode on Unix-domain
             socket files.

     StreamLocalBindUnlink
             Specifies whether to remove an existing Unix-domain socket file
             for local or remote port forwarding before creating a new one.
             If the socket file already exists and StreamLocalBindUnlink is
             not enabled, sshd will be unable to forward the port to the Unix-
             domain socket file.  This option is only used for port forwarding
             to a Unix-domain socket file.

             The argument must be “yes” or “no”.  The default is “no”.

     StrictModes
             Specifies whether sshd(8) should check file modes and ownership
             of the user's files and home directory before accepting login.
             This is normally desirable because novices sometimes accidentally
             leave their directory or files world-writable.  The default is
             “yes”.  Note that this does not apply to ChrootDirectory, whose
             permissions and ownership are checked unconditionally.

     Subsystem
             Configures an external subsystem (e.g. file transfer daemon).
             Arguments should be a subsystem name and a command (with optional
             arguments) to execute upon subsystem request.

             The command sftp-server(8) implements the “sftp” file transfer
             subsystem.

             Alternately the name “internal-sftp” implements an in-process
             “sftp” server.  This may simplify configurations using
             ChrootDirectory to force a different filesystem root on clients.

             By default no subsystems are defined.

     SyslogFacility
             Gives the facility code that is used when logging messages from
             sshd(8).  The possible values are: DAEMON, USER, AUTH, LOCAL0,
             LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7.  The
             default is AUTH.

     TCPKeepAlive
             Указывает, должна ли система отправлять сообщения keepalive TCP на другую сторону. Если они будут отправлены, смерть соединения или
	     сбой одной из машин будет правильно замечена. Однако это означает, что соединения будут умирать, если маршрут будет временно понижен,
	     а некоторые люди находят его раздражающим. С другой стороны, если TCP keepalives не отправляются, сеансы могут бесконечно зависать на
	     сервере, оставляя «призрак» пользователей и потребляя ресурсы сервера.

             По умолчанию “yes” (отправлять сообщения TCP keepalive), и сервер заметит, что сеть отключилась или клиентский компьютер выйдет из
	     строя. Это позволяет избежать бесконечно зависающих сеансов.

             Чтобы отключить сообщения TCP keepalive, значение должно быть установлено 
             “no”.

             Этот вариант ранее назывался KeepAlive.

     TrustedUserCAKeys
             Specifies a file containing public keys of certificate authori‐
             ties that are trusted to sign user certificates for authentica‐
             tion, or “none” to not use one.  Keys are listed one per line;
             empty lines and comments starting with ‘#’ are allowed.  If a
             certificate is presented for authentication and has its signing
             CA key listed in this file, then it may be used for authentica‐
             tion for any user listed in the certificate's principals list.
             Note that certificates that lack a list of principals will not be
             permitted for authentication using TrustedUserCAKeys.  For more
             details on certificates, see the CERTIFICATES section in
             ssh-keygen(1).

     UseDNS  Указывает, должен ли sshd (8) искать имя удаленного хоста и проверять, чтобы разрешенное имя хоста для удаленного IP-адреса
     	     отображалось на тот же самый IP-адрес.

             Если для этой опции установлено значение «no» (по умолчанию), в командах ~ /.ssh/known_hosts и sshd_config Match Host могут
	     использоваться только адреса, а не имена узлов.

     UseLogin
             Указывает, будет ли вход (1) использоваться для интерактивных сеансов входа в систему. По умолчанию «noт». Обратите внимание, что
	     логин (1) никогда не используется для выполнения удаленной команды. Также обратите внимание, что если это разрешено, X11Forwarding
	     будет отключен, потому что login (1) не знает, как обрабатывать файлы cookie xauth (1). Если указано UsePrivilegeSeparation, оно
	     будет отключено после аутентификации.

     UsePAM  Enables the Pluggable Authentication Module interface.  If set to
             “yes” this will enable PAM authentication using
             ChallengeResponseAuthentication and PasswordAuthentication in
             addition to PAM account and session module processing for all
             authentication types.

             Because PAM challenge-response authentication usually serves an
             equivalent role to password authentication, you should disable
             either PasswordAuthentication or ChallengeResponseAuthentication.

             If UsePAM is enabled, you will not be able to run sshd(8) as a
             non-root user.  The default is “no”.

     UsePrivilegeSeparation
             Указывает, разделяет ли sshd (8) привилегии, создавая непривилегированный дочерний процесс для обработки входящего сетевого трафика.
	     После успешной проверки подлинности будет создан другой процесс, который имеет привилегию аутентифицированного пользователя. Цель
	     разделения привилегий состоит в том, чтобы предотвратить эскалацию привилегий путем содержания любой коррупции в непривилегированных
	     процессах. Аргумент должен быть «yes», «no» или «sanbox» песочница. Если для параметра UsePrivilegeSeparation установлено значение
	     «sanbox», тогда для непривилегированного процесса до аутентификации могут быть предусмотрены дополнительные ограничения. По умолчанию
	     используется «песочница».

     VersionAddendum
             Optionally specifies additional text to append to the SSH proto‐
             col banner sent by the server upon connection.  The default is
             “none”.

     X11DisplayOffset
             Specifies the first display number available for sshd(8)'s X11
             forwarding.  This prevents sshd from interfering with real X11
             servers.  The default is 10.

     X11Forwarding
             Specifies whether X11 forwarding is permitted.  The argument must
             be “yes” or “no”.  The default is “no”.

             When X11 forwarding is enabled, there may be additional exposure
             to the server and to client displays if the sshd(8) proxy display
             is configured to listen on the wildcard address (see
             X11UseLocalhost below), though this is not the default.  Addi‐
             tionally, the authentication spoofing and authentication data
             verification and substitution occur on the client side.  The
             security risk of using X11 forwarding is that the client's X11
             display server may be exposed to attack when the SSH client
             requests forwarding (see the warnings for ForwardX11 in
             ssh_config(5)).  A system administrator may have a stance in
             which they want to protect clients that may expose themselves to
             attack by unwittingly requesting X11 forwarding, which can war‐
             rant a “no” setting.

             Note that disabling X11 forwarding does not prevent users from
             forwarding X11 traffic, as users can always install their own
             forwarders.  X11 forwarding is automatically disabled if UseLogin
             is enabled.

     X11UseLocalhost
             Specifies whether sshd(8) should bind the X11 forwarding server
             to the loopback address or to the wildcard address.  By default,
             sshd binds the forwarding server to the loopback address and sets
             the hostname part of the DISPLAY environment variable to
             “localhost”.  This prevents remote hosts from connecting to the
             proxy display.  However, some older X11 clients may not function
             with this configuration.  X11UseLocalhost may be set to “no” to
             specify that the forwarding server should be bound to the wild‐
             card address.  The argument must be “yes” or “no”.  The default
             is “yes”.

     XAuthLocation
             Specifies the full pathname of the xauth(1) program, or “none” to
             not use one.  The default is /usr/bin/xauth.

TIME FORMATS
     sshd(8) command-line arguments and configuration file options that spec‐
     ify time may be expressed using a sequence of the form: time[qualifier],
     where time is a positive integer value and qualifier is one of the fol‐
     lowing:

           ⟨none⟩  seconds
           s | S   seconds
           m | M   minutes
           h | H   hours
           d | D   days
           w | W   weeks

     Each member of the sequence is added together to calculate the total time
     value.

     Time format examples:

           600     600 seconds (10 minutes)
           10m     10 minutes
           1h30m   1 hour 30 minutes (90 minutes)

FILES
     /etc/ssh/sshd_config
             Contains configuration data for sshd(8).  This file should be
             writable by root only, but it is recommended (though not neces‐
             sary) that it be world-readable.

SEE ALSO
     sshd(8)

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre‐
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.  Niels Provos and Markus Friedl contributed support
     for privilege separation.

BSD                            February 17, 2016                           BSD
