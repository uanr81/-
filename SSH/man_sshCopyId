SSH-COPY-ID(1)            BSD General Commands Manual           SSH-COPY-ID(1)

NAME
     ssh-copy-id — use locally available keys to authorise logins on a remote
     machine

SYNOPSIS
     ssh-copy-id [-f] [-n] [-i [identity_file]] [-p port] [-o ssh_option]
                 [user@]hostname
     ssh-copy-id -h | -?

DESCRIPTION
     ssh-copy-id - это скрипт, который использует ssh (1) для входа в удаленную машину (предположительно, используя пароль для входа в систему,
     поэтому аутентификация пароля должна быть включена, если только вы не использовали какое-то умное использование нескольких идентификаторов).
     Он собирает список из одного или нескольких отпечатков пальцев (как описано ниже) и пытается войти в систему с каждым ключом, чтобы узнать,
     установлены ли какие-либо из них (конечно, если вы не используете ssh-agent (1), это может привести к в котором вы неоднократно запрашивали
     профайлы). Затем он собирает список тех, кто не смог войти в систему, и используя ssh, разрешает логины с этими ключами на удаленном сервере.
     По умолчанию он добавляет ключи, добавляя их к файлам ~ / .ssh / authorized_key удаленного пользователя (при необходимости создавая файл и
     каталог). Он также способен обнаруживать, является ли удаленная система NetScreen, и вместо этого использует свою команду set ssh pka-dsa ....

     Возможные варианты::

     -i identity_file
             Используйте только ключ (ы), содержащийся в файле identity_file (вместо поиска идентификаторов через ssh-add (1) или в файле
	     default_ID_file). Если имя файла не заканчивается на .pub, это добавляется. Если имя файла опущено, используется файл default_ID_file.

             Обратите внимание, что это можно использовать, чтобы гарантировать, что скопированные ключи имеют предпочтительный комментарий
	     и / или дополнительные параметры, гарантируя, что файл ключа имеет эти настройки как предпочтительные до попытки копирования.

     -f      Принудительный режим: не проверяет наличие ключей на удаленном сервере. Это означает, что ему не нужен секретный ключ. Конечно,
     	     это может привести к более чем одной копии ключа, установленного в удаленной системе.

     -n      сделать сухой пробег. Вместо того, чтобы устанавливать ключи на удаленной системе, просто печатается ключ (ы), который был бы
     	     установлен.

     -h, -?  Сводка использования печати

     -p port, -o ssh_option
             Эти два параметра просто передаются без изменений вместе с их аргументом, чтобы можно было установить порт или другие параметры
	     ssh (1), соответственно.

             Вместо того, чтобы указывать их как параметры командной строки, часто лучше использовать (для каждого узла) настройки в файле
	     конфигурации ssh (1): ssh_config (5).

     Поведение по умолчанию без -i заключается в том, чтобы проверить, имеет ли 'ssh-add -L' любой вывод, и если эти ключи используются.
     Обратите внимание, что это приводит к комментарию к ключу, являющемуся именем файла, которое было присвоено ssh-add (1), когда ключ был
     загружен в ваш ssh-agent (1), а не комментарий, содержащийся в этом файле, который является бит позора. В противном случае, если ssh-add (1)
     не предоставляет ключей, будет использоваться содержимое файла default_ID_file.

     Файл default_ID_file - это самый последний файл, который соответствует: ~ /.ssh/id* .pub (за исключением тех, которые соответствуют
     ~/.ssh/*-cert.pub), поэтому, если вы создаете ключ, который не тот, который вы хотите, ssh-copy-id для использования, просто используйте
     touch (1) в файле .pub вашего предпочитаемого ключа, чтобы восстановить его как самое последнее.

EXAMPLES
     Если вы уже установили ключи из одной системы на большом количестве удаленных хостов, а затем создаете новый ключ на новом клиентском
     компьютере, скажем, может быть сложно отслеживать, в каких системах, на которых вы установили новый ключ. Один из способов борьбы с этим
     - загрузить как новый ключ, так и старый ключ (ы) в свой ssh-agent (1). Сначала загрузите новый ключ без опции -c, затем загрузите один или
     несколько старых ключей в агент, возможно, используя ssh-ing на клиентской машине с этим старым ключом, используя параметр -A, чтобы
     разрешить пересылку агента:

           user@newclient$ ssh-add
           user@newclient$ ssh -A old.client
           user@oldl$ ssh-add -c
           ... prompt for pass-phrase ...
           user@old$ logoff
           user@newclient$ ssh someserver

     теперь, если новый ключ установлен на сервере, вам будет разрешено работать без ограничений, тогда как если вы включите только старый
     ключ (ы), вас попросят подтвердить, что является вашей репликой для выхода из системы и бег

           user@newclient$ ssh-copy-id -i someserver

     Причина, по которой вы, возможно, захотите указать опцию -i в этом случае, должна гарантировать, что комментарий к установленному ключу
     является тем, который был указан из файла .pub, а не только имя файла, загруженного в ваш агент. Он также гарантирует, что установлен только
     тот идентификатор, который вы планируете, а не все ключи, которые у вас есть в вашем ssh-agent (1). Конечно, вы можете указать другой
     идентификатор или использовать содержимое ssh-agent (1) по своему усмотрению.

     Если вы упомянули параметр -c ssh-add (1), вы можете использовать это при каждом использовании перенаправления агентов, чтобы избежать
     захвата вашего ключа, но гораздо лучше использовать вместо этого параметр sxy (1) ProxyCommand и -W, отказываться от удаленных серверов,
     всегда проводя прямую сквозную аутентификацию. Таким образом, средний прыжок (ы) не получает доступ к вашему ssh-agent (1). Веб-поиск
     «ssh proxycommand nc» должен стать просветительским (N.B., современный подход заключается в использовании опции -W, а не nc (1)).

SEE ALSO
     ssh(1), ssh-agent(1), sshd(8)

BSD                              June 17, 2010                             BSD
