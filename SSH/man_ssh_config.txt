SSH_CONFIG(5)               BSD File Formats Manual              SSH_CONFIG(5)

NAME
     ssh_config — Файлы конфигурации клиента OpenSSH SSH

SYNOPSIS
     ~/.ssh/config
     /etc/ssh/ssh_config

DESCRIPTION
     ssh (1) получает данные конфигурации из следующих источников в следующем порядке:

           1.   опции командной строки
           2.   пользовательский конфигурационный файл (~/.ssh/config)
           3.   системный файл конфигурации (/etc/ssh/ssh_config)

     Для каждого параметра будет использовано первое полученное значение. Файлы конфигурации содержат разделы, разделенные спецификациями «Хост»,
     и этот раздел применяется только для хостов, которые соответствуют одному из шаблонов, указанных в спецификации. Соответствующее имя хоста,
     как правило, указано в командной строке (см. Параметр CanonicalizeHostname для исключений).

     Так как первое полученное значение для каждого параметра используется, в начале файла должно быть указано большее количество специфичных для
     хоста деклараций и общие значения по умолчанию в конце.

     Обратите внимание, что пакет Debian openssh-client устанавливает несколько параметров в стандартном файле /etc/ssh/ssh_config, которые не
     являются значениями по умолчанию в ssh(1):

           ·   SendEnv LANG LC_*
           ·   HashKnownHosts yes
           ·   GSSAPIAuthentication yes

     Файл конфигурации имеет следующий формат:

     Пустые строки и строки, начинающиеся с '#', являются комментариями. В противном случае строка имеет формат «аргументы ключевого слова».
     Параметры конфигурации могут быть разделены пробельными или необязательными пробелами и точно одним «=»; полный формат полезен, чтобы избежать
     необходимости указывать пробелы при указании параметров конфигурации с использованием опции ssh, scp и sftp -o. Аргументы могут быть
     необязательно заключены в двойные кавычки (") для представления аргументов, содержащих пробелы.

     Возможные ключевые слова и их значения следующие (обратите внимание, что ключевые слова не чувствительны к регистру, а аргументы
     чувствительны к регистру):

     Host    Ограничивает следующие объявления (вплоть до следующего ключевого слова Host или Match) только для тех хостов, которые соответствуют
     	     одному из шаблонов, заданных после ключевого слова. Если предусмотрено более одного шаблона, они должны быть разделены пробелом.
	     Единый «*» в качестве шаблона может использоваться для обеспечения глобальных значений по умолчанию для всех хостов. Хост обычно
	     является аргументом имени хоста, указанным в командной строке (см. Параметр CanonicalizeHostname для исключений).

             Запись шаблона может быть сведена путем префикса с помощью знака exclama-mark ('!'). Если сопоставлена ​​отрицательная запись, то
	     запись узла игнорируется, независимо от того, соответствуют ли любые другие шаблоны в строке. Поэтому отклоненные соответствия
	     полезны для предоставления исключений для подстановочных матчей.

             См. PATTERNS для получения дополнительной информации о шаблонах.

     Match   Ограничивает следующие объявления (до следующего ключевого слова Host или Match), которые будут использоваться только тогда, когда
     	     выполняются условия, следующие за ключевым словом Match. Условия соответствия задаются с использованием одного или нескольких
	     критериев или единственного токена, который всегда совпадает. Ключевыми критериями доступны ключевые слова: canonical, exec, host,
	     originalhost, user и localuser. Все критерии должны появляться в одиночку или сразу после канонического. Другие критерии могут быть
	     объединены произвольно. Все критерии, кроме всех и канонические, требуют аргумента. Критерии могут быть отменены путем добавления
	     восклицательного знака ('!').

             Каноническое ключевое слово соответствует только тогда, когда файл конфигурации повторно обрабатывается после канонизации канонизации
	     хоста (см. Параметр CanonicalizeHostname.) Это может быть полезно указать условия, которые работают только с именами канонических
	     хостов. Ключевое слово exec выполняет указанную команду под оболочкой пользователя. Если команда возвращает нулевой статус выхода,
	     условие считается истинным. Команды, содержащие пробельные символы, должны быть указаны. Следующие последовательности символов в
	     команде будут расширены до выполнения: «% L» будет заменен первым компонентом имени локального хоста, «% l» будет заменен именем
	     локального хоста (включая любое доменное имя), «% h» будет заменено целевым именем хоста, «% n» будет заменено исходным целевым именем
	     хоста, указанным в командной строке, «% p» порта назначения, «% r» удаленным именем входа в систему , и '% u' - имя пользователя
	     пользователя, запускающего ssh (1).

             Критерии других ключевых слов должны быть одиночными или разделенными запятыми списками и могут использовать операторы подстановочных
	     знаков и отрицаний, описанные в разделе PATTERNS. Критерии для ключевого слова хоста сопоставляются с целевым именем хоста, после
	     любой подзадачи по параметрам Hostname или CanonicalizeHostname. Ключевое слово originalhost сопоставляется с именем хоста, как это
	     было указано в командной строке. Ключевое слово пользователя совпадает с целевым именем пользователя на удаленном хосте. Ключевое
	     слово localuser совпадает с именем локального пользователя, выполняющего ssh (1) (это ключевое слово может быть полезно в
	     общесистемных файлах ssh_config).

     AddKeysToAgent
             Указывает, следует ли автоматически добавлять ключи к запущенному ssh-agent (1). Если для этой опции установлено значение «да», и
	     ключ загружается из файла, ключ и его парольная фраза добавляются к агенту со временем жизни по умолчанию, как если бы ssh-add (1).
	     Если для этой опции задано значение «спросить», ssh потребует подтверждения с помощью программы SSH_ASKPASS перед добавлением ключа
	     (см. Ssh-add (1) для деталей). Если для этой опции установлено значение «подтвердить», каждое использование ключа должно быть
	     подтверждено, как если бы параметр -c был указан для ssh-add (1). Если для этой опции установлено значение «нет», к агенту не
	     добавляются ключи. Аргумент должен быть «да», «подтвердить», «спросить» или «нет». По умолчанию «нет».

     AddressFamily
             Указывает, какое семейство адресов следует использовать при подключении. Допустимыми аргументами являются «any», «inet» (только для
	     IPv4) или «inet6» (только для IPv6). Значение по умолчанию - «любое».

     BatchMode
             Если установлено «да», запрос парольной фразы / пароля будет отключен. Кроме того, по умолчанию параметр ServerAliveInterval будет
	     установлен на 300 секунд. Эта опция полезна в сценариях и других пакетных заданиях, где нет пользователя, чтобы предоставить пароль,
	     и где желательно быстро обнаружить поврежденную сеть. Аргумент должен быть «да» или «нет». По умолчанию «нет».

     BindAddress
             Используйте указанный адрес на локальном компьютере в качестве исходного адреса соединения. Полезен только для систем с более чем
	     одним адресом. Обратите внимание, что этот параметр не работает, если UsePrivilegedPort установлен на «yes».

     CanonicalDomains
             Когда включена функция CanonicalizeHostname, эта опция указывает список суффиксов домена, в которых выполняется поиск указанного
	     узла назначения.

     CanonicalizeFallbackLocal
             Указывает, следует ли сбой с ошибкой при отказе канонизации хоста. По умолчанию «да» попытается найти неквалифицированное имя хоста,
	     используя правила поиска системного распознавателя. Значение «no» приведет к сбою ssh (1) немедленно, если включена функция
	     CanonicalizeHostname и имя целевого узла не может быть найдено ни в одном из доменов, указанных в CanonicalDomains.

     CanonicalizeHostname
             Контролирует, выполняется ли канонизация. По умолчанию «no» не выполняет перезаписи имен и позволяет системному resolver обрабатывать
	     все запросы хостов. Если установлено «да», то для подключений, которые не используют ProxyCommand, ssh (1) попытается канонизировать
	     имя хоста, указанное в командной строке, используя суффиксы CanonicalDomains и CanonicalizePermittedCNAME. Если для параметра
	     CanonicalizeHostname установлено значение «always», то к прокси-соединениям применяется также канонизация.

             Если этот параметр включен, то файлы конфигурации снова обрабатываются с использованием нового целевого имени для получения любой
	     новой конфигурации в соответствии с строками Host и Match.

     CanonicalizeMaxDots
             Указывает максимальное число символов точек в имени хоста до того, как канонизация будет отключена. Значение по умолчанию «1»
	     позволяет использовать одну точку (то есть имя хоста. Домен).

     CanonicalizePermittedCNAMEs
             Определяет правила для определения того, следует ли следовать CNAME при канонизации имен хостов. Правила состоят из одного или
	     нескольких аргументов source_domain_list: target_domain_list, где source_domain_list - это список шаблонов доменов, которые могут
	     следовать за CNAME в канонизации, а target_domain_list - список шаблонов доменов, к которым они могут обратиться.

             Например, «* .a.example.com: * .b.example.com, *. C.example.com» позволит именам хостов, сопоставляющим «* .a.example.com»,
	     канонизировать с именами в Домены "* .b.example.com" или "* .c.example.com".

     CertificateFile
             Указывает файл, из которого считывается сертификат пользователя. Соответствующий секретный ключ должен быть предоставлен отдельно,
	     чтобы использовать этот сертификат либо из директивы IdentityFile, либо -i для ssh (1), через ssh-agent (1) или через PKCS11Provider.

             Имя файла может использовать синтаксис тильды для ссылки на домашний каталог пользователя или один из следующих escape-символов:
	     «% d» (домашний каталог локального пользователя), «% u» (локальное имя пользователя), «% l» (локальный имя хоста), '% h' (имя
	     удаленного хоста) или '% r' (имя удаленного пользователя).

             В файлах конфигурации может быть указано несколько файлов сертификатов; эти сертификаты будут проверяться последовательно. Несколько
	     директив CertificateFile добавят в список сертификатов, используемых для аутентификации.

     ChallengeResponseAuthentication
             Указывает, следует ли использовать аутентификацию с запросом-ответом. Аргумент этого ключевого слова должен быть «yes» или «no».
	     Значение по умолчанию - «yes».

     CheckHostIP
             Если для этого флага установлено значение «yes», ssh (1) дополнительно проверит IP-адрес хоста в файле known_hosts. Это позволяет ssh
	     определять, изменился ли ключ хоста из-за подмены DNS и добавит адреса хостов назначения в ~/.ssh/known_hosts в процессе,
	     независимо от настройки StrictHostKeyChecking. Если для параметра установлено значение «нет», проверка не будет выполнена. Значение
	     по умолчанию - «yes».

     Cipher  Указывает шифр, используемый для шифрования сеанса в протоколе версии 1. В настоящее время поддерживаются «blowfish», «3des» и «des».
     	     des поддерживается только в клиенте ssh (1) для взаимодействия с устаревшими реализациями протокола 1, которые не поддерживают
	     шифрование 3des. Его использование сильно обескуражено из-за криптографических слабостей. По умолчанию используется «3des».

     Ciphers
             Указывает шифры, разрешенные для протокола версии 2, в порядке предпочтения. Множественные шифры должны быть разделены запятыми.
	     Если указанное значение начинается с символа «+», то указанные шифры будут добавляться к набору по умолчанию вместо их замены.

             Поддерживаемые шифры:

                   3des-cbc
                   aes128-cbc
                   aes192-cbc
                   aes256-cbc
                   aes128-ctr
                   aes192-ctr
                   aes256-ctr
                   aes128-gcm@openssh.com
                   aes256-gcm@openssh.com
                   arcfour
                   arcfour128
                   arcfour256
                   blowfish-cbc
                   cast128-cbc
                   chacha20-poly1305@openssh.com

             По умолчанию используется:

                   chacha20-poly1305@openssh.com,
                   aes128-ctr,aes192-ctr,aes256-ctr,
                   aes128-gcm@openssh.com,aes256-gcm@openssh.com,
                   aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc

             Список доступных шифров также может быть получен с использованием опции -Q для ssh (1) с аргументом «cipher».

     ClearAllForwardings
             Указывает, что удаляются все локальные, удаленные и динамические пересылки портов, указанные в файлах конфигурации или в командной
	     строке. Этот параметр в первую очередь полезен при использовании из командной строки ssh (1) для очистки пересылок портов, заданных в
	     файлах конфигурации, и автоматически устанавливается с помощью scp (1) и sftp (1). Аргумент должен быть «yes» или «no». По умолчанию
	     «no».

     Compression
             Указывает, следует ли использовать сжатие. Аргумент должен быть «yes» или «no». По умолчанию «no».

     CompressionLevel
             Указывает уровень сжатия, который будет использоваться, если включено сжатие. Аргумент должен быть целым числом от 1 (быстрый) до 9
	     (медленным, лучшим). Уровень по умолчанию - 6, что подходит для большинства приложений. Значение значений такое же, как в gzip (1).
	     Обратите внимание, что этот параметр применяется только к протоколу версии 1.

     ConnectionAttempts
             Указывает количество попыток (одна секунда), которые необходимо выполнить перед выходом. Аргумент должен быть целым числом. Это может
	     быть полезно в сценариях, если соединение иногда терпит неудачу. По умолчанию используется значение 1.

     ConnectTimeout
             Задает тайм-аут (в секундах), используемый при подключении к SSH-серверу, вместо использования тайм-аута TCP по умолчанию. Это
	     значение используется только тогда, когда цель недоступна или действительно недоступна, а не когда она отказывается от соединения.

     ControlMaster
             Включает совместное использование нескольких сеансов по одному сетевому соединению. Если установлено «да», ssh (1) будет прослушивать
	     соединения на гнезде управления, указанном с помощью аргумента ControlPath. Дополнительные сеансы могут подключаться к этому сокету с
	     использованием того же элемента управления ControlPath с ControlMaster, установленного в «no» (по умолчанию). Эти сеансы будут
	     пытаться повторно использовать сетевое подключение основного экземпляра, а не инициировать новые, но будут возвращаться к обычному
	     подключению, если сокет управления не существует или не прослушивается.

             Установка этого параметра на «ask» приведет к тому, что ssh прослушивает управляющие соединения, но требует подтверждения с помощью
	     ssh-askpass (1). Если ControlPath не может быть открыт, ssh будет продолжаться без подключения к мастер-экземпляру.

             Транслирование X11 и ssh-agent (1) поддерживается этими мультиплексированными соединениями, однако перенаправленный дисплей и агент
	     будут принадлежать к основному соединению, то есть невозможно отправить несколько дисплеев или агентов.

             Два дополнительных параметра допускают оппортунистическое мультиплексирование: попробуйте использовать главное соединение, но
	     отпустите его, чтобы создать новый, если он еще не существует. Этими параметрами являются: «авто» и «автозапуск». Последнее требует
	     подтверждения, как опция «askь».

     ControlPath
             Укажите путь к гнезду управления, используемому для соединения, как описано в разделе ControlMaster выше, или строке «none», чтобы
	     отключить совместное использование. В пути «% L» будет заменен первым компонентом локального имени узла, «% l» будет заменен на имя
	     локального хоста (включая любое доменное имя), «% h» будет заменено целевым имя хоста, «% n» будет заменено исходным целевым именем
	     хоста, указанным в командной строке, «%p» - порт назначения, «%r» - имя пользователя удаленного входа, «%u» - имя пользователя и
	     «%i'с помощью идентификатора пользователя (uid) пользователя, запускающего ssh (1), и «% C» хешем конкатенации:% l% h% p% r.
	     Рекомендуется, чтобы любой ControlPath, используемый для совместного использования оппортунистических соединений, включал по крайней
	     мере %h,%p и%r (или, альтернативно,%C) и помещался в каталог, который не доступен для записи другими пользователями. Это
	     гарантирует, что общие соединения уникально идентифицированы.

     ControlPersist
             При использовании в сочетании с ControlMaster указывает, что основное соединение должно оставаться открытым в фоновом режиме (ожидая
	     будущих клиентских подключений) после того, как начальное соединение с клиентом было закрыто. Если установлено значение «нет»,
	     основное соединение не будет помещено в фоновое изображение и будет закрываться, как только начальное соединение с клиентом будет
	     закрыто. Если установлено «yes» или «0», основное соединение будет оставаться в фоновом режиме неограниченно (до тех пор, пока не
	     будет убито или закрыто с помощью механизма, такого как опция ssh (1) «-O exit»). Если установлено значение времени в секундах или
	     время в любом из форматов, задокументированных в sshd_config (5), то основное соединение будет автоматически завершено после того,
	     как оно останется бездействующим (без подключения клиента) в течение указанного времени.

     DynamicForward
             Указывает, что TCP-порт на локальном компьютере должен быть переадресован по защищенному каналу, а затем протокол приложения
	     используется для определения того, где можно подключиться с удаленного компьютера.

             Аргументом должен быть порт [bind_address:]. Адреса IPv6 могут быть указаны путем размещения адресов в квадратных скобках. По
	     умолчанию локальный порт привязан в соответствии с настройкой GatewayPorts. Однако для привязки соединения к определенному адресу
	     может использоваться явный bind_address. Ссылка bind_address «localhost» указывает, что порт прослушивания должен быть привязан
	     только для локального использования, а пустой адрес или «*» означает, что порт должен быть доступен со всех интерфейсов.

             В настоящее время поддерживаются протоколы SOCKS4 и SOCKS5, а ssh (1) будет выступать в качестве сервера SOCKS. Можно указать
	     несколько пересылок, и в командной строке могут быть указаны дополнительные пересылки. Только суперпользователь может пересылать
	     привилегированные порты.

     EnableSSHKeysign
             Установка этой опции в «yes» в глобальном файле конфигурации клиента /etc/ssh/ssh_config позволяет использовать вспомогательную
	     программу ssh-keysign (8) во время HostbasedAuthentication. Аргумент должен быть «да» или «нет». По умолчанию «нет». Этот параметр
	     должен быть помещен в раздел, не относящийся к узлу. См. Ssh-keysign (8) для получения дополнительной информации.

     EscapeChar
             Устанавливает escape-символ (по умолчанию: '~'). Эквивалентный символ также можно установить в командной строке. Аргумент должен быть
	     единственным символом, '^', за которым следует буква, или "none", чтобы полностью отключить escape-символ (делая прозрачным
	     соединение для двоичных данных).

     ExitOnForwardFailure
             Указывает, должен ли ssh (1) прекратить соединение, если он не может настроить все запрошенные динамические, туннельные, локальные и
	     удаленные пересылки портов (например, если какой-либо конец не может связываться и не указывать на указанном порту). Обратите
	     внимание, что ExitOnForwardFailure не применяется к соединениям, выполняемым через переадресацию портов, и, например, не приведет к
	     выходу ssh (1), если сбой TCP-соединений с конечным адресатом переадресации. Аргумент должен быть «yes» или «no». По умолчанию «no».

     FingerprintHash
             Определяет хэш-алгоритм, используемый при отображении отпечатков пальцев. Возможны следующие варианты: «md5» и «sha256». По умолчанию
	     используется «sha256».

     ForwardAgent
             Указывает, будет ли соединение с агентом проверки подлинности (если оно есть) перенаправляться на удаленный компьютер. Аргумент
	     должен быть «yes» или «no». По умолчанию «no».

             Переадресацию агента следует активировать с осторожностью. Пользователи, имеющие возможность обойти права доступа к файлу на
	     удаленном хосте (для сокета Unix-домена агента), могут получить доступ к локальному агенту через перенаправленное соединение.
	     Злоумышленник не может получить ключевой материал от агента, однако он может выполнять операции над ключами, которые позволяют им
	     аутентифицироваться, используя идентификаторы, загруженные в агент.

     ForwardX11
             Указывает, будут ли переключатели X11 автоматически перенаправляться по защищенному каналу и установить DISPLAY. Аргумент должен быть
	     «yes» или «no». По умолчанию «no».

             Пересылку X11 следует активировать с осторожностью. Пользователи, имеющие возможность обойти права доступа к файлу на удаленном хосте
	     (для базы данных авторизации пользователя X11), могут получить доступ к локальному дисплею X11 через перенаправленное соединение.
	     Затем злоумышленник может выполнять такие действия, как мониторинг нажатия клавиш, если включена опция ForwardX11Trusted.

     ForwardX11Timeout
             Укажите тайм-аут ненадежной пересылки X11, используя формат, описанный в разделе TIME FORMATS sshd_config (5). Соединения X11,
	     полученные ssh(1) после этого времени, будут отклонены. По умолчанию отключена ненадежная переадресация X11 по истечении 20 минут.

     ForwardX11Trusted
             Если для этой опции установлено значение «yes», удаленные клиенты X11 будут иметь полный доступ к исходному дисплею X11.

             Если для этой опции установлено значение «no», удаленные клиенты X11 будут считаться ненадежными и не могут быть украдены или
	     фальсифицированы данными, принадлежащими доверенным клиентам X11. Кроме того, токен xauth (1), используемый для сеанса, истекает
	     через 20 минут. Удаленным клиентам будет отказано в доступе после этого времени.

             По умолчанию используется «yes» (зависит от типа Debian).

             См. Спецификацию расширения X11 SECURITY для получения полной информации об ограничениях, наложенных на ненадежных клиентов.

     GatewayPorts
             Указывает, разрешено ли удаленным хостам подключаться к локальным пересылаемым портам. По умолчанию ssh(1) связывает локальные
	     переадресации портов с адресом обратной связи. Это предотвращает подключение других удаленных хостов к перенаправленным портам.
	     GatewayPorts можно использовать для указания того, что ssh должен связывать локальные переадресации портов с подстановочным адресом,
	     что позволяет удаленным узлам подключаться к перенаправленным портам. Аргумент должен быть «yes» или «no». По умолчанию «no».

     GlobalKnownHostsFile
             Указывает один или несколько файлов, которые будут использоваться для глобальной базы данных ключа хоста, разделенные пробелами. По
	     умолчанию используется файл /etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.

     GSSAPIAuthentication
             Указывает, разрешена ли аутентификация пользователя на основе GSSAPI. По умолчанию «no».

     GSSAPIKeyExchange
             Указывает, может ли использоваться обмен ключами на основе GSSAPI. При использовании обмена ключами GSSAPI сервер не должен иметь
	     ключ хоста. По умолчанию «no».

     GSSAPIClientIdentity
             Если установлено, задает идентификатор клиента GSSAPI, который ssh ​​должен использовать при подключении к серверу. Значение по
	     умолчанию не установлено, что означает, что будет использоваться идентификатор по умолчанию.

     GSSAPIServerIdentity
             Если установлено, задает идентификатор сервера GSSAPI, который ssh ​​должен ожидать при подключении к серверу. Значение по умолчанию
	     не установлено, что означает, что ожидаемый идентификатор сервера GSSAPI будет определен из целевого имени хоста.

     GSSAPIDelegateCredentials
             Передать (делегировать) учетные данные серверу. По умолчанию «no».

     GSSAPIRenewalForcesRekey
             Если установлено «да», то обновление учетных данных GSSAPI клиента приведет к повторному подключению ssh-соединения. С совместимым
	     сервером это может делегировать обновленные учетные данные сеансу на сервере. По умолчанию «no».

     GSSAPITrustDns
             Установите «да», чтобы указать, что DNS доверяет безопасному каноническому назначению имени подключаемого узла. Если «нет», имя
	     хоста, введенное в командной строке, будет передано в библиотеку GSSAPI нетронутой. По умолчанию «нет».

     HashKnownHosts
             Указывает, что ssh (1) должен содержать имена и адреса хостов-хостов, когда они добавляются в ~/.ssh/known_hosts. Эти хэшированные
	     имена могут использоваться обычно с помощью ssh (1) и sshd (8), но они не раскрывают идентификационную информацию, если содержимое
	     файла будет раскрыто. По умолчанию «нет». Обратите внимание, что существующие имена и адреса в файлах известных хостов не будут
	     преобразованы автоматически, но могут быть хэшированы с использованием ssh-keygen (1). Использование этой опции может привести к
	     поломке таких объектов, как табуляция, которая полагается на возможность считывать неигровые имена хостов из ~ / .ssh / known_hosts.

     HostbasedAuthentication
             Указывает, следует ли проверять аутентификацию на основе rhosts с помощью проверки подлинности с открытым ключом. Аргумент должен
	     быть «yes» или «no». По умолчанию «no».

     HostbasedKeyTypes
             Указывает типы ключей, которые будут использоваться для аутентификации на основе хоста в виде списка шаблонов, разделенных запятыми.
	     Альтернативно, если указанное значение начинается с символа «+», то указанные типы ключей будут добавляться к набору по умолчанию
	     вместо их замены. По умолчанию для этой опции:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             Параметр -Q для ssh (1) может использоваться для перечисления поддерживаемых типов ключей.

     HostKeyAlgorithms
             Указывает алгоритмы ключа хоста, которые клиент хочет использовать в порядке предпочтения. Альтернативно, если указанное значение
	     начинается с символа '+', то указанные типы ключей будут добавлены к набору по умолчанию вместо их замены. По умолчанию для этой
	     опции:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             Если имена хостов известны хосту назначения, то это значение по умолчанию изменяется, чтобы предпочесть их алгоритмы.

             Список доступных типов ключей также может быть получен с использованием опции -Q для ssh (1) с аргументом «ключ».

     HostKeyAlias
             Определяет псевдоним, который следует использовать вместо реального имени хоста при поиске или сохранении ключа хоста в файлах базы
	     данных основного ключа. Этот параметр полезен для туннелирования соединений SSH или для нескольких серверов, работающих на одном
	     хосте.

     HostName
             Задает имя реального хоста для входа в систему. Это можно использовать для указания псевдонимов или аббревиатур для хостов. Если имя
	     хоста содержит последовательность символов «% h», то это будет заменено именем узла, указанным в командной строке (это полезно для
	     управления неквалифицированными именами). Последовательность символов «%%» будет заменена одним символом «%», который может
	     использоваться при указании локальных адресов ссылок IPv6.

             По умолчанию используется имя, указанное в командной строке. Также разрешены числовые IP-адреса (как в командной строке, так и в
	     спецификациях HostName).

     IdentitiesOnly
             Указывает, что ssh (1) должен использовать только файлы удостоверения подлинности и файлы сертификатов, явно настроенные в файлах
	     ssh_config или переданные в командной строке ssh (1), даже если ssh-agent (1) или PKCS11Provider предлагает больше идентификаторов.
	     Аргумент этого ключевого слова должен быть «да» или «нет». Эта опция предназначена для ситуаций, где ssh-agent предлагает множество
	     разных идентификаторов. По умолчанию «no».

     IdentityFile
             Указывает файл, с которого считывается идентификатор аутентификации пользователя DSA, ECDSA, Ed25519 или RSA. По умолчанию
	     используется протокол ~/.ssh/identity для протокола версии 1 и ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 и ~ /.ssh/id_rsa для
	     протокола версии 2. Кроме того, любые идентификаторы, представленные агентом аутентификации, будут использоваться для аутентификации,
	     если не установлен IdentitiesOnly. Если сертификаты явно не указаны в CertificateFile, ssh (1) попытается загрузить информацию
	     сертификата из файла, полученного путем добавления -cert.pub к пути к указанному IdentityFile.

             Имя файла может использовать синтаксис тильды для ссылки на домашний каталог пользователя или один из следующих escape-символов:
	     «%d» (домашний каталог локального пользователя), «%u» (локальное имя пользователя), «%l» (локальный имя хоста), '%h' (имя
	     удаленного хоста) или '%r' (имя удаленного пользователя).

             В конфигурационных файлах может быть указано несколько файлов идентификаторов; все эти тождества будут проверяться последовательно.
	     Несколько директив IdentityFile добавят список проверенных идентификаторов (это поведение отличается от других директив конфигурации).

             IdentityFile может использоваться совместно с IdentitiesOnly, чтобы выбрать, какие идентификаторы в агенте предлагаются во время
	     аутентификации. IdentityFile также может использоваться вместе с CertificateFile, чтобы предоставить любой сертификат, также
	     необходимый для аутентификации с идентификатором.

     IgnoreUnknown
             Задает список шаблонов неизвестных опций, которые следует игнорировать, если они встречаются при синтаксическом анализе конфигурации.
	     Это может использоваться для подавления ошибок, если ssh_config содержит параметры, которые не распознаются ssh (1). Рекомендуется,
	     чтобы IgnoreUnknown был указан в начале файла конфигурации, поскольку он не будет применяться к неизвестным параметрам, которые
	     появляются перед ним.

     IPQoS   Указывает класс типа обслуживания IPv4 или класс DSCP для соединений. Принятые значения: «af11», «af12», «af13», «af21», «af22»,
     	     «af23», «af31», «af32», «af33», «af41», «af42», «af43», , Cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7, ef, lowdelay, числовое значение.
	     Этот параметр может принимать один или два аргумента, разделенных пробелом. Если указан один аргумент, он используется как класс
	     пакета безоговорочно. Если указаны два значения, первый выбирается автоматически для интерактивных сеансов, а второй - для
	     неинтерактивных сеансов. По умолчанию используется «lowdelay» для интерактивных сеансов и «пропускная способность» для
	     неинтерактивных сеансов.

     KbdInteractiveAuthentication
             Указывает, следует ли использовать интерактивную проверку клавиатуры. Аргумент этого ключевого слова должен быть «yes» или «no».
	     Значение по умолчанию - «yes».

     KbdInteractiveDevices
             Указывает список методов, используемых при интерактивной аутентификации клавиатуры. Несколько имен методов должны разделяться
	     запятыми. По умолчанию используется список, указанный сервером. Доступные методы зависят от того, что поддерживает сервер. Для
	     сервера OpenSSH это может быть ноль или более: «bsdauth», «pam» и «skey».

     KexAlgorithms
             Указывает доступные алгоритмы KEX (Key Exchange). Множественные алгоритмы должны быть разделены запятыми. Альтернативно, если
	     указанное значение начинается с символа «+», то указанные методы будут добавляться к набору по умолчанию вместо их замены. По
	     умолчанию:

                   curve25519-sha256@libssh.org,
                   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
                   diffie-hellman-group-exchange-sha256,
                   diffie-hellman-group-exchange-sha1,
                   diffie-hellman-group14-sha1

             Список доступных алгоритмов обмена ключами также можно получить, используя параметр -Q для ssh(1) с аргументом «kex».

     LocalCommand
             Указывает команду для выполнения на локальном компьютере после успешного подключения к серверу. Командная строка продолжается до
	     конца строки и выполняется с помощью оболочки пользователя. Будут выполняться следующие замены escape-символов: «% d» (домашний
	     каталог локального пользователя), «% h» (имя удаленного хоста), «% l» (имя локального хоста), «% n» (имя хоста, как указано в
	     командной строки), «% p» (удаленный порт), «% r» (имя удаленного пользователя) или «% u» (локальное имя пользователя) или «% C»
	     хешем конкатенации:% l% h% р% г.

             Команда запускается синхронно и не имеет доступа к сеансу ssh (1), который породил ее. Он не должен использоваться для интерактивных
	     команд.

             Эта директива игнорируется, если PermitLocalCommand не включен.

     LocalForward
             Указывает, что TCP-порт на локальном компьютере будет перенаправлен по защищенному каналу на указанный хост и порт с удаленного
	     компьютера. Первым аргументом должен быть порт [bind_address:], а вторым аргументом должен быть host: hostport. Адреса IPv6 могут
	     быть указаны путем размещения адресов в квадратных скобках. Можно указать несколько пересылок, и в командной строке могут быть
	     указаны дополнительные пересылки. Только суперпользователь может перенаправлять приватные порты. По умолчанию локальный порт
	     привязан в соответствии с настройкой GatewayPorts. Однако для привязки соединения к определенному адресу может использоваться явный
	     bind_address. Ссылка bind_address «localhost» указывает, что порт прослушивания должен быть привязан только для локального
	     использования, а пустой адрес или «*» означает, что порт должен быть доступен со всех интерфейсов.

     LogLevel
             Дает уровень детализации, который используется при регистрации сообщений из ssh (1). Возможные значения: QUIET, FATAL, ERROR, INFO,
	     VER-BOSE, DEBUG, DEBUG1, DEBUG2 и DEBUG3. По умолчанию используется INFO. DEBUG и DEBUG1 эквивалентны. DEBUG2 и DEBUG3 определяют
	     более высокие уровни подробного вывода.

     MACs    Указывает алгоритмы MAC (код аутентификации сообщения) в порядке предпочтения. Алгоритм MAC используется для защиты целостности
     	     данных. Множественные алгоритмы должны быть разделены запятыми. Если указанное значение начинается с символа '+', то указанные
	     алгоритмы будут добавлены к набору по умолчанию вместо их замены.

             Алгоритмы, содержащие «-etm», вычисляют MAC после шифрования (encrypt-then-mac). Они считаются более безопасными и рекомендуется их
	     использование.

             По умолчанию:

                   umac-64-etm@openssh.com,umac-128-etm@openssh.com,
                   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,
                   hmac-sha1-etm@openssh.com,
                   umac-64@openssh.com,umac-128@openssh.com,
                   hmac-sha2-256,hmac-sha2-512,hmac-sha1

             Список доступных алгоритмов MAC также может быть получен с использованием параметра -Q для ssh(1) с аргументом «mac».

     NoHostAuthenticationForLocalhost
             Этот параметр можно использовать, если домашний каталог разделяется между машинами. В этом случае localhost будет ссылаться на другую
	     машину на каждом из машин, и пользователь получит много предупреждений об изменениях ключей хоста. Однако этот параметр отключает
	     проверку подлинности хоста для localhost. Аргумент этого ключевого слова должен быть «да» или «нет». По умолчанию используется
	     проверка ключа хоста для localhost.

     NumberOfPasswordPrompts
             Указывает количество подсказок пароля перед сдачей. Аргумент этого ключевого слова должен быть целым числом. По умолчанию
	     используется значение 3.

     PasswordAuthentication
             Указывает, следует ли использовать аутентификацию по паролю. Аргумент этого ключевого слова должен быть «да» или «нет». Значение по
	     умолчанию - «yes».

     PermitLocalCommand
             Разрешить выполнение локальной команды с помощью параметра LocalCommand или с помощью escape-последовательности команды в ssh(1).
	     Аргумент должен быть «yes» или «no». По умолчанию «no».

     PKCS11Provider
             Указывает, какой поставщик PKCS # 11 должен использовать. Аргументом для этого ключевого слова является разделяемая библиотека PKCS
	     #11ssh(1), которая должна использоваться для коммутации с маркером PKCS # 11, предоставляющим закрытый ключ RSA пользователя.

     Port    Указывает номер порта для подключения на удаленном хосте. Значение по умолчанию - 22.

     PreferredAuthentications
             Указывает порядок, в котором клиент должен попробовать методы проверки подлинности. Это позволяет клиенту предпочесть один метод
	     (например, клавиатурно-интерактивный) по другому методу (например, пароль). По умолчанию:

                   gssapi-with-mic,hostbased,publickey,
                   keyboard-interactive,password

     Protocol
             Указывает версии протокола ssh (1), которые должны поддерживаться в порядке предпочтения. Возможные значения: «1» и «2». Несколько
	     версий должны быть разделены запятыми. Если для этой опции установлено значение «2,1», ssh попытается выполнить версию 2 и вернуться
	     к версии 1, если версия 2 недоступна. Значение по умолчанию - «2». Протокол 1 страдает от ряда криптографических недостатков и не
	     должен использоваться. Он предлагается только для поддержки устаревших устройств.

     ProxyCommand
             Указывает команду для подключения к серверу. Командная строка продолжается до конца строки и выполняется с помощью директивы оболочки
	     «exec» пользователя, чтобы избежать затяжного процесса оболочки.

             В командной строке любое вхождение «% h» будет заменено именем хоста для подключения, «%p» на порт и «%r» удаленным именем
	     пользователя. Команда может быть в основном что угодно, и она должна считывать со своего стандартного ввода и записывать на
	     стандартный вывод. В конечном итоге он должен подключить сервер sshd (8), запущенный на какой-либо машине, или выполнить sshd -i
	     где-нибудь. Управление хост-сервером будет выполнено с использованием HostName подключаемого хоста (по умолчанию используется имя,
	     введенное пользователем). Установка команды в «none» полностью отключает эту опцию. Обратите внимание, что CheckHostIP недоступен для
	     соединений с прокси-командой.

             Эта директива полезна в сочетании с nc(1) и поддержкой ее прокси. Например, следующая директива будет подключаться через HTTP-прокси
	     в 192.0.2.0:

                ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p

     ProxyUseFdpass
             Указывает, что ProxyCommand передает связанный файловый дескриптор обратно в ssh(1) вместо продолжения выполнения и передачи данных.
	     По умолчанию «noт».

     PubkeyAcceptedKeyTypes
             Указывает типы ключей, которые будут использоваться для аутентификации открытого ключа в виде списка шаблонов, разделенных запятыми.
	     Альтернативно, если указанное значение начинается с символа «+», тогда типы ключей после него будут добавлены к умолчанию, а не
	     заменяют его. По умолчанию для этой опции:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa

             Параметр -Q для ssh (1) может использоваться для перечисления поддерживаемых типов ключей.

     PubkeyAuthentication
             Указывает, следует ли проверять аутентификацию открытого ключа. Аргумент этого ключевого слова должен быть «yes» или «no». Значение
	     по умолчанию - «yes».

     RekeyLimit
             Указывает максимальный объем данных, которые могут быть переданы до перезаключения сеансового ключа, необязательно, после
	     максимального периода времени, который может пройти до перезаключения сеансового ключа. Первый аргумент указан в байтах и ​​может иметь
	     суффикс «K», «M» или «G» для обозначения килобайтов, мегабайтов или гигабайт соответственно. Значение по умолчанию - «1G» и «4G», в
	     зависимости от шифрования. Дополнительное второе значение указывается в секундах и может использовать любой из блоков, записанных в
	     разделе TIME FORMATS sshd_config (5). Значение по умолчанию для RekeyLimit равно «default none», что означает, что повторное нажатие
	     выполняется после того, как объем данных по умолчанию для шифрования был отправлен или принят, и не выполняется повторная настройка
	     времени.

     RemoteForward
             Указывает, что TCP-порт на удаленном компьютере пересылается по защищенному каналу на указанный хост и порт с локального компьютера.
	     Первым аргументом должен быть порт [bind_address:], а вторым аргументом должен быть host: hostport. Адреса IPv6 могут быть указаны
	     путем размещения адресов в квадратных скобках. Можно указать несколько пересылок, и в командной строке могут быть указаны
	     дополнительные пересылки. Привилегированные порты могут быть перенаправлены только при входе в систему с правами администратора на
	     удаленном компьютере.

             Если аргумент порта равен «0», порт прослушивания будет динамически распределяться на сервере и сообщаться клиенту во время
	     выполнения.

             Если bind_address не указан, по умолчанию используется только привязка к петлевым адресам. Если bind_address является «*» или пустой
	     строкой, тогда для пересылки требуется прослушивание всех интерфейсов. Указание удаленного связывания_данных будет успешным только в
	     том случае, если включена опция GatewayPorts сервера (см. Sshd_config (5)).

     RequestTTY
             Указывает, следует ли запрашивать псевдо-tty для сеанса. Аргумент может быть одним из: «no» (никогда не запрашивать TTY), «yes»
	     (всегда запрашивать TTY, когда стандартный ввод является TTY), «сила» (всегда запрашивать TTY) или «авто» (запрашивать TTY при
	     открытии регистрационной сессии). Эта опция отображает флаги -t и -T для ssh (1).

     RevokedHostKeys
             Указывает отмененные общедоступные ключи хоста. Ключам, перечисленным в этом файле, будет отказано в аутентификации хоста. Обратите
	     внимание: если этот файл не существует или недоступен для чтения, то для всех хостов будет отказано в аутентификации хоста. Ключи
	     могут быть указаны как текстовый файл, содержащий один открытый ключ для каждой строки или как список аннулирования ключа OpenSSH
	     (KRL), созданный с помощью ssh-keygen (1). Для получения дополнительной информации о KRL, см. Раздел ОСНОВНЫЕ ПЕРЕВОДЫ в
	     ssh-keygen (1).

     RhostsRSAAuthentication
             Указывает, следует ли проверять аутентификацию на основе rhost с аутентификацией хоста RSA. Аргумент должен быть «yes» или «noт». По
	     умолчанию «no». Этот параметр применяется только к протоколу версии 1 и требует, чтобы ssh(1) был setuid root.

     RSAAuthentication
             Указывает, следует ли проверять аутентификацию RSA. Аргумент этого ключевого слова должен быть «yes» или «noт». Аутентификация RSA
	     будет предпринята только в том случае, если файл идентификации существует или выполняется агент проверки подлинности. Значение по
	     умолчанию - «yes». Обратите внимание, что этот параметр применяется только к протоколу версии 1.

     SendEnv
             Указывает, какие переменные из локальной среды (7) должны быть отправлены на сервер. Сервер также должен поддерживать его, и сервер
	     должен быть настроен для принятия этих переменных среды. Обратите внимание, что переменная окружения TERM всегда отправляется всякий
	     раз, когда запрашивается псевдотерминал, как того требует протокол. Обратитесь к AcceptEnv в sshd_config (5) за настройкой сервера.
	     Переменные указываются по имени, которое может содержать символы wild-card. Несколько переменных среды могут быть разделены пробелом
	     или разбросаны по нескольким директивам SendEnv. По умолчанию не следует отправлять какие-либо переменные среды.

             См. PATTERNS для получения дополнительной информации о шаблонах.

     ServerAliveCountMax
             Устанавливает количество живых сообщений сервера (см. Ниже), которые могут быть отправлены без ssh (1), получая любые сообщения с
	     сервера. Если это пороговое значение достигнуто во время отправки сообщений сервера, ssh отключится от сервера, завершив сеанс. Важно
	     отметить, что использование живых сообщений сервера сильно отличается от TCPKeepAlive (см. Ниже). Живые сообщения сервера отправляются
	     через зашифрованный канал и, следовательно, не будут подделать. Параметр TCP keepalive, включенный TCPKeepAlive, подделка. Механизм
	     работы сервера является ценным, когда клиент или сервер зависят от знания, когда соединение стало неактивным.

             Значение по умолчанию равно 3. Если, например, ServerAliveInterval (см. Ниже) установлено значение 15, а ServerAliveCountMax остается
	     по умолчанию, если сервер перестает отвечать на запросы, ssh отключается примерно через 45 секунд.

     ServerAliveInterval
             Устанавливает интервал ожидания в секундах, после которого, если данные не были получены с сервера, ssh (1) отправит сообщение через
	     зашифрованный канал, чтобы запросить ответ от сервера. Значение по умолчанию равно 0, что указывает на то, что эти сообщения не будут
	     отправляться на сервер, или 300, если установлена ​​опция BatchMode. ProtocolKeepAlives и SetupTimeOut - это псевдонимы совместимости с
	     Debian для этой опции.

     StreamLocalBindMask
             Устанавливает маску режима создания восьмеричного файла (umask), используемую при создании файла сокета Unix-домена для локальной или
	     удаленной переадресации портов. Этот параметр используется только для переадресации портов в файл сокета Unix-домена.

             Значение по умолчанию - 0177, которое создает файл сокета в домене Unix, который доступен для чтения и записи только владельцем.
	     Обратите внимание, что не все операционные системы соблюдают режим файла в файлах сокетов Unix-домена.

     StreamLocalBindUnlink
             Указывает, следует ли удалять существующий файл сокета домена Unix для локальной или удаленной переадресации портов перед созданием
	     нового. Если файл сокета уже существует и StreamLocalBindUnlink не включен, ssh не сможет перенаправить порт в файл сокета
	     Unix-домена. Этот параметр используется только для переадресации портов в файл сокета Unix-домена.

             Аргумент должен быть «yes» или «no». По умолчанию «no».

     StrictHostKeyChecking
             Если для этого флага установлено значение «yes», ssh(1) никогда не будет автоматически добавлять ключи хоста в файл ~/.ssh/known_hosts
	     и отказывается подключаться к хостам, чей ключ хоста был изменен. Это обеспечивает максимальную защиту от атак троянских коней, хотя
	     может быть неприятно, когда файл /etc/ssh/ssh_known_hosts плохо поддерживается или когда часто происходят соединения с новыми
	     хостами. Этот параметр заставляет пользователя вручную добавлять все новые хосты. Если для этого флага установлено значение «no», ssh
	     автоматически добавит новые ключи хоста к файлам известных пользователей. Если для этого флага установлено значение «спросить», новые
	     ключи хоста будут добавлены в файлы известных пользователей только после подтверждения пользователем того, что они действительно хотят
	     сделать, а ssh откажется подключиться к хостам, чей ключ хоста изменился , Клавиши хоста известных хостов будут проверяться
	     автоматически во всех случаях. Аргумент должен быть «yes», «no» или «спросить». По умолчанию используется «ask».

     TCPKeepAlive
             Указывает, должна ли система отправлять сообщения keepalive TCP на другую сторону. Если они будут отправлены, смерть соединения или
	     сбой одной из машин будет правильно замечена. Этот параметр использует только TCP keepalives (в отличие от использования ssh level
	     keepalives), поэтому требуется много времени, чтобы заметить, когда соединение умирает. Таким образом, вы, вероятно, тоже хотите
	     вариант ServerAliveInterval. Однако это означает, что соединения будут умирать, если маршрут временно остановлен, а некоторые люди
	     находят его раздражающим.

             По умолчанию используется «yes» (для отправки сообщений TCP keepalive), и клиент заметит, что сеть опускается или удаленный компьютер
	     умирает. Это важно в сценариях, и многие пользователи тоже этого хотят.

             Чтобы отключить сообщения TCP keepalive, значение должно быть установлено на «no».

     Tunnel  Запросить туннель (4) переадресацию устройства между клиентом и сервером. Аргумент должен быть «yes», «точка-точка» (уровень 3),
     	     «ethernet» (уровень 2) или «no». Указание «yes» запрашивает режим туннеля по умолчанию, который является «точка-точка». По
	     умолчанию «no».

     TunnelDevice
             Указывает устройства tun (4) для открытия на клиенте (local_tun) и сервере (remote_tun).

             Аргумент должен быть local_tun[:remote_tun]. Устройства могут быть указаны с помощью числового идентификатора или ключевого слова
	     «любое», которое использует следующее доступное туннельное устройство. Если remote_tun не указан, по умолчанию используется значение
	     «any». По умолчанию используется «any:any».

     UpdateHostKeys
             Указывает, должен ли ssh (1) принимать уведомления о дополнительных ключах с сервера, отправленного после завершения проверки
	     подлинности, и добавлять их в UserKnownHostsFile. Аргумент должен быть «да», «нет» (по умолчанию) или «спросить». Включение этой опции
	     позволяет изучать альтернативные ключи хоста для сервера и поддерживает изящное вращение ключа, позволяя серверу отправлять
	     замененные открытые ключи до удаления старых. Дополнительные ключи хоста принимаются только в том случае, если ключ, используемый для
	     аутентификации хоста, уже был доверен или явно принят пользователем. Если для параметра UpdateHostKeys установлено значение «ask»,
	     пользователю предлагается подтвердить изменения в файле known_hosts. Подтверждение в настоящее время несовместимо с ControlPersist и
	     будет отключено, если оно включено.

             В настоящее время только sshd (8) из OpenSSH 6.8 и выше поддерживают расширение протокола hostkeys@openssh.com, используемое для
	     информирования клиента обо всех серверах сервера.

     UsePrivilegedPort
             Указывает, следует ли использовать привилегированный порт для исходящих соединений. Аргумент должен быть «yes» или «noт». По умолчанию
	     «no». Если установлено «yes», ssh (1) должен быть установлен в root. Обратите внимание, что для параметра RhostsRSAAuthentication с
	     более старыми серверами эта опция должна быть установлена ​​на «yes».

     User    Задает пользователя для входа в систему. Это может быть полезно, когда другое имя пользователя используется на разных машинах. Это
     	     избавляет вас от необходимости запоминать имя пользователя на командной строке.

     UserKnownHostsFile
             Указывает один или несколько файлов, которые будут использоваться для базы данных ключа хоста пользователя, разделенных пробелами.
	     По умолчанию используется ~/.ssh/known_hosts, ~/.ssh/known_hosts2.

     VerifyHostKeyDNS
             Указывает, следует ли проверять удаленный ключ с использованием записей ресурсов DNS и SSHFP. Если для этой опции установлено
	     значение «да», клиент будет неявно доверять ключам, которые соответствуют защищенному отпечатку пальца из DNS. Небезопасные отпечатки
	     пальцев будут обрабатываться так, как если бы этот параметр был установлен на «ask». Если для этой опции задано значение «спросить»,
	     будет отображаться информация о совпадении отпечатка пальца, но пользователю все равно необходимо будет подтвердить новые ключи хоста
	     в соответствии с параметром StrictHostKeyChecking. Аргумент должен быть «yes», «no» или «спросить». По умолчанию «no».

             См. Также ПРОВЕРКА КЛЮЧЕЙ HOST в ssh(1).

     VisualHostKey
             Если для этого флага установлено значение «yes», в дополнение к строке отпечатка пальца при входе в систему и для неизвестных ключей
	     хоста печатается представление ASCII-изображения отпечатка пальца удаленного хоста. Если для этого флага установлено значение «no»,
	     при входе в систему не печатаются строки отпечатков пальцев, и для неизвестных ключей хоста будет напечатана только строка отпечатка
	     пальца. По умолчанию «нет».

     XAuthLocation
             Указывает полный путь к программе xauth(1). По умолчанию используется /usr/bin/xauth.

PATTERNS
     Шаблон состоит из нуля или более символов без пробелов, '*' (подстановочный знак, который соответствует нулю или более символов) или '?'
     (Подстановочный знак, который соответствует точно одному символу). Например, чтобы указать набор деклараций для любого хоста в наборе доменов
     «.co.uk», можно использовать следующий паттерн:

           Host *.co.uk

     Следующий шаблон будет соответствовать любому хосту в 192.168.0. [0-9] диапазон сети:

           Host 192.168.0.?

     Список шаблонов представляет собой список шаблонов, разделенных запятыми. Шаблоны в списках шаблонов могут быть сведены на нет, предшествуя
     им восклицательным знаком ('!'). Например, чтобы позволить использовать ключ из любой точки организации, кроме пула «dialup», можно
     использовать следующую запись (в authorized_keys):

           from="!*.dialup.example.com,*.example.com"

FILES
     ~/.ssh/config
             Это файл конфигурации для каждого пользователя. Формат этого файла описан выше. Этот файл используется клиентом SSH. Из-за возможности
	     злоупотребления этот файл должен иметь строгие разрешения: чтение/запись для пользователя и недоступность для других. Это может быть
	     групповой доступ, если группа в вопросе содержит только пользователя.

     /etc/ssh/ssh_config
             Системный файл конфигурации. Этот файл предоставляет значения по умолчанию для тех значений, которые не указаны в файле конфигурации
	     пользователя, и для тех пользователей, у которых нет файла конфигурации. Этот файл должен быть общедоступным.

SEE ALSO
     ssh(1)

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre‐
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.

BSD                            February 20, 2016                           BSD
