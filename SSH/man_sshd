SSHD(8) 	System Manager's Manual 	SSHD(8)
NAME
sshd — OpenSSH SSH daemon
SYNOPSIS
sshd 	[-46DdeiqTt] [-C connection_spec] [-c host_certificate_file] [-E log_file] [-f config_file] [-g login_grace_time] [-h host_key_file] [-o option] [-p port] [-u len]
DESCRIPTION
sshd (OpenSSH Daemon) - это программа демона для ssh (1). Вместе эти программы заменяют rlogin и rsh и обеспечивают безопасную зашифрованную связь
между двумя ненадежными хостами по небезопасной сети.
sshd прослушивает подключения от клиентов. Обычно он запускается при загрузке из/etc/rc. Он открывает новый демон для каждого входящего соединения.
Развернутые демоны обрабатывают обмен ключами, шифрование, аутентификацию, выполнение команд и обмен данными.
sshd можно настроить с помощью параметров командной строки или файла конфигурации (по умолчанию sshd_config (5)); параметры командной строки
переопределяют значения, указанные в файле конфигурации. sshd перечитывает свой файл конфигурации, когда он получает сигнал зависания SIGHUP,
выполняя его с именем и параметрами, с которыми он был запущен, например. /USR/SBIN/SSHD.
Возможные варианты::

 
     
-4
    Заставляет sshd использовать только адреса IPv4.
 
     
-6
    Заставляет sshd использовать только адреса IPv6.
 
     
-C connection_spec
    Укажите параметры подключения для расширенного тестового режима -T. Если предоставлено, любые директивы соответствия в файле конфигурации,
    которые будут применяться, применяются до того, как конфигурация будет записана на стандартный вывод. Параметры подключения поставляются как
    пары ключевых слов = значение и могут поставляться в любом порядке либо с несколькими параметрами -C, либо в виде списка, разделенного
    запятыми. Ключевые слова: «addr», «user», «host», «laddr», «lport» и «rdomain» и соответствуют адресу источника, пользователю, разрешенному
    имени исходного узла, локальному адресу, локальному порту и домену маршрутизации соответственно ,
 
     
-c host_certificate_file
    Указывает путь к файлу сертификата для идентификации sshd во время обмена ключами. Файл сертификата должен соответствовать файлу ключа хоста,
    указанному с помощью параметра -h или директивы конфигурации HostKey.
 
     
-D
    Когда этот параметр указан, sshd не будет отсоединен и не станет демонами. Это позволяет легко контролировать sshd.
 
     
-d
    Режим отладки. Сервер отправляет подробный отладочный вывод в стандартную ошибку и не ставит себя в фоновом режиме. Сервер также не будет
    вилкой и будет обрабатывать только одно соединение. Этот параметр предназначен только для отладки для сервера. Параметры multi-d увеличивают
    уровень отладки. Максимум - 3.
 
     
-E log_file
    Добавить журналы отладки в log_file вместо системного журнала.
 
     
-e
    Записывать журналы отладки в стандартную ошибку вместо системного журнала.
 
     
-f config_file
    Задает имя файла конфигурации. По умолчанию используется файл /etc/ssh/sshd_config. sshd отказывается запускаться, если нет файла конфигурации.
 
     
-g login_grace_time
    Дает время отклика клиентов для аутентификации (по умолчанию 120 секунд). Если клиент не может аутентифицировать пользователя в течение этого
    нескольких секунд, сервер отключается и выходит. Значение нуля указывает на отсутствие ограничения.
 
     
-h host_key_file
    Указывает файл, из которого считывается ключ хоста. Эта опция должна быть задана, если sshd не запускается как root (поскольку обычные файлы
    ключей хоста обычно не читаются кем-либо, кроме root). По умолчанию используется /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_ecdsa_key,
    /etc/ssh/ssh_host_ed25519_key и /etc/ssh/ssh_host_rsa_key. Возможно иметь несколько файлов ключей хоста для разных алгоритмов ключа хоста.
 
     
-i
    Указывает, что sshd запускается из inetd (8).
 
     
-o option
    Может использоваться для предоставления опций в формате, используемом в файле конфигурации. Это полезно для указания параметров, для которых
    нет отдельного флага командной строки. Полную информацию о параметрах и их значениях см. В разделе sshd_config (5).
 
     
-p port
    Указывает порт, на котором сервер прослушивает подключения (по умолчанию 22). Разрешено использование нескольких портов. Порты, указанные в
    файле конфигурации с опцией Port, игнорируются при указании порта командной строки. Порты, указанные с помощью параметра ListenAddress,
    переопределяют порты командной строки.
 
     
-q
    Тихий режим. В системный журнал ничего не отправляется. Обычно регистрируется начало, аутентификация и завершение каждого соединения.
 
     
-T
    Расширенный тестовый режим. Проверьте правильность файла конфигурации, выведите эффективную конфигурацию в stdout и затем выйдите. При желании
    правила соответствия могут применяться, задавая параметры соединения с использованием одного или нескольких параметров -C.
 
     
-t
    Тестовый режим. Проверьте только правильность файла конфигурации и разумность ключей. Это полезно для надежного обновления sshd, поскольку
    параметры конфигурации могут меняться.
 
     
-u len
    Этот параметр используется для указания размера поля в структуре utmp, который содержит имя удаленного хоста. Если разрешенное имя хоста
    длиннее len, вместо него будет использоваться десятичное значение в пунктире. Это позволяет хостам с очень длинными именами хостов, которые
    переполняют это поле, все еще должны быть однозначно идентифицированы. Задание -u0 указывает, что в utmp-файл должны быть помещены только
    точечные десятичные адреса. -u0 также может использоваться для предотвращения того, чтобы sshd выполнял DNS-запросы, если это не требует
    механизм или конфигурация аутентификации. Механизмы аутентификации, которые могут потребовать DNS, включают в себя HostbasedAuthentication и
    использование опции from = "pattern-list" в ключевом файле. Параметры конфигурации, требующие DNS, включают использование шаблона USER @ HOST
    в AllowUsers или DenyUsers.

AUTHENTICATION
Демон SSSS OpenSSH поддерживает только протокол SSH 2. Каждый хост имеет ключ для конкретного хоста, используемый для идентификации хоста. Всякий
раз, когда клиент подключается, демон отвечает своим общедоступным ключом хоста. Клиент сравнивает ключ хоста со своей собственной базой данных,
чтобы убедиться, что он не изменился. Форвардная безопасность обеспечивается с помощью соглашения о ключах Диффи-Хеллмана. Это ключевое соглашение
приводит к совместному сеансовому ключу. Остальная часть сеанса шифруется с использованием симметричного шифра, в настоящее время 128-разрядного
AES, Blowfish, 3DES, CAST128, Arcfour, 192-битного AES или 256-битного AES. Клиент выбирает алгоритм шифрования для использования с серверами,
предлагаемыми сервером. Кроме того, целостность сеанса обеспечивается с помощью кода аутентификации криптографического сообщения (hmac-md5,
hmac-sha1, umac-64, umac-128, hmac-sha2-256 или hmac-sha2-512).
Наконец, сервер и клиент вводят диалоговое окно проверки подлинности. Клиент пытается аутентифицировать себя, используя аутентификацию на основе
хоста, проверку подлинности с открытым ключом, проверку ответа на запрос или аутентификацию пароля.
Если клиент успешно аутентифицируется, вводится диалог для подготовки сеанса. В это время клиент может запрашивать такие вещи, как распределение
псевдо-tty, пересылка соединений X11, пересылка TCP-соединений или пересылка соединения агента аутентификации по защищенному каналу.
После этого клиент либо запрашивает оболочку, либо выполняет команду. Затем стороны переходят в режим сеанса. В этом режиме обе стороны могут
отправлять данные в любое время, и такие данные пересылаются в/из оболочки или команды на стороне сервера и пользовательского терминала на стороне
клиента.
Когда пользовательская программа завершается, и все переадресованные X11 и другие соединения были закрыты, сервер отправляет клиенту статус
завершения команды, и обе стороны выходят.
LOGIN PROCESS
Когда пользователь успешно входит в систему, sshd выполняет следующие действия:

    Если логин находится на tty, а команда не указана, печатает последнее время входа и/etc/motd (если это не предотвращено в файле конфигурации
    или ~/.hushlogin, см. Раздел FILES).
    Если логин находится на tty, записывается время входа в систему.
    Проверки /etc/nologin; если он существует, распечатывает содержимое и завершает работу (кроме root).
    Изменения для запуска с обычными привилегиями пользователя.
    Устанавливает базовую среду.
    Читает файл ~/.ssh/environment, если он существует, и пользователям разрешено изменять их среду. См. Параметр PermitUserEnvironment в файле
    sshd_config (5).
    Изменения в домашнем каталоге пользователя.
    Если ~/.ssh/rc существует и параметр sshd_config (5) PermitUserRC установлен, запускает его; else если /etc/ssh/sshrc существует, запускает
    его; в противном случае выполняется xauth. Файлы «rc» получают протокол проверки подлинности X11 и cookie в стандартном вводе. См. SSHRC, ниже.
    Запускает оболочку или команду пользователя. Все команды запускаются под оболочкой входа пользователя, как указано в базе данных системных
    паролей.

SSHRC
Если файл ~/.ssh/rc существует, sh(1) запускает его после чтения файлов окружения, но перед запуском оболочки или команды пользователя. Он не
должен производить какой-либо вывод на stdout; Вместо этого следует использовать stderr. Если переадресация X11 используется, она получит пару
«proto cookie» в своем стандартном вводе (и DISPLAY в своей среде). Сценарий должен вызывать xauth (1), потому что sshd не будет автоматически
запускать xauth, чтобы добавить файлы cookie X11.
Основная цель этого файла - запустить любые процедуры инициализации, которые могут потребоваться до того, как домашний каталог пользователя
станет доступным; AFS является частным примером такой среды.
Этот файл, вероятно, содержит некоторый код инициализации, за которым следует нечто похожее:

if read proto cookie && [ -n "$DISPLAY" ]; then 
	if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then 
		# X11UseLocalhost=yes 
		echo add unix:`echo $DISPLAY | 
		    cut -c11-` $proto $cookie 
	else 
		# X11UseLocalhost=no 
		echo add $DISPLAY $proto $cookie 
	fi | xauth -q - 
fi

Если этот файл не существует, запускается /etc/ssh/sshrc, и если этого не существует, xauth используется для добавления файла cookie.

AUTHORIZED_KEYS FILE FORMAT
AuthorizedKeysFile указывает файлы, содержащие открытые ключи для аутентификации с открытым ключом; если эта опция не указана, по умолчанию это
~/.ssh/authorized_keys и ~/.ssh/authorized_keys2. Каждая строка файла содержит один ключ (пустые строки и строки, начинающиеся с «#», игнорируются
как комментарии). Открытые ключи состоят из следующих разделенных пробелом полей: параметры, keytype, key64-кодированный ключ, комментарий. Поле
опций не является обязательным. Ключом является «ecdsa-sha2-nistp256», «ecdsa-sha2-nistp384», «ecdsa-sha2-nistp521», «ssh-ed25519», «ssh-dss» или
«ssh-rsa»; поле комментария не используется ни для чего (но может быть удобным для пользователя идентифицировать ключ).
Обратите внимание, что строки в этом файле могут иметь длину в несколько сотен байтов (из-за размера кодировки открытого ключа) до предела в 8
килобайт, что позволяет ключам DSA до 8 килобит и ключам RSA до 16 килобит. Вы не хотите вводить их; вместо этого скопируйте файл id_dsa.pub,
id_ecdsa.pub, id_ed25519.pub или файл id_rsa.pub и отредактируйте его.
sshd обеспечивает минимальный размер модуля ключа RSA 768 бит.
Параметры (если они есть) состоят из спецификаций параметров, разделенных запятыми. Пробелы не допускаются, за исключением двойных кавычек.
Поддерживаются следующие спецификации параметров (обратите внимание, что ключевые слова опций не зависят от регистра):

 
     
agent-forwarding
    Включить переадресацию агента аутентификации, ранее отключенную опцией ограничения.
 
     
cert-authority
    Указывает, что указанный ключ является центром сертификации (CA), которому доверено проверять подписанные сертификаты для аутентификации
    пользователей.
    Сертификаты могут кодировать ограничения доступа, подобные этим ключевым параметрам. Если присутствуют как ограничения сертификата, так и
    ключевые параметры, применяется наиболее ограничительное объединение этих двух.
 
     
command="command"
    Указывает, что команда выполняется всякий раз, когда этот ключ используется для аутентификации. Команда, предоставленная пользователем (если
    есть), игнорируется. Команда запускается на pty, если клиент запрашивает pty; в противном случае он запускается без tty. Если требуется
    8-битный чистый канал, нельзя запрашивать pty или указывать no-pty. Цитата может быть включена в команду, процитировав ее обратным слэшем.
    Этот параметр может быть полезен для ограничения определенных открытых ключей для выполнения только определенной операции. Примером может быть
    ключ, который позволяет удаленное резервное копирование, но не более того. Обратите внимание, что клиент может указать пересылку TCP и / или
    X11, если они явно не запрещены, например. используя опцию ограничения ключа.
    Команда, первоначально предоставленная клиентом, доступна в переменной среды SSH_ORIGINAL_COMMAND. Обратите внимание, что этот параметр
    применяется к выполнению оболочки, команды или подсистемы. Также обратите внимание, что эта команда может быть заменена директивой
    sshd_config (5) ForceCommand.
    Если задана команда и принудительная команда внедрена в сертификат, используемый для аутентификации, сертификат будет принят только в том
    случае, если две команды идентичны.
 
     
environment="NAME=value"
    Указывает, что строка должна быть добавлена ​​в среду при входе в систему с использованием этого ключа. Переменные среды задаются таким образом,
    чтобы переопределить другие значения среды по умолчанию. Разрешено несколько вариантов этого типа. Обработка по умолчанию отключена по
    умолчанию и контролируется с помощью параметра PermitUserEnvironment.
 
     
from="pattern-list"
    Указывает, что в дополнение к аутентификации с открытым ключом, каноническое имя удаленного хоста или его IP-адрес должно присутствовать в
    списке шаблонов, разделенных запятыми. См. PATTERNS в ssh_config (5) для получения дополнительной информации о шаблонах.
    В дополнение к сопоставлению подстановочных знаков, которое может быть применено к именам хостов или адресам, от строфы могут соответствовать
    IP-адреса, используя нотацию CIDR address/masklen.
    Цель этого варианта - дополнительно повысить безопасность: аутентификация открытого ключа сама по себе не доверяет сетевым или серверам имен
    или чем-либо (но ключ); однако, если кто-то каким-то образом крадет ключ, ключ позволяет злоумышленнику войти в систему из любой точки мира.
    Эта дополнительная опция делает использование украденного ключа более сложным (серверы имен и/или маршрутизаторы должны быть скомпрометированы
    в дополнение к простому ключу).
 
     
no-agent-forwarding
    Запрет переадресации агента аутентификации, когда этот ключ используется для аутентификации.
 
     
no-port-forwarding
    Запрещает пересылку TCP, когда этот ключ используется для аутентификации. Любые запросы клиента на порт возвращают ошибку. Это может быть
    использовано, например. в связи с опцией команды.
 
     
no-pty
    Предотвращает выделение tty (запрос на выделение pty не удастся).
 
     
no-user-rc
    Отключает выполнение ~/.ssh/rc.
 
     
no-X11-forwarding
    Запрет переадресации X11, когда этот ключ используется для аутентификации. Любые запросы X11 от клиента возвращают ошибку.
 
     
permitopen="host:port"
    Ограничьте локальную переадресацию портов с помощью ssh (1) -L, чтобы он мог подключаться только к указанному хосту и порту. Адреса IPv6 могут
    быть указаны путем помещения адреса в квадратные скобки. Несколько вариантов разрешения могут быть применены через запятую. Никакие
    сопоставления шаблонов не выполняются по указанным именам хостов, они должны быть буквальными доменами или адресами. Спецификация порта *
    соответствует любому порту.
 
     
port-forwarding
    Включить переадресацию портов, ранее отключенную опцией ограничения.
 
     
principals="principals"
    В строке cert-authority задает допустимые принципы аутентификации сертификатов как список, разделенный запятыми. По крайней мере одно имя из
    списка должно быть указано в списке сертификатов для сертификата, который должен быть принят. Этот параметр игнорируется для ключей, которые
    не помечены как доверенные подписыватели сертификатов, используя параметр cert-authority.
 
     
pty
    Разрешает выделение tty ранее отключенным параметром ограничения.
 
     
restrict
    Включите все ограничения, то есть отключите пересылку портов, агентов и X11, а также отключите выделение PTY и выполнение ~/.ssh/rc. Если в
    файлы authorized_keys добавлены какие-либо возможности ограничения времени, они будут включены в этот набор.
 
     
tunnel="n"
    Настройте устройство tun(4) на сервере. Без этой опции следующее доступное устройство будет использоваться, если клиент запрашивает туннель.
 
     
user-rc
    Включает выполнение функции ~/.ssh/rc, ранее отключенной опцией ограничения.
 
     
X11-forwarding
    Разрешает переадресацию X11 ранее отключенной опцией ограничения.

Пример файла authorized_keys:

# Комментарии разрешены в начале строки 
ssh-rsa AAAAB3Nza...LiPk== user@example.net 
from="*.sales.example.net,!pc.sales.example.net" ssh-rsa 
AAAAB2...19Q== john@example.net 
command="dump /home",no-pty,no-port-forwarding ssh-dss 
AAAAC3...51R== example.net 
permitopen="192.0.2.1:80",permitopen="192.0.2.2:25" ssh-dss 
AAAAB5...21S== 
tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...== 
jane@example.net 
restrict,command="uptime" ssh-rsa AAAA1C8...32Tv== 
user@example.net 
restrict,pty,command="nethack" ssh-rsa AAAA1f8...IrrC5== 
user@example.net

SSH_KNOWN_HOSTS FILE FORMAT
Файлы /et /ssh/ssh_known_hosts и ~/.ssh/known_hosts содержат общедоступные ключи хоста для всех известных хостов. Глобальный файл должен быть
подготовлен администратором (необязательно), а файл для каждого пользователя поддерживается автоматически: всякий раз, когда пользователь
подключается к неизвестному узлу, его ключ добавляется в файл для каждого пользователя.
Каждая строка в этих файлах содержит следующие поля: маркеры (необязательно), имена хостов, keytype, key64-кодированный ключ, комментарий. Поля
разделяются пробелами.
Маркер не является обязательным, но если он присутствует, он должен быть одним из «@ cert-authority», чтобы указать, что строка содержит ключ
центра сертификации (CA) или «@revoked», чтобы указать, что ключ, содержащийся в линия отменяется и никогда не должна приниматься. На ключевой
строке должен использоваться только один маркер.
Hostnames - это список шаблонов, разделенных запятыми ('*' и '?' Действуют как подстановочные знаки); каждый шаблон, в свою очередь, сопоставляется
с именем хоста. Когда sshd аутентифицирует клиента, например, при использовании HostbasedAuthentication, это будет имя пользователя канонического
клиента. Когда ssh (1) аутентифицирует сервер, это будет имя хоста, заданное пользователем, значение ssh (1) HostkeyAlias, если оно указано, или
имя хоста канонического сервера, если была использована опция ssh (1) CanonicalizeHostname ,
Образцу также может предшествовать символ «!», Чтобы указать отрицание: если имя хоста соответствует отрицательному шаблону, оно не принимается
(по этой строке), даже если оно соответствует другому шаблону в строке. Имя хоста или адрес необязательно могут быть заключены в скобки '[' и ']',
а затем ':' и номер нестандартного порта.
В качестве альтернативы имена хостов могут храниться в хешированной форме, которая скрывает имена и адреса хостов, если содержимое файла будет
раскрыто. Имена хостов Hashed начинаются с символа '|'. Только одно хешированное имя хоста может отображаться в одной строке, и ни одно из
указанных выше операторов отрицания или подстановочных знаков не может применяться.
Keytype и base64-кодированный ключ берутся непосредственно из ключа хоста; их можно получить, например, из /etc/ssh/ssh_host_rsa_key.pub. Поле
необязательных комментариев продолжается до конца строки и не используется.
Строки, начинающиеся с «#» и пустых строк, игнорируются как комментарии.
При выполнении проверки подлинности хоста аутентификация принимается, если соответствующая строка имеет соответствующий ключ; либо тот, который
точно соответствует или, если сервер представил сертификат для аутентификации, ключ центра сертификации, который подписал сертификат. Для того,
чтобы доверять доверенности в качестве центра сертификации, он должен использовать маркер «@ cert-authority», описанный выше.
Известный файл hosts также предоставляет возможность отмечать ключи как отмененные, например, когда известно, что связанный закрытый ключ был
украден. Отключенные ключи указываются путем включения маркера «@revoked» в начале ключевой строки и никогда не принимаются для проверки
подлинности или в качестве центров сертификации, но вместо этого будут выдавать предупреждение из ssh (1), когда они встречаются.
Допустимо (но не рекомендуется) иметь несколько строк или разных ключей хоста для тех же имен. Это неизбежно произойдет, если в файл будут
добавлены короткие формы имен хостов из разных доменов. Возможно, файлы содержат противоречивую информацию; аутентификация принимается, если
действительная информация может быть найдена из любого файла.
Обратите внимание, что строки в этих файлах обычно содержат сотни символов, и вы определенно не хотите вводить ключи хоста вручную. Скорее,
сгенерируйте их по сценарию, ssh-keyscan (1) или, например, с помощью /etc/ssh/ssh_host_rsa_key.pub и добавив имена хостов спереди. ssh-keygen (1)
также предлагает некоторое базовое автоматическое редактирование для ~ / .ssh / known_hosts, включая удаление хостов, соответствующих имени хоста,
и преобразование всех имен хостов в их хешированные представления.
Пример файла ssh_known_hosts:

# Комментарии разрешены в начале строки 
closenet,...,192.0.2.53 1024 37 159...93 closenet.example.net 
cvs.example.net,192.0.2.10 ssh-rsa AAAA1234.....= 
# Хешированное имя хоста 
|1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa 
AAAA1234.....= 
# Отключенный ключ 
@revoked * ssh-rsa AAAAB5W... 
# Ключ CA, принятый для любого хоста в * .mydomain.com или * .mydomain.org 
@cert-authority *.mydomain.org,*.mydomain.com ssh-rsa AAAAB5W...

FILES

~/.hushlogin
    Этот файл используется для подавления печати последнего времени входа и / etc / motd, если PrintLastLog и PrintMotd, соответственно, включены.
    Он не подавляет печать баннера, указанного в Banner.
~/.rhosts
    Этот файл используется для проверки подлинности на основе хоста (см. Ssh(1) для получения дополнительной информации). На некоторых машинах
    этот файл может потребоваться для чтения в мире, если домашний каталог пользователя находится в разделе NFS, потому что sshd читает его как
    root. Кроме того, этот файл должен принадлежать пользователю и не должен иметь права на запись для кого-либо еще. Рекомендуемое разрешение для
    большинства машин - чтение/запись для пользователя и недоступное для других.
~/.shosts
    Этот файл используется точно так же, как и .rhosts, но позволяет аутентификацию на основе хоста без разрешения входа в rlogin/rsh.
~/.ssh/
    Этот каталог является местоположением по умолчанию для всех пользовательских данных конфигурации и проверки подлинности. Не существует общего
    требования хранить все содержимое этого каталога в секрете, но рекомендуемые разрешения читаются / записываются / выполняются для пользователя
    и недоступны другим.
~/.ssh/authorized_keys
    Перечисляет открытые ключи (DSA, ECDSA, Ed25519, RSA), которые могут использоваться для входа в систему как этот пользователь. Формат этого
    файла описан выше. Содержимое файла не очень чувствительно, но рекомендуемые разрешения читаются / записываются для пользователя и недоступны
    другим.
    Если этот файл, каталог ~ / .ssh или домашний каталог пользователя доступны для записи другими пользователями, тогда файл может быть изменен
    или заменен неавторизованными пользователями. В этом случае sshd не позволит использовать его, если для параметра StrictModes не установлено
    значение «no».
~/.ssh/environment
    Этот файл читается в среде при входе в систему (если он существует). Он может содержать только пустые строки, строки комментариев (начинающиеся
    с «#») и строки назначения формы name = value. Файл должен быть доступен для записи только пользователем; он не должен быть удобочитаемым
    кем-либо еще. Обработка по умолчанию отключена по умолчанию и контролируется с помощью параметра PermitUserEnvironment.
~/.ssh/known_hosts
    Содержит список ключей хоста для всех хостов, к которым пользователь вошел в систему, которые еще не включены в общий список известных ключей
    хоста. Формат этого файла описан выше. Этот файл должен быть доступен для записи только root / owner и может, но не обязательно, доступен для
    чтения в мире.
~/.ssh/rc
    Содержит подпрограммы инициализации, которые будут выполняться до того, как домашний каталог пользователя станет доступным. Этот файл должен
    быть доступен для записи только пользователю и не должен быть доступен для чтения кому-либо еще.
/etc/hosts.equiv
    Этот файл предназначен для аутентификации на основе хоста (см. Ssh (1)). Его следует записывать только с помощью root.
/etc/moduli
    Содержит группы Diffie-Hellman, используемые для обмена ключами «Diffie-Hellman Group Exchange». Формат файла описан в модулях (5). Если в
    этом файле не будет найдено полезных групп, будут использоваться фиксированные внутренние группы.
/etc/motd
    См. Motd (5).
/etc/nologin
    Если этот файл существует, sshd отказывается предоставить кому-либо, кроме корневого журнала, содержимое файла. Содержимое файла отображается
    всем, кто пытается войти в систему, а также отказам от корневых соединений. Файл должен быть общедоступным.
/etc/shosts.equiv
    Этот файл используется точно так же, как и hosts.equiv, но позволяет аутентификацию на основе хоста без разрешения входа в rlogin/rsh.
/etc/ssh/ssh_host_dsa_key
     
/etc/ssh/ssh_host_ecdsa_key
     
/etc/ssh/ssh_host_ed25519_key
     
/etc/ssh/ssh_host_rsa_key
    Эти файлы содержат частные части ключей хоста. Эти файлы должны принадлежать только root, которые можно читать только с помощью root и
    недоступны для других. Обратите внимание, что sshd не запускается, если эти файлы доступны для группы / мира.
/etc/ssh/ssh_host_dsa_key.pub
     
/etc/ssh/ssh_host_ecdsa_key.pub
     
/etc/ssh/ssh_host_ed25519_key.pub
     
/etc/ssh/ssh_host_rsa_key.pub
    Эти файлы содержат общедоступные части ключей хоста. Эти файлы должны быть удобочитаемыми, но доступны только для root. Их содержимое должно
    соответствовать соответствующим частям. Эти файлы на самом деле не используются ни для чего; они предоставляются для удобства пользователя,
    поэтому их содержимое можно скопировать в файлы известных хостов. Эти файлы создаются с помощью ssh-keygen(1).
/etc/ssh/ssh_known_hosts
    Системный список известных ключей хоста. Этот файл должен быть подготовлен системным администратором для хранения общедоступных ключей хоста
    всех компьютеров в организации. Формат этого файла описан выше. Этот файл должен быть доступен для записи только root / owner и должен быть
    доступен для чтения в мире.
/etc/ssh/sshd_config
    Содержит данные конфигурации для sshd. Формат файла и параметры конфигурации описаны в sshd_config (5).
/etc/ssh/sshrc
    Подобно ~/.ssh/rc, его можно использовать для определения инициализации входа в систему по умолчанию в глобальном масштабе. Этот файл должен
    быть доступен для записи только с помощью root и должен быть доступен для чтения в мире.
/var/empty
    chroot (2), используемый sshd во время разделения привилегий на этапе предварительной аутентификации. Каталог не должен содержать никаких
    файлов и должен принадлежать корневому, а не групповому или общедоступному.
/var/run/sshd.pid
    Содержит идентификатор процесса sshd, который прослушивает подключения (если одновременно несколько разных демонов работают для разных портов,
    это содержит идентификатор процесса, который был запущен последним). Содержимое этого файла нечувствительно; он может быть удобочитаемым.

SEE ALSO
scp(1), sftp(1), ssh(1), ssh-add(1), ssh-agent(1), ssh-keygen(1), ssh-keyscan(1), chroot(2), login.conf(5), moduli(5), sshd_config(5), inetd(8),
sftp-server(8)
AUTHORS
OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen. Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
de Raadt and Dug Song removed many bugs, re-added newer features and created OpenSSH. Markus Friedl contributed the support for SSH protocol
versions 1.5 and 2.0. Niels Provos and Markus Friedl contributed support for privilege separation.