Как назвать файл, содержащий вашу программу: eye.с, или black.с, или infan.c и т. п.
Какое имя можно использовать в качестве названия, состоящей из одной функции: main().
Структура простой программы: заголовок, тело, фигурные скобки, операторы.
Как описать целую переменную: int varname;
Как присвоить значение переменной: varname = 1024;
Как напечатать фразу printf ("Хотите купить утку?");
Как напечатать значение переменной: printf ("%d", varname);
Символ новая строка: \n
Как включать комментарии в программу: /*анализ движения наличных денег*/
**************************************************************************************
Управляющие последовательности:
\n новая строка
\t табуляция
\b шаг назад
\r возврат каретки
\f подача бланка
\\ обратная косая черта (\)
\' апостроф (')
\" кавычки (")
*****************************************************************************************
Ключевые слова
Данные основных типов вводятся в программу при помощи следующих семи ключевых слов: int,
long, short, unsigned, char, float, double.
Резюме:
как описывать простые переменные
1. Выбрать требуемый тип данных.
2. Выбрать имя для переменной.
3. Для оператора описания использовать нижеследующий формат:
спецификация-типа имя-переменной;
Спецификация-типа формируется из одного или более ключевых слов.
Вот несколько примеров:
int erest;
unsigned short cash;
4. Вы можете описать в одном операторе несколько переменных одного типа, разделяя их имена
запятыми:
char ch, unit, ans;
5. В операторе описания вы имеете возможность инициализировать переменную:
float mass = 6.0E24;
*************************************************************************************
Что такое основные типы данных языка Си: int, short, long, unsigned, char, float, double.
Как описать переменную любого типа: int beancount, float root-beer; и т. д.
Как записать константу типа int: 256, 023, OXF5 и т. д.
Как записать константу типа char: 'r', 'U', '\007', '?' и т. д.
Как записать константу типа float: 14,92, 1.67е-27 и т. д.
************************************************************************************
sizeof со скобками чтобы узнать объем памяти, отводимый под элементы конкретного типа
sizeof без скобок чтобы объем памяти, занимаемый определенным объектом
************************************************************************************
% - спецификации преобразования--- обязательно должны соответствовать количеству аргументов
Форматы printf() scanf()
Формат	Тип выводимой информации
%d	Десятичное целое число
%с	Один символ
%s	Строка символов
%е	Число с плавающей точкой, экспоненциальная запись
%f	Число с плавающей точкой, десятичная запись
%g	Используется вместо записей
%f	или %е, если он короче
%u	Десятичное целое число без знака
%о	Восьмеричное целое число без знака
%x	Шестнадцатеричное целое число без знака

Модификатор 		  Значение
-			  Аргумент будет печататься с левой позиции поля заданной
			  ширины (как объяснено ниже). Обычно печать аргумента
			  оканчивается в самой правой позиции поля. Пример: %-10d

строка цифр		  Задает минимальную ширину поля. Большее поле будет
       			  использоваться, если печатаемое число или строка не
			  помещаются в исходном поле. Пример: %4d

строка цифр		  Определяет точность: для типов данных с плавающей точкой -
       			  число печатаемых цифр справа от десятичной точки; для
			  символьных строк - максимальное число печатаемых символов
			  Пример: %4.2f (две десятичные цифры для поля шириной в
			  четыре символа)
l			  Соответствующий элемент данных имеет тип long, а не int.
			  Пример: %ld

*************************************************************************************
Два правила для аргументов scanf 
1. Если вам нужно ввести некоторое значение и присвоить его переменной одного из основных
типов, то перед именем nepеменной требуется писать символ &.
2. Если вы хотите ввести значение строковой переменной, использовать символ & не нужно
(& отсутствует при указании массива символов).
Функция scanf( ) использует практически тот же набор символов спецификации преобразования,
что и функция printf( ). Основные отличия в случае функции scanf( ) следующие:
1. Отсутствует спецификация %g.
2. Спецификации %f и %е эквивалентны. Обе спецификации до пускают наличие (или отсутствие)
знака, строки цифр с десятичной точкой или без нее и поля показателя степени.
3. Для чтения целых чисел типа short применяется спецификация %h.
*************************************************************************************
Что такое строка символов: несколько символов, расположенных в ряд.
Как записывать строку символов: " несколько символов, расположенных в ряд".
Как строка хранится в памяти: " несколько символов, расположенных в ряд\0".
Где разместить строку: char phrase[25] или static char phrase[25].
Как определить длину строки: использовать функцию strlen(строка).
Как распечатать строку: printf(" %s", phrase).
Как прочитать строку, состоящую из одного слова: scanf(" %s " ,&name).
Как задать числовую константу: #define TWO 2.
Как задать символьную константу: #define WOW '!'.
Как задать строковую константу: #define WARN "He делай этого!".
Спецификации преобразования при вводе-выводе: %d %f %e %g %c %s %u % o %х.
Как улучшить вид входной информации: %-10d %3.2f.
Как выполнять преобразования: printf(" %d %о %c\h", WOW, WOW, WOW);
***************************************************************************************
Резюме: выражения и операторы
Выражение состоит из операций и операндов. Примерами простейших выражений являются
константы или переменные (операция отсутствует), такие, как 22 или beebop. Более сложные
выражения - это 55 + 22 и vap = 2*(vip + (mgx = 4 )).
Оператор служит камандой компьютеру. Операторы бывают простыми и составными. Простые
операторы оканчиваются символом "точка с запятой". Примеры:

1. Операторы описания			int toes;
2. Операторы присваивания	    	toes = 12;
3. Операторы вызова функции     	printf(" %d\n", toes);
4. Управляющие операторы	     	while (toes < 20) toes = toes + 2;
5. Пустой оператор			;

Составные операторы, или блоки, состоят из одного или более операторов (которые в свою
очередь сами могут быть составными), заключенных в фигурные скобки. Оператор while,
приведенный ниже, содержит, например, составной oпeратор
while(years < 100) {
wisdom = wisdom + 1;
printf(" %d %d\n" , years, wisdom);
}
**************************************************************************************
Приведение типов

1. Если операция выполняется над данными двух различных типов, обе величины приводятся к
"высшему" из двух типов. Этот процесс называется "повышением" типа.
2. Последовательность имен типов, упорядоченных от "высшего" к "низшему", выглядит так:
double, float, long, int, short и char. Применение ключевого слова unsigned повышает ранг
соответствующего типа данных со знаком.
3. В операторе присваивания конечный результат вычисления выражения в правой части
приводится к типу переменной, которой должно быть присвоено это значение. Данный процесс
может привести к "повышению" типа, как описано выше, или к "понижению, при котором величина
приводится к типу данных, имеющему более низкий приоритет.
**************************************************************************************
Резюме: операции в языке Си
Ниже перечислены операции, которые мы уже обсудили.
=
+
-
-
*
/
%
++
--
sizeof
(тип)
Присваивает величину справа от знака переменной слева от него
Прибавляет величину справа от знака к величине слева от него
Вычитает величину справа от знака из величины слева от него
Унарная операция, изменяет знак величины справа от знака
Умножает величину справа от знака на величину слева от него
Делит величину слева от знака на величину справа от него.
Результат усекается, если оба операнда целые числа
Дает остаток при делении величины слева от знака на величину
справа от него (только для целых чисел)
Прибавляет 1 к значению переменной слева от знака (префиксная форма)
или к значению переменной справа от знака (постфиксная форма)
Аналогичная операции ++, но вычитает 1
Дает размер операнда, стоящего справа, в байтах.
Операнд может быть спецификацией типа, заключенного в круглые скобки,
как, например, sizeof (float), или именем конкретной переменной,
массива и т. п., например sizeof foo
Операция приведения: приводит величину, стоящую справа, к типу,
определяемому ключевым словом (или словами) в скобках.
(float)9 преобразует целое число 9 в число с
плавающей точкой 9.0.
**************************************************************************************
Как использовать операции: +,-,*,/,%,++, --, (type).
Что такое операнд: это - величина, над которой выполняется операция.
Что такое выражение: совокупность операций и операндов.
Как вычислять значение выражения: в соответствии с порядком старшинства.
Как распознать оператор: по символу.
Виды операторов: операторы описания, присваивания, while, составной.
Как сформировать составной оператор: заключить последовательность операторов в фигурные
скобки {}.
Как сформируется оператор while: while (проверка условия) оператор.
Как вычисляются выражения со смешанными типами данных: с помощью автоматического
преобразования типов.
*****************************************************************************************
правила, касающиеся использования двух
операций переключения < и >.
1. Операция переключения связывает выполняемую программу (в том числе и стандартные
команды ОС UNIX) с некоторым файлом. Она не может использоваться для связи одного файла с
другим или одной программы с другой.
2. Имя выполняемой программы должно стоять слева от знака операции, а имя файла - справа
от него.
3. При использовании этих операций ввод не может осуществляться более чем из одного файла,
а вывод - более чем в один файл.
4. Обычно между именем и операцией пробелы не обязательны кроме тех редких случаев, когда
используются некоторые символы специального назначения в интерпретаторе команд UNIX.
***************************************************************************************

