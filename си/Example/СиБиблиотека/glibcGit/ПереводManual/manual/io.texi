@node I/O Overview, I/O on Streams, Pattern Matching, Top
@c %MENU% Introduction to the I/O facilities
@chapter Input/Output Overview

Большинству программ нужно делать либо ввод (чтение данных), либо вывод (запись
данных), или чаще всего оба, чтобы сделать что-нибудь полезное.  @Theglibc{}
обеспечивает такой большой выбор входных и выходных функций
что самая сложная часть часто решает, какая функция больше всего
подходит!

В этой главе представлены концепции и терминология, относящиеся к входным и выходным
данным. Другие главы, относящиеся к средствам ввода-вывода GNU:

@itemize @bullet
@item
@ref{I/O on Streams}, охватывает функции высокого уровня
которые работают с потоками, включая форматированный ввод и вывод.

@item
@ref{Low-Level I/O}, охватывает основные операции ввода-вывода и управления
функции над файловыми дескрипторами.

@item
@ref{File System Interface}, охватывает функции для работы с
каталогами и для управления атрибутами файлов, такими как режимы доступа
и владение.

@item
@ref{Pipes and FIFOs}, включает информацию об основных межпроцессорных
средствах связи.

@item
@ref{Sockets}, который охватывает более сложную межпроцессную связь
с поддержкой сетей.

@item
@ref{Low-Level Terminal Interface}, охватывает функции для изменения
как обрабатываются ввод и вывод на терминалы или другие последовательные устройства.
@end itemize


@menu
* I/O Concepts::       Некоторая основная информация и терминология.
* File Names::         Как обратиться к файлу.
@end menu

@node I/O Concepts, File Names,  , I/O Overview
@section Input/Output Concepts

Прежде чем вы сможете прочитать или записать содержимое файла, вы должны установить
канал связи связи с файлом. Этот процесс
называется @dfn{opening} файла. Вы можете открыть файл для чтения, записи,
или для для всех сразу.
@cindex opening a file

Соединение с открытым файлом представляется либо как поток, либо как
файловый дескриптор. Вы передаете это как аргумент для функций, которые выполняют
фактические операции чтения или записи, чтобы сообщить им, какой файл использовать.
Некоторые функции ожидают потоки, а другие предназначены для
работают с файловыми дескрипторами.

Когда вы закончите чтение или запись в файле, вы можете
прекратить соединение @dfn{closing} c файлом. Как только вы
закрыли поток или файловый дескриптор, вы не можете больше вводить или
выводить.

@menu
* Streams and File Descriptors::    Библиотека GNU C предоставляет два способа
                                    для доступа к содержимому файлов.
* File Position::                   Количество байтов с
                                    начало файла.
@end menu

@node Streams and File Descriptors, File Position,  , I/O Concepts
@subsection Streams and File Descriptors

Когда вы хотите сделать ввод или вывод в файл, у вас есть выбор из двух
основных механизмов представления связи между вашей программой -
файловые дескрипторы и потоки файлов. Файловые дескрипторы
представленны как объекты типа @code{int}, в то время как потоки представлены
в виде @code{FILE *} объектов.

Файловые дескрипторы обеспечивают примитивный, низкоуровневый интерфейс для ввода и
вывода. Оба и файловые дескрипторы и потоки могут представлять собой
подключение к устройству (например, терминалу) или к трубе или гнезду для
взаимодействуя с другим процессом, а также с обычным файлом. Но если
вы хотите выполнять управляющие операции, специфичные для конкретного вида
устройства, вы должны использовать файловый дескриптор; Нет средств для
использовать потоки таким образом. Вы также должны использовать файловые дескрипторы, если ваша
программа должна делать ввод или вывод в специальных режимах, таких как
неблокирующий (или опросный) вход (@pxref{File Status Flags}).

Потоки обеспечивают интерфейс более высокого уровня, расположенный поверх
примитивного файлового дескриптора. Интерфейс stream обрабатывает все
типы файлов практически одинаково - единственным исключением являются три
стиля буферизации, которые вы можете выбрать (@pxref{Stream Buffering}).

Основным преимуществом использования интерфейса потока является то, что набор
aункции для выполнения фактических операций ввода и вывода (в отличие от
управления операциями) на потоках намного богаче и мощнее, чем
cоответствующие средства для дескрипторов файлов. Интерфейс дескриптора файла
предоставляет только простые функции для передачи блоков
символов, но интерфейс потока также обеспечивает мощный формат
функций ввода и вывода (@code{printf} и @code{scanf}) так же как
функции для ввода и вывода с символьной и линейной ориентацией.
@c !!! Glibc имеет dprintf, который позволяет вам делать printf на fd.

Поскольку потоки реализуются в терминах файловых дескрипторов, вы можете
извлечь дескриптор файла из потока и выполнить низкоуровневые
операции непосредственно в файловом дескрипторе. Вы также можете сначала открыть
соединение как файловый дескриптор, а затем создать поток, связанный с
этим файловым дескриптором.

В общем, вы должны придерживаться использования потоков, а не файловых
дескрипторов, если не будет какой-то конкретной операции, которую вы хотите сделать
только для дескриптора файла. Если вы начинающий
программист, и не уверены, какие функции использовать, мы предлагаем вам
сконцентрировать на форматированных входных функциях (@pxref{Formatted Input})
и форматированных выходных функциях (@pxref{Formatted Output}).

Если вы беспокоитесь о переносимости ваших программ в другие системы
чем GNU, вы также должны знать, что дескрипторы файлов не являются
универсальными как потоки. Вы можете ожидать, что любая работающая система @w{ISO C} с
поддержкой потоков, но @nongnusystems{} может не поддерживать файловые дескрипторы 
или может реализовывать только подмножество функций GNU, которые работают на
файловых дескрипторах. Большинство файловых дескрипторов в @theglibc{}
однако включены в стандарт POSIX.1.

@node File Position,  , Streams and File Descriptors, I/O Concepts
@subsection File Position

Одним из атрибутов открытого файла является его @dfn{file position} которая
отслеживает, где в файле должен читаться или записываться следующий символ. 
На @gnusystems{}, и всех POSIX.1 системах, Положение файла
это просто целое число, представляющее число байтов с начала
файла.

Положение файла обычно устанавливается в начале файла, и каждый раз,
когда символ читается или записывается, позиция файла
увеличивается. Другими словами, доступ к файлу обычно
@dfn{sequential}.
@cindex file position
@cindex sequential-access files

Обычные файлы разрешают операции чтения или записи в любой позиции в пределах
файл. Это могут также разрешить некоторые другие типы файлов. Файлы, которые
допускают это, иногда упоминаются как @dfn{random-access} файлы.
Вы можете изменить положение файла, используя @code{fseek} функции на
потоке (@pxref{File Positioning}) или @code{lseek} функция дескриптора
файла (@pxref{I/O Primitives}).  Если вы попытаетесь изменить позицию файла
в файле, который не поддерживает произвольный доступ, вы получаете
@code{ESPIPE} ошибку.
@cindex random-access files

Потоки и дескрипторы, которые открыты для @dfn{append access} 
обрабатывается специально для вывода: вывод в такие файлы @emph{always}
добавляется последовательно к @emph{end} файла, независимо от
положения файла. Однако позиция файла по-прежнему используется для управления 
чтение файла до завершения.
@cindex append-access files

If you think about it, you'll realize that several programs can read a
given file at the same time.  In order for each program to be able to
read the file at its own pace, each program must have its own file
pointer, which is not affected by anything the other programs do.

In fact, each opening of a file creates a separate file position.
Thus, if you open a file twice even in the same program, you get two
streams or descriptors with independent file positions.

By contrast, if you open a descriptor and then duplicate it to get
another descriptor, these two descriptors share the same file position:
changing the file position of one descriptor will affect the other.

@node File Names,  , I/O Concepts, I/O Overview
@section File Names

In order to open a connection to a file, or to perform other operations
such as deleting a file, you need some way to refer to the file.  Nearly
all files have names that are strings---even files which are actually
devices such as tape drives or terminals.  These strings are called
@dfn{file names}.  You specify the file name to say which file you want
to open or operate on.

This section describes the conventions for file names and how the
operating system works with them.
@cindex file name

@menu
* Directories::                 Directories contain entries for files.
* File Name Resolution::        A file name specifies how to look up a file.
* File Name Errors::            Error conditions relating to file names.
* File Name Portability::       File name portability and syntax issues.
@end menu


@node Directories, File Name Resolution,  , File Names
@subsection Directories

In order to understand the syntax of file names, you need to understand
how the file system is organized into a hierarchy of directories.

@cindex directory
@cindex link
@cindex directory entry
A @dfn{directory} is a file that contains information to associate other
files with names; these associations are called @dfn{links} or
@dfn{directory entries}.  Sometimes, people speak of ``files in a
directory'', but in reality, a directory only contains pointers to
files, not the files themselves.

@cindex file name component
The name of a file contained in a directory entry is called a @dfn{file
name component}.  In general, a file name consists of a sequence of one
or more such components, separated by the slash character (@samp{/}).  A
file name which is just one component names a file with respect to its
directory.  A file name with multiple components names a directory, and
then a file in that directory, and so on.

Some other documents, such as the POSIX standard, use the term
@dfn{pathname} for what we call a file name, and either @dfn{filename}
or @dfn{pathname component} for what this manual calls a file name
component.  We don't use this terminology because a ``path'' is
something completely different (a list of directories to search), and we
think that ``pathname'' used for something else will confuse users.  We
always use ``file name'' and ``file name component'' (or sometimes just
``component'', where the context is obvious) in GNU documentation.  Some
macros use the POSIX terminology in their names, such as
@code{PATH_MAX}.  These macros are defined by the POSIX standard, so we
cannot change their names.

You can find more detailed information about operations on directories
in @ref{File System Interface}.

@node File Name Resolution, File Name Errors, Directories, File Names
@subsection File Name Resolution

A file name consists of file name components separated by slash
(@samp{/}) characters.  On the systems that @theglibc{} supports,
multiple successive @samp{/} characters are equivalent to a single
@samp{/} character.

@cindex file name resolution
The process of determining what file a file name refers to is called
@dfn{file name resolution}.  This is performed by examining the
components that make up a file name in left-to-right order, and locating
each successive component in the directory named by the previous
component.  Of course, each of the files that are referenced as
directories must actually exist, be directories instead of regular
files, and have the appropriate permissions to be accessible by the
process; otherwise the file name resolution fails.

@cindex root directory
@cindex absolute file name
If a file name begins with a @samp{/}, the first component in the file
name is located in the @dfn{root directory} of the process (usually all
processes on the system have the same root directory).  Such a file name
is called an @dfn{absolute file name}.
@c !!! xref here to chroot, if we ever document chroot. -rm

@cindex relative file name
Otherwise, the first component in the file name is located in the
current working directory (@pxref{Working Directory}).  This kind of
file name is called a @dfn{relative file name}.

@cindex parent directory
The file name components @file{.} (``dot'') and @file{..} (``dot-dot'')
have special meanings.  Every directory has entries for these file name
components.  The file name component @file{.} refers to the directory
itself, while the file name component @file{..} refers to its
@dfn{parent directory} (the directory that contains the link for the
directory in question).  As a special case, @file{..} in the root
directory refers to the root directory itself, since it has no parent;
thus @file{/..} is the same as @file{/}.

Here are some examples of file names:

@table @file
@item /a
The file named @file{a}, in the root directory.

@item /a/b
The file named @file{b}, in the directory named @file{a} in the root directory.

@item a
The file named @file{a}, in the current working directory.

@item /a/./b
This is the same as @file{/a/b}.

@item ./a
The file named @file{a}, in the current working directory.

@item ../a
The file named @file{a}, in the parent directory of the current working
directory.
@end table

@c An empty string may ``work'', but I think it's confusing to
@c try to describe it.  It's not a useful thing for users to use--rms.
A file name that names a directory may optionally end in a @samp{/}.
You can specify a file name of @file{/} to refer to the root directory,
but the empty string is not a meaningful file name.  If you want to
refer to the current working directory, use a file name of @file{.} or
@file{./}.

Unlike some other operating systems, @gnusystems{} don't have any
built-in support for file types (or extensions) or file versions as part
of its file name syntax.  Many programs and utilities use conventions
for file names---for example, files containing C source code usually
have names suffixed with @samp{.c}---but there is nothing in the file
system itself that enforces this kind of convention.

@node File Name Errors, File Name Portability, File Name Resolution, File Names
@subsection File Name Errors

@cindex file name errors
@cindex usual file name errors

Functions that accept file name arguments usually detect these
@code{errno} error conditions relating to the file name syntax or
trouble finding the named file.  These errors are referred to throughout
this manual as the @dfn{usual file name errors}.

@table @code
@item EACCES
The process does not have search permission for a directory component
of the file name.

@item ENAMETOOLONG
This error is used when either the total length of a file name is
greater than @code{PATH_MAX}, or when an individual file name component
has a length greater than @code{NAME_MAX}.  @xref{Limits for Files}.

On @gnuhurdsystems{}, there is no imposed limit on overall file name
length, but some file systems may place limits on the length of a
component.

@item ENOENT
This error is reported when a file referenced as a directory component
in the file name doesn't exist, or when a component is a symbolic link
whose target file does not exist.  @xref{Symbolic Links}.

@item ENOTDIR
A file that is referenced as a directory component in the file name
exists, but it isn't a directory.

@item ELOOP
Too many symbolic links were resolved while trying to look up the file
name.  The system has an arbitrary limit on the number of symbolic links
that may be resolved in looking up a single file name, as a primitive
way to detect loops.  @xref{Symbolic Links}.
@end table


@node File Name Portability,  , File Name Errors, File Names
@subsection Portability of File Names

The rules for the syntax of file names discussed in @ref{File Names},
are the rules normally used by @gnusystems{} and by other POSIX
systems.  However, other operating systems may use other conventions.

There are two reasons why it can be important for you to be aware of
file name portability issues:

@itemize @bullet
@item
If your program makes assumptions about file name syntax, or contains
embedded literal file name strings, it is more difficult to get it to
run under other operating systems that use different syntax conventions.

@item
Even if you are not concerned about running your program on machines
that run other operating systems, it may still be possible to access
files that use different naming conventions.  For example, you may be
able to access file systems on another computer running a different
operating system over a network, or read and write disks in formats used
by other operating systems.
@end itemize

The @w{ISO C} standard says very little about file name syntax, only that
file names are strings.  In addition to varying restrictions on the
length of file names and what characters can validly appear in a file
name, different operating systems use different conventions and syntax
for concepts such as structured directories and file types or
extensions.  Some concepts such as file versions might be supported in
some operating systems and not by others.

The POSIX.1 standard allows implementations to put additional
restrictions on file name syntax, concerning what characters are
permitted in file names and on the length of file name and file name
component strings.  However, on @gnusystems{}, any character except
the null character is permitted in a file name string, and
on @gnuhurdsystems{} there are no limits on the length of file name
strings.
