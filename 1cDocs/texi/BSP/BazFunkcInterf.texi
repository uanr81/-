@node Базовая Функциональность Интерфейс
@chapter Базовая Функциональность Интерфейс
@ifinfo
@heading Базовая Функциональность Интерфейс
@end ifinfo
@menu
* АдресаЭлектроннойПочтыИзСтроки::
* АдресВходаВПрограмму::
* АдресПубликацииИнформационнойБазыВИнтернете::
* АдресПубликацииИнформационнойБазыВЛокальнойСети::
* АдресЭлектроннойПочтыСоответствуетТребованиям::
* БлокировкаРегламентныхЗаданийИнформационнойБазы::
* БлокировкаСеансовИЗаданийИнформационнойБазы::
* ВерсияБиблиотеки::
* ВерсияКонфигурацииБезНомераСборки::
* ВидОбъектаПоСсылке::
* ВидОбъектаПоТипу::
* ВставитьПараметрыВСтроку::
* ВыгрузитьКолонку::
* ВыполнитьВБезопасномРежиме::
* ВыполнитьВФоне::
* ВыполнитьМетодКонфигурации::
* ВыполнитьМетодОбъекта::
* ВычислитьВБезопасномРежиме::
* ДанныеСовпадают::
* ДатаСеанса::
* ДатаУниверсальная::
* ДиагностикаСоединения::
* ДобавитьЗадание::
* ДобавитьКонечныйРазделительПути::
* ДобавитьОшибкуПользователю::
* ДобавитьПереименование::
* ДобавитьСообщениеДляЖурналаРегистрации::
* ДобавитьЭлементКомпоновки::
* ДополнитьМассив::
* ДополнитьСоответствие::
* ДополнитьСтроку::
* ДополнитьСтруктуру::
* ДополнитьТаблицу::
* ДополнитьТаблицуИзМассива::
* ДоступноИспользованиеРазделенныхДанных::
* ЕстьЗащитаОтОпасныхДействий::
* ЕстьРеквизитИлиСвойствоОбъекта::
* ЕстьРеквизитОбъекта::
* ЕстьСсылкиНаОбъект::
* ЗаблокироватьРаботуСВнешнимиРесурсами::
* Задание::
* ЗаданиеВыполнено::
* ЗакрытьФормуДлительнойОперации::
* ЗаменитьНедопустимыеСимволыXML::
* ЗаменитьНедопустимыеСимволыВИмениФайла::
* ЗаменитьОдниСимволыДругими::
* ЗаменитьСсылки::
* ЗаписатьДанныеВБезопасноеХранилище::
* ЗаписатьСобытияВЖурналРегистрации::
* ЗаполнитьКоллекциюСвойств::
* ЗаполнитьКоллекциюЭлементовДереваДанныхФормы::
* ЗапрашиватьПодтверждениеПриЗавершенииПрограммы::
* ЗапуститьПрограмму::
* ЗарегистрироватьCOMСоединитель::
* ЗначениеВМассиве::
* ЗначениеВСтрокуXML::
* ЗначениеИзСтрокиXML::
* ЗначениеРеквизитаОбъекта::
* ЗначениеРеквизитаОбъектов::
* ЗначениеСвойстваЭлементаФормы::
* ЗначениеСсылочногоТипа::
* ЗначенияРеквизитовОбъекта::
* ЗначенияРеквизитовОбъектов::
* ИдентификаторCOMСоединителя::
* ИдентификаторИнформационнойБазы::
* ИдентификаторКластера::
* ИдентификаторОбъектаМетаданных::
* ИдентификаторыОбъектовМетаданных::
* ИзвлечьТекстИзHTML::
* ИзменитьЗадание::
* ИзменитьЭлементыОтбора::
* ИменаРеквизитовПоТипу::
* ИмяCOMСоединителя::
* ИмяБазовогоТипаПоОбъектуМетаданных::
* ИмяЗначенияПеречисления::
* ИмяТаблицыПоСсылке::
* ИнициализироватьПараметрыОбработчикаОжидания::
* ИННСоответствуетТребованиям::
* ИнтервалВремениСтрокой::
* ИнформационнаяБазаФайловая::
* ИсключенияПоискаСсылок::
* КартинкаКомментария::
* КаталогФайловойИнформационнойБазы::
* КлиентПодключенЧерезВебСервер::
* КлючиСтруктурыВСтроку::
* КодОсновногоЯзыка::
* КодПоОКПОСоответствуетТребованиям::
* КоллекцииИдентичны::
* КонтрольнаяСуммаСтрокой::
* КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям::
* КППСоответствуетТребованиям::
* МенеджерОбъектаПоПолномуИмени::
* МенеджерОбъектаПоСсылке::
* МестаИспользования::
* НайтиЗадания::
* НайтиНедопустимыеСимволыВИмениФайла::
* НайтиЭлементОтбораПоПредставлению::
* НайтиЭлементыИГруппыОтбора::
* НовоеЗащищенноеСоединение::
* ОбновитьВсеПараметрыРаботыПрограммы::
* ОбновитьИнтерфейсПрограммы::
* ОбновитьПараметрыОбработчикаОжидания::
* ОбщиеПараметрыБазовойФункциональности::
* ОбщийМодуль::
* ОбъектXDTOВСтрокуXML::
* ОбъектXDTOИзСтрокиXML::
* ОбъектМетаданныхДоступенПоФункциональнымОпциям::
* ОбъектМетаданныхПоИдентификатору::
* ОбъектПоПолномуИмени::
* ОбъектЯвляетсяГруппой::
* ОГРНСоответствуетТребованиям::
* ОжидатьЗавершение::
* ОперативнаяПамятьДоступнаяКлиентскомуПриложению::
* ОписаниеЗащитыБезПредупреждений::
* ОписаниеСвойствОбъекта::
* ОписаниеТипаВсеСсылки::
* ОписаниеТипаДата::
* ОписаниеТипаСостоитИзТипа::
* ОписаниеТипаСтрока::
* ОписаниеТипаЧисло::
* ОповеститьОбИзмененииОбъекта::
* ОповеститьОбИзмененииОбъектов::
* ОткрытьЖурналРегистрации::
* ОткрытьНавигационнуюСсылку::
* ОткрытьПроводник::
* ОткрытьСписокАктивныхПользователей::
* ОткрытьФайлВПрограммеПросмотра::
* ОткрытьФормуДлительнойОперации::
* ОтменитьВыполнениеЗадания::
* ОтмеченныеЭлементы::
* ОчиститьПараметрыСеанса::
* ПараметрыАдминистрирования::
* ПараметрыАдминистрированияИнформационнойБазыКластера::
* ПараметрыАдминистрированияКластера::
* ПараметрыВопросаПользователю::
* ПараметрыВыполненияВФоне::
* ПараметрыЗапускаПрограммы::
* ПараметрыИзСтроки::
* ПараметрыОжидания::
* ПараметрыПодключенияWSПрокси::
* ПараметрыПодключенияКомпоненты::
* ПараметрыРаботыКлиента::
* ПараметрыРаботыКлиентаПриЗапуске::
* ПараметрыУстановкиКомпоненты::
* ПередЗавершениемРаботыСистемы::
* ПередНачаломРаботыСистемы::
* ПодключитьКомпонентуИзМакета::
* ПодсистемаСуществует::
* ПодставитьПараметрыВСтроку::
* ПодставитьПараметрыВСтрокуИзМассива::
* ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами::
* ПоказатьВопросПользователю::
* ПоказатьПодтверждениеЗакрытияПроизвольнойФормы::
* ПоказатьПодтверждениеЗакрытияФормы::
* ПоказатьФормуРедактированияКомментария::
* ПоказатьФормуРедактированияМногострочногоТекста::
* ПолучитьВерсииИнтерфейса::
* ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение::
* ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля::
* ПолучитьИмяСРасширением::
* ПолучитьНедопустимыеСимволыВИмениФайла::
* ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы::
* ПолучитьПолноеИмяФайла::
* ПолучитьРасширениеИмениФайла::
* ПолучитьРегламентноеЗадание::
* ПолучитьРеквизитФормыПоПути::
* ПредлагатьСоздаватьРезервныеКопии::
* ПредлагатьУстановкуРасширенияРаботыСФайлами::
* ПредложитьПользователюСоздатьРезервнуюКопию::
* ПредметСтрокой::
* ПредопределенныйЭлемент::
* ПредставлениеЛокальнойДатыСоСмещением::
* ПредупреждениеПриЗавершенииРаботы::
* ПреобразоватьЧислоВАрабскуюНотацию::
* ПреобразоватьЧислоВРимскуюНотацию::
* ПриНачалеВыполненияРегламентногоЗадания::
* ПриНачалеРаботыСистемы::
* Проверить::
* ПроверитьВыводТабличногоДокумента::
* ПроверитьПараметр::
* ПроверитьПараметрыАдминистрирования::
* ПроверитьПроведенностьДокументов::
* ПроверитьРасширениеРаботыСФайламиПодключено::
* ПроверитьТипПараметраКоманды::
* ПровестиДокументы::
* ПропуститьПредупреждениеПередЗавершениемРаботыСистемы::
* ПрофильБезопасности::
* ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы::
* ПрофильБезопасностиИнформационнойБазы::
* ПрофильБезопасностиСуществует::
* ПрочитатьXMLВТаблицу::
* ПрочитатьДанныеИзБезопасногоХранилища::
* ПрочитатьПрогресс::
* ПустойБуферОбмена::
* ПутьККлиентуСервераАдминистрирования::
* ПутьКТабличнойЧасти::
* РаботаСВнешнимиРесурсамиЗаблокирована::
* РабочаяДатаПользователя::
* РазблокироватьРаботуСВнешнимиРесурсами::
* РазделениеВключено::
* РазделительПакетаЗапросов::
* РазложитьПолноеИмяФайла::
* РазложитьСтрокуВМассивПодстрок::
* РазложитьСтрокуВМассивСлов::
* РазложитьСтрокуПоТочкамИСлэшам::
* РазностьМассивов::
* РазобратьСтрокуСПочтовымиАдресами::
* РазорватьСоединенияСИнформационнойБазой::
* РасписаниеВСтруктуру::
* РасписаниеРегламентногоЗадания::
* РасписанияОдинаковые::
* РаспределитьСуммуПропорциональноКоэффициентам::
* РасширениеБезТочки::
* РегламентноеЗаданиеИспользуется::
* РедакцияКонфигурации::
* РежимОтладки::
* СвернутьМассив::
* СвойстваCOMКласса::
* СвойстваБлокировкиСеансовИРегламентныхЗаданий::
* СвойстваВиртуальногоКаталога::
* СвойстваВнешнегоМодуля::
* СвойстваВнешнейКомпоненты::
* СвойстваИнтернетРесурса::
* СвойстваИнформационныхБаз::
* СвойстваКластеров::
* СвойстваПриложенияОС::
* СвойстваПрофиляБезопасности::
* СвойстваРабочихПроцессов::
* СвойстваРабочихСерверов::
* СвойстваСеанса::
* СвойстваСеансов::
* СвойстваСоединений::
* СвойстваСоединения::
* СвойствоСтруктуры::
* СеансыИнформационнойБазы::
* СкопироватьВБуферОбмена::
* СкопироватьМассив::
* СкопироватьРекурсивно::
* СкопироватьСоответствие::
* СкопироватьСписокЗначений::
* СкопироватьСтрокиВБуферОбмена::
* СкопироватьСтруктуру::
* СнятьБлокировкуСеансовИЗаданийИнформационнойБазы::
* СнятьУсловноеОформлениеСпискаЗначений::
* СоединенияСИнформационнойБазой::
* СоздатьWSПрокси::
* СоздатьВременныйКаталог::
* СоздатьГруппуЭлементовОтбора::
* СоздатьПрофильБезопасности::
* СократитьДвойныеКавычки::
* СократитьСтрокуКонтрольнойСуммой::
* СообщенияПользователю::
* СообщитьОшибкиПользователю::
* СообщитьПользователю::
* СообщитьПрогресс::
* СохранитьПерсональныеНастройки::
* СпискиЗначенийИдентичны::
* СравнитьВерсии::
* СравнитьВерсииБезНомераСборки::
* СсылкаСуществует::
* СтраховойНомерПФРСоответствуетТребованиям::
* СтрокаВДату::
* СтрокаВЧисло::
* СтрокаЛатиницей::
* СтрокаСЧисломДляЛюбогоЯзыка::
* СтрокаТаблицыЗначенийВСтруктуру::
* СтрокиИзБуфераОбмена::
* СтроковоеПредставлениеТипа::
* СтруктураURI::
* СтруктураВРасписание::
* СтруктураПараметровДляУстановкиВнешнегоСоединения::
* СтруктураПоМенеджеруЗаписи::
* СтруктураСвойствДинамическогоСписка::
* СформироватьСтрокуДляПоискаВЗапросе::
* СформироватьСтрокуСимволов::
* ТаблицаЗначенийВМассив::
* ТекстОшибкиЗаполнения::
* ТекущаяДатаПользователя::
* ТипПлатформыКлиента::
* ТолькоКириллицаВСтроке::
* ТолькоЛатиницаВСтроке::
* ТолькоЦифрыВСтроке::
* ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ::
* УдалитьВременныйКаталог::
* УдалитьВсеВхожденияЗначенияИзМассива::
* УдалитьВсеВхожденияТипаИзМассива::
* УдалитьДанныеИзБезопасногоХранилища::
* УдалитьЗадание::
* УдалитьЗаписиКэшаВерсий::
* УдалитьЗначениеИзМассива::
* УдалитьНедопустимыеСимволыXML::
* УдалитьНепроверяемыеРеквизитыИзМассива::
* УдалитьПовторяющиесяСимволы::
* УдалитьПоследнийСимволВСтроке::
* УдалитьПрофильБезопасности::
* УдалитьСеансыИнформационнойБазы::
* УдалитьЭлементыГруппыОтбора::
* УдалитьЭлементыГруппыОтбораДинамическогоСписка::
* УникальныйИдентификатор::
* УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы::
* УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы::
* УстановитьВнешнееСоединение::
* УстановитьВнешнееСоединениеСБазой::
* УстановитьИспользованиеРегламентногоЗадания::
* УстановитьКомпонентуИзМакета::
* УстановитьОтображениеЗаголовковГрупп::
* УстановитьПараметрДинамическогоСписка::
* УстановитьПараметрыАдминистрирования::
* УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы::
* УстановитьПрофильБезопасностиИнформационнойБазы::
* УстановитьРабочуюДатуПользователя::
* УстановитьРасписаниеРегламентногоЗадания::
* УстановитьРасширенныйЗаголовокПриложения::
* УстановитьРеквизитФормыПоПути::
* УстановитьСвойстваДинамическогоСписка::
* УстановитьСвойстваПрофиляБезопасности::
* УстановитьСвойствоЭлементаФормы::
* УстановитьСостояниеПоляТабличногоДокумента::
* УстановитьУсловноеОформлениеПоляДата::
* УстановитьЭлементОтбора::
* УстановитьЭлементОтбораДинамическогоСписка::
* УстановкаПараметровСеанса::
* ФамилияИнициалы::
* ФиксированныеДанные::
* ФИОНаписаноВерно::
* ФорматированнаяСтрока::
* ХранилищеНастроекДанныхФормЗагрузить::
* ХранилищеНастроекДанныхФормСохранить::
* ХранилищеНастроекДанныхФормУдалить::
* ХранилищеОбщихНастроекЗагрузить::
* ХранилищеОбщихНастроекСохранить::
* ХранилищеОбщихНастроекСохранитьМассив::
* ХранилищеОбщихНастроекУдалить::
* ХранилищеСистемныхНастроекЗагрузить::
* ХранилищеСистемныхНастроекСохранить::
* ХранилищеСистемныхНастроекУдалить::
* ЦветСтиля::
* ЧастиИмени::
* ШрифтСтиля::
* ЭтоLinuxКлиент::
* ЭтоLinuxСервер::
* ЭтоOSXКлиент::
* ЭтоWindowsКлиент::
* ЭтоАвтономноеРабочееМесто::
* ЭтоБазоваяВерсияКонфигурации::
* ЭтоБизнесПроцесс::
* ЭтоВебКлиент::
* ЭтоВебКлиентПодMacOS::
* ЭтоДокумент::
* ЭтоЖурналДокументов::
* ЭтоЗадача::
* ЭтоКонстанта::
* ЭтоМобильныйКлиент::
* ЭтоОбъектСсылочногоТипа::
* ЭтоПеречисление::
* ЭтоПланВидовРасчета::
* ЭтоПланВидовХарактеристик::
* ЭтоПланОбмена::
* ЭтоПланСчетов::
* ЭтоПодчиненныйУзелРИБ::
* ЭтоПодчиненныйУзелРИБСФильтром::
* ЭтоПоследовательность::
* ЭтоРазделительСлов::
* ЭтоРегистр::
* ЭтоРегистрБухгалтерии::
* ЭтоРегистрНакопления::
* ЭтоРегистрРасчета::
* ЭтоРегистрСведений::
* ЭтоРегламентноеЗадание::
* ЭтоСправочник::
* ЭтоСсылка::
* ЭтоСтандартныйРеквизит::
* ЭтоУникальныйИдентификатор::
@end menu

@node АдресаЭлектроннойПочтыИзСтроки
@section АдресаЭлектроннойПочтыИзСтроки
@ifinfo
@heading АдресаЭлектроннойПочтыИзСтроки
@end ifinfo
 Разбирает строку с адресами электронной почты. При разборе проверяет корректность адресов.
@*@b{Синтаксис}@*
@deffn Функция АдресаЭлектроннойПочтыИзСтроки(Знач СписокАдресов) Экспорт
@*@b{Параметры}@*
@example
СписокАдресов - Строка - адреса электронной почты, разделитель - запятая, либо точка с запятой:
                           Получатель1 <Адрес1>, Получатель 2 <Адрес2>... Получатель N <АдресN>
@end example
@*@b{Возвращаемое значение}@*
@example
Массив - содержит массив структур адресов.
           Поля структуры:
             Псевдоним      - Строка - представление адресата.
             Адрес          - Строка - найденный и соответствующий требованиям почтовый адрес;
                                       Если текст, похожий на адрес найден, но не соответствует требованиям
                                       стандартов, то такой текст записывается в поле "Псевдоним".
             ОписаниеОшибки - Строка - текстовое представление ошибки, либо пустая строка, если ошибок нет.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СписокАдресов)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node АдресВходаВПрограмму
@section АдресВходаВПрограмму
@ifinfo
@heading АдресВходаВПрограмму
@end ifinfo
 Формирует ссылку для входа в программу для указанного пользователя.
@*@b{Синтаксис}@*
@deffn Функция АдресВходаВПрограмму(Пользователь, Пароль, ВидПубликацииИБ) Экспорт
@*@b{Параметры}@*
@example
  Пользователь - Строка - логин пользователя для входа в программу;
  Пароль - Строка - пароль пользователя для входа в программу;
  ВидПубликацииИБ - Строка - через какую публикацию пользователь входит в программу:
                           "ВИнтернете" или "ВЛокальнойСети".
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка, Неопределено - адрес входа в программу или Неопределено, если адрес не настроен.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.АдресВходаВПрограмму(Пользователь, Пароль, ВидПубликацииИБ)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node АдресПубликацииИнформационнойБазыВИнтернете
@section АдресПубликацииИнформационнойБазыВИнтернете
@ifinfo
@heading АдресПубликацииИнформационнойБазыВИнтернете
@end ifinfo
 Возвращает адрес публикации информационной базы для формирования прямых ссылок на объекты ИБ 
 для возможности перехода к ним пользователей, имеющих доступ к базе через публикацию в сети Интернет.
 Например, если такой адрес включить в электронное письмо, то из письма за одно нажатие
 можно перейти к форме объекта в самой программе.
@*@b{Синтаксис}@*
@deffn Функция АдресПубликацииИнформационнойБазыВИнтернете() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Строка - адрес информационной базы, как он задан в настройке "Адрес в Интернете" в панели администрирования
            (хранится в константе АдресПубликацииИнформационнойБазыВИнтернете).
            Например, "http://1c.ru/database".
@end example
@*@b{Пример вызова}@*
  АдресПубликацииИнформационнойБазыВЛокальнойСети() + "/" + e1cib/app/Обработка.ВыгрузкаДанныхПроекта";
  возвращает прямую ссылку для открытия обработки ВыгрузкаДанныхПроекта.
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node АдресПубликацииИнформационнойБазыВЛокальнойСети
@section АдресПубликацииИнформационнойБазыВЛокальнойСети
@ifinfo
@heading АдресПубликацииИнформационнойБазыВЛокальнойСети
@end ifinfo
 Возвращает адрес публикации информационной базы для формирования прямых ссылок на объекты ИБ 
 для возможности перехода к ним пользователей, имеющих доступ к базе через публикацию локальной сети.
 Например, если такой адрес включить в электронное письмо, то из письма за одно нажатие
 можно перейти к форме объекта в самой программе.
@*@b{Синтаксис}@*
@deffn Функция АдресПубликацииИнформационнойБазыВЛокальнойСети() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Строка - адрес информационной базы, как он задан в настройке "Локальный адрес" в панели администрирования
            (хранится в константе АдресПубликацииИнформационнойБазыВЛокальнойСети).
            Например, "http://localserver/base".
@end example
@*@b{Пример вызова}@*
  АдресПубликацииИнформационнойБазыВЛокальнойСети() + "/" + e1cib/app/Обработка.ВыгрузкаДанныхПроекта";
  возвращает прямую ссылку для открытия обработки ВыгрузкаДанныхПроекта.
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node АдресЭлектроннойПочтыСоответствуетТребованиям
@section АдресЭлектроннойПочтыСоответствуетТребованиям
@ifinfo
@heading АдресЭлектроннойПочтыСоответствуетТребованиям
@end ifinfo
 Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
 а также RFC 5335, RFC 5336 и RFC 3696.
 Кроме того, функция ограничивает использование спецсимволов.
@*@b{Синтаксис}@*
@deffn Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес, РазрешитьЛокальныеАдреса = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Адрес - Строка - проверяемый email.
  РазрешитьЛокальныеАдреса - Булево - не выдавать ошибку в случае отсутствия зоны домена в адресе.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если ошибок нет.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес, РазрешитьЛокальныеАдреса)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node БлокировкаРегламентныхЗаданийИнформационнойБазы
@section БлокировкаРегламентныхЗаданийИнформационнойБазы
@ifinfo
@heading БлокировкаРегламентныхЗаданийИнформационнойБазы
@end ifinfo
 Возвращает текущее состояние блокировки регламентных заданий для информационной базы.
@*@b{Синтаксис}@*
@deffn Функция БлокировкаРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
    Булево - Истина, если удалось заблокировать регламентные задания, Ложь - иначе.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.БлокировкаРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node БлокировкаСеансовИЗаданийИнформационнойБазы
@section БлокировкаСеансовИЗаданийИнформационнойБазы
@ifinfo
@heading БлокировкаСеансовИЗаданийИнформационнойБазы
@end ifinfo
 Возвращает текущее состояние блокировки сеансов и регламентных заданий для информационной базы.
@*@b{Синтаксис}@*
@deffn Функция БлокировкаСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
    Структура - см. АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.БлокировкаСеансовИЗаданийИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ВерсияБиблиотеки
@section ВерсияБиблиотеки
@ifinfo
@heading ВерсияБиблиотеки
@end ifinfo
 Возвращает номер версии Библиотеки стандартных подсистем (БСП),
 встроенной в конфигурацию.
@*@b{Синтаксис}@*
@deffn Функция ВерсияБиблиотеки() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - версия БСП, например "1.0.1.1".
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыСервер.ВерсияБиблиотеки()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВерсияКонфигурацииБезНомераСборки
@section ВерсияКонфигурацииБезНомераСборки
@ifinfo
@heading ВерсияКонфигурацииБезНомераСборки
@end ifinfo
 Получает номер версии конфигурации без номера сборки.
@*@b{Синтаксис}@*
@deffn Функция ВерсияКонфигурацииБезНомераСборки(Знач Версия) Экспорт
@*@b{Параметры}@*
@example
  Версия - Строка - версия конфигурации в формате РР.ПП.ЗЗ.СС,
                    где СС - номер сборки, который будет удален.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - номер версии конфигурации без номера сборки в формате РР.ПП.ЗЗ.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Версия)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ВидОбъектаПоСсылке
@section ВидОбъектаПоСсылке
@ifinfo
@heading ВидОбъектаПоСсылке
@end ifinfo
 Возвращает имя вида объектов метаданных по ссылке на объект.
 Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
 См. так же ВидОбъектаПоТипу.
@*@b{Синтаксис}@*
@deffn Функция ВидОбъектаПоСсылке(Ссылка) Экспорт
@*@b{Параметры}@*
@example
  Ссылка - ЛюбаяСсылка - объект, вид которого требуется получить.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя вида объектов метаданных. Например: "Справочник", "Документ".
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВидОбъектаПоТипу
@section ВидОбъектаПоТипу
@ifinfo
@heading ВидОбъектаПоТипу
@end ifinfo
 Возвращает имя вида объектов метаданных по типу объекта.
 Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
 См. так же ВидОбъектаПоСсылке.
@*@b{Синтаксис}@*
@deffn Функция ВидОбъектаПоТипу(ТипОбъекта) Экспорт
@*@b{Параметры}@*
@example
  ТипОбъекта - Тип - Тип прикладного объекта, определенный в конфигурации.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя вида объектов метаданных. Например: "Справочник", "Документ".
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ВидОбъектаПоТипу(ТипОбъекта)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВставитьПараметрыВСтроку
@section ВставитьПараметрыВСтроку
@ifinfo
@heading ВставитьПараметрыВСтроку
@end ifinfo
 Заменяет в шаблоне строки имена параметров на их значения. Параметры в строке выделяются с двух сторон квадратными
 скобками.
@*@b{Синтаксис}@*
@deffn Функция ВставитьПараметрыВСтроку(Знач ШаблонСтроки, Знач Параметры) Экспорт
@*@b{Параметры}@*
@example
  ШаблонСтроки - Строка    - строка, в которую необходимо вставить значения.
  Параметры    - Структура - подставляемые значения параметров, где ключ - имя параметра без спецсимволов,
                             значение - вставляемое значение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка со вставленными значениями.
@end example
@*@b{Пример вызова}@*
  Значения = Новый Структура("Фамилия,Имя", "Пупкин", "Вася");
  Результат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("Здравствуй, [Имя] [Фамилия].", Значения);
  - возвращает: "Здравствуй, Вася Пупкин".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ВыгрузитьКолонку
@section ВыгрузитьКолонку
@ifinfo
@heading ВыгрузитьКолонку
@end ifinfo
 Создает массив и копирует в него значения, содержащиеся в колонке объекта, для
 которого доступен обход посредством оператора Для каждого … Из.
@*@b{Синтаксис}@*
@deffn Функция ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияСтрок           - ТаблицаЗначений,
                             ДеревоЗначений,
                             СписокЗначений,
                             ТабличнаяЧасть,
                             Соответствие,
                             Структура - коллекция, колонку которой нужно выгрузить в массив.
                                         А так же другие объекты, для которых доступен обход
                                         посредством оператора Для каждого … Из … Цикл.
  ИмяКолонки               - Строка - имя поля коллекции, значения которого нужно выгрузить.
  ТолькоУникальныеЗначения - Булево - необязательный, если истина, то в массив будут включены
                                      только различающиеся значения.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - значения колонки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВыполнитьВБезопасномРежиме
@section ВыполнитьВБезопасномРежиме
@ifinfo
@heading ВыполнитьВБезопасномРежиме
@end ifinfo
 Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
 безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
 присутствующих в составе конфигурации.
@*@b{Синтаксис}@*
@deffn Процедура ВыполнитьВБезопасномРежиме(Знач Алгоритм, Знач Параметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Алгоритм  - Строка - алгоритм на встроенном языке 1С:Предприятия.
  Параметры - Произвольный -  контекст, который требуется для выполнения алгоритмы.
    В тексте алгоритма обращение к контексту должно происходить по имени "Параметры".
    Например, выражение "Параметры.Значение1 = Параметры.Значение2" обращается к значениям
    "Значение1" и "Значение2" переданные в Параметры, как свойства.
@end example
@*@b{Пример вызова}@*
  Параметры = Новый Структура;
  Параметры.Вставить("Значение1", 1);
  Параметры.Вставить("Значение2", 10);
  ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Параметры.Значение1 = Параметры.Значение2", Параметры);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВыполнитьВФоне
@section ВыполнитьВФоне
@ifinfo
@heading ВыполнитьВФоне
@end ifinfo
 Запустить выполнение процедуры в фоновом задании, если это возможно.
 При выполнении любого из следующих условий запуск выполняется не в фоне, а сразу в основном потоке:
  * если вызов выполняется в файловой базе во внешнем соединении (в этом режиме фоновые задания не поддерживаются);
  * если приложение запущено в режиме отладки (параметр /C РежимОтладки) - для упрощения отладки конфигурации;
  * если в файловой ИБ имеются активные фоновые задания - для снижения времени ожидания пользователя;
  * если выполняется процедура модуля внешней обработки или внешнего отчета.
 Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
 Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
@*@b{Синтаксис}@*
@deffn Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
@*@b{Параметры}@*
@example
  ИмяПроцедуры           - Строка    - имя экспортной процедуры общего модуля, модуля менеджера объекта 
                                       или модуля обработки, которую необходимо выполнить в фоне.
                                       Например, "МойОбщийМодуль.МояПроцедура", "Отчеты.ЗагруженныеДанные.Сформировать"
                                       или "Обработки.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
                                       У процедуры может быть два или три формальных параметра:
                                        * Параметры       - Структура - произвольные параметры ПараметрыПроцедуры;
                                        * АдресРезультата - Строка    - адрес временного хранилища, в которое нужно
                                          поместить результат работы процедуры. Обязательно;
                                        * АдресДополнительногоРезультата - Строка - если в ПараметрыВыполнения установлен 
                                          параметр ДополнительныйРезультат, то содержит адрес дополнительного временного
                                          хранилища, в которое нужно поместить результат работы процедуры. Опционально.
                                       При необходимости выполнить в фоне функцию, ее следует обернуть в процедуру,
                                       а ее результат возвращать через второй параметр АдресРезультата.
  ПараметрыПроцедуры     - Структура - произвольные параметры вызова процедуры ИмяПроцедуры.
  ПараметрыВыполнения    - Структура - см. функцию ПараметрыВыполненияВФоне.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура              - параметры выполнения задания: 
   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
                                     "Выполнено", если задание было успешно выполнено;
                                     "Ошибка", если задание завершено с ошибкой;
                                     "Отменено", если задание отменено пользователем или администратором.
   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
                                     идентификатор запущенного фонового задания.
   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
                                     помещен (или уже помещен) результат работы процедуры.
   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
                                     содержит адрес дополнительного временного хранилища,
                                     в которое будет помещен (или уже помещен) результат работы процедуры.
   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
@end example
@*@b{Пример вызова}@*
  В общем виде процесс запуска и обработки результата длительной операции выглядит следующим образом:
   1) процедура, которая будет исполняться в фоне, располагается в модуле менеджера объекта или в серверном общем модуле:
    Процедура ВыполнитьДействие(Параметры, АдресРезультата) Экспорт
     ...
     ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
    КонецПроцедуры
   2) запуск операции на сервере и подключение обработчика ожидания:
    &НаКлиенте
    Процедура ВыполнитьДействие()
     ДлительнаяОперация = НачатьВыполнениеНаСервере();
     ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
     ...
     ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", ЭтотОбъект);
     ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
    КонецПроцедуры
    &НаСервере
    Функция НачатьВыполнениеНаСервере()
     ПараметрыПроцедуры = Новый Структура;
     ...
     ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
     ...
     Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.МояОбработка.ВыполнитьДействие", 
     ПараметрыПроцедуры, ПараметрыВыполнения);
    КонецФункции
   3) обработка результата выполнения операции:
    &НаКлиенте
    Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
     Если Результат = Неопределено Тогда
      Возврат;
     КонецЕсли;
     ВывестиРезультат(Результат);
    КонецПроцедуры 
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВыполнитьМетодКонфигурации
@section ВыполнитьМетодКонфигурации
@ifinfo
@heading ВыполнитьМетодКонфигурации
@end ifinfo
 Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
 При включении профилей безопасности для вызова оператора Выполнить() используется
 переход в безопасный режим с профилем безопасности, используемом для информационной базы
 (если выше по стеку не был установлен другой безопасный режим).
@*@b{Синтаксис}@*
@deffn Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ИмяМетода  - Строка - имя экспортной процедуры в формате
                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
                       общий модуль или модуль менеджера объекта.
  Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
                        в порядке расположения элементов массива.
@end example
@*@b{Пример вызова}@*
  Параметры = Новый Массив();
  Параметры.Добавить("1");
  ОбщегоНазначения.ВыполнитьМетодКонфигурации("МойОбщийМодуль.МояПроцедура", Параметры);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВыполнитьМетодОбъекта
@section ВыполнитьМетодОбъекта
@ifinfo
@heading ВыполнитьМетодОбъекта
@end ifinfo
 Выполнить экспортную процедуру объекта встроенного языка по имени.
 При включении профилей безопасности для вызова оператора Выполнить() используется
 переход в безопасный режим с профилем безопасности, используемом для информационной базы
 (если выше по стеку не был установлен другой безопасный режим).
@*@b{Синтаксис}@*
@deffn Процедура ВыполнитьМетодОбъекта(Знач Объект, Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Объект    - Произвольный - объект встроенного языка 1С:Предприятия, содержащий методы (например, ОбработкаОбъект).
  ИмяМетода - Строка       - имя экспортной процедуры модуля объекта обработки.
  Параметры - Массив       - параметры передаются в процедуру <ИмяПроцедуры>
                             в порядке расположения элементов массива.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ВыполнитьМетодОбъекта(Объект, ИмяМетода, Параметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ВычислитьВБезопасномРежиме
@section ВычислитьВБезопасномРежиме
@ifinfo
@heading ВычислитьВБезопасномРежиме
@end ifinfo
 Вычисляет переданное выражение, предварительно устанавливая безопасный режим выполнения кода
 и безопасный режим разделения данных для всех разделителей, присутствующих в составе конфигурации.
@*@b{Синтаксис}@*
@deffn Функция ВычислитьВБезопасномРежиме(Знач Выражение, Знач Параметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Выражение - Строка - выражение на встроенном языке 1С:Предприятия.
  Параметры - Произвольный - контекст, который требуется для вычисления выражения.
    В тексте выражения обращение к контексту должно происходить по имени "Параметры".
    Например, выражение "Параметры.Значение1 = Параметры.Значение2" обращается к значениям
    "Значение1" и "Значение2" переданные в Параметры, как свойства.
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - результат вычисления выражения.
@end example
@*@b{Пример вызова}@*
  // Пример 1
  Параметры = Новый Структура;
  Параметры.Вставить("Значение1", 1);
  Параметры.Вставить("Значение2", 10);
  Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Параметры.Значение1 = Параметры.Значение2", Параметры);
  // Пример 2
  Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме("СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ДанныеСовпадают
@section ДанныеСовпадают
@ifinfo
@heading ДанныеСовпадают
@end ifinfo
 Сравнивает данные сложной структуры с учетом вложенности.
@*@b{Синтаксис}@*
@deffn Функция ДанныеСовпадают(Данные1, Данные2) Экспорт
@*@b{Параметры}@*
@example
  Данные1 - Структура,    ФиксированнаяСтруктура,
            Соответствие, ФиксированноеСоответствие,
            Массив,       ФиксированныйМассив,
            ХранилищеЗначения, ТаблицаЗначений,
            Строка, Число, Булево - сравниваемые данные.
  Данные2 - Произвольный - те же типы, что и для параметра Данные1.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если совпадают.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ДанныеСовпадают(Данные1, Данные2)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ДатаСеанса
@section ДатаСеанса
@ifinfo
@heading ДатаСеанса
@end ifinfo
 Возвращает текущую дату, приведенную к часовому поясу сеанса.
 Функция возвращает время, близкое к результату функции ТекущаяДатаСеанса() в серверном контексте.
 Погрешность обусловлена временем выполнения серверного вызова.
 Предназначена для использования вместо функции ТекущаяДата().
@*@b{Синтаксис}@*
@deffn Функция ДатаСеанса() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Дата - текущая дата сеанса.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ДатаСеанса()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ДатаУниверсальная
@section ДатаУниверсальная
@ifinfo
@heading ДатаУниверсальная
@end ifinfo
 Возвращает универсальную дату сеанса, получаемую из текущей даты сеанса.
 Функция возвращает время, близкое к результату функции УниверсальноеВремя() в серверном контексте.
 Погрешность обусловлена временем выполнения серверного вызова.
 Предназначена для использования вместо функции УниверсальноеВремя().
@*@b{Синтаксис}@*
@deffn Функция ДатаУниверсальная() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Дата - универсальная дата сеанса.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ДатаУниверсальная()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ДиагностикаСоединения
@section ДиагностикаСоединения
@ifinfo
@heading ДиагностикаСоединения
@end ifinfo
 Запускает диагностику сетевого ресурса.
 Не доступно в веб-клиенте.
 В модели сервиса функциональность ограничена получением описания ошибки.
@*@b{Синтаксис}@*
@deffn Функция ДиагностикаСоединения(URL) Экспорт
@*@b{Параметры}@*
@example
  URL - Строка - адрес URL ресурса, диагностику которого надо выполнить.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - Результат работы программы.
      ОписаниеОшибки    - Строка - краткое описание ошибки.
      ЖурналДиагностики - Строка - подробный журнал диагностики с техническими подробностями.
@end example
@*@b{Пример вызова}@*
 // Диагностика веб-сервиса адресного классификатора.
 Результат = ОбщегоНазначенияКлиентСервер.ДиагностикаСоединения("https://api.orgaddress.1c.ru/orgaddress/v1?wsdl");
 ОписаниеОшибки    = Результат.ОписаниеОшибки;
 ЖурналДиагностики = Результат.ЖурналДиагностики;
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДобавитьЗадание
@section ДобавитьЗадание
@ifinfo
@heading ДобавитьЗадание
@end ifinfo
 Добавляет новое задание в очередь или как регламентное.
@*@b{Синтаксис}@*
@deffn Функция ДобавитьЗадание(Параметры) Экспорт
@*@b{Параметры}@*
@example
  Параметры - Структура - Параметры добавляемого задания, возможные ключи:
   Использование
   Метаданные - обязательно для указания.
   Параметры
   Ключ
   ИнтервалПовтораПриАварийномЗавершении.
   Расписание
   КоличествоПовторовПриАварийномЗавершении.
@end example
@*@b{Возвращаемое значение}@*
@example
  РегламентноеЗадание, СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор
  добавленного задания.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.ДобавитьЗадание(Параметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ДобавитьКонечныйРазделительПути
@section ДобавитьКонечныйРазделительПути
@ifinfo
@heading ДобавитьКонечныйРазделительПути
@end ifinfo
 Добавляет к переданному пути каталога конечный символ-разделитель, если он отсутствует.
@*@b{Синтаксис}@*
@deffn Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПутьКаталога - Строка - путь к каталогу.
  Платформа - ТипПлатформы - параметр устарел, больше не используется.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - путь к каталогу с конечным символом-разделителем.
@end example
@*@b{Пример вызова}@*
  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог"); // возвращает "C:\Мой каталог\".
  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог\"); // возвращает "C:\Мой каталог\".
  Результат = ДобавитьКонечныйРазделительПути("%APPDATA%"); // возвращает "%APPDATA%\".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДобавитьОшибкуПользователю
@section ДобавитьОшибкуПользователю
@ifinfo
@heading ДобавитьОшибкуПользователю
@end ifinfo
 Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки с помощью
 процедуры СообщитьОшибкиПользователю().
 Предназначена для накопления списка ошибок с последующей обработкой этого списка перед тем, как вывести
 пользователю. Полученный список ошибок можно, например, отсортировать по важности, очистить от дублей,
 а также вывести пользователю в ином виде, чем выводит метод СообщитьПользователю, например, в табличный документ.
@*@b{Синтаксис}@*
@deffn Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок, НомерСтроки = 0, ТекстДляНесколькихОшибок = "", ИндексСтроки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Ошибки          - Неопределено - будет создан новый список,
                  - значение, установленное при первом вызове этой процедуры со значением Неопределено.
  ПолеОшибки      - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
                    Для автоподстановки номера строки должна содержать "%1".
                    Например, "Объект.ИНН" или "Объект.Пользователи[%1].Пользователь".
  ТекстДляОднойОшибки - Строка - текст ошибки для случая, когда ГруппаОшибок в коллекции только одна,
                    например, НСтр("ru = 'Пользователь не выбран.'").
  ГруппаОшибок    - Произвольный - используется для выбора либо текста для одной ошибки,
                    либо текста для нескольких ошибок, например, имя "Объект.Пользователи".
                    Если значение не заполнено, тогда используется текст для одной ошибки.
  НомерСтроки     - Число - значение от 0 ... , определяющее номер строки, который нужно подставить
                    в строку ПолеОшибки и в ТекстДляНесколькихОшибок (подставляется НомерСтроки + 1).
  ТекстДляНесколькихОшибок - Строка - текст ошибки для случая, когда добавлено несколько ошибок с одинаковым
                    свойством ГруппаОшибок, например, НСтр("ru = 'Пользователь в строке %1 не выбран.'").
  ИндексСтроки    - Неопределено - совпадает со значением параметра НомерСтроки.
                    Число - значение от 0 ... , определяющее номер строки, который нужно подставить
                    в строку ПолеОшибки.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок, НомерСтроки, ТекстДляНесколькихОшибок, ИндексСтроки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДобавитьПереименование
@section ДобавитьПереименование
@ifinfo
@heading ДобавитьПереименование
@end ifinfo
 Добавляет описание переименования объекта метаданных при переходе на указанную версию конфигурации.
 Добавление выполняется в структуру Итог, которая передается в
 процедуру ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
@*@b{Синтаксис}@*
@deffn Процедура ДобавитьПереименование(Итог, ВерсияИБ, СтароеПолноеИмя, НовоеПолноеИмя, ИдентификаторБиблиотеки = "") Экспорт
@*@b{Параметры}@*
@example
   Итог                    - Структура - см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
   ВерсияИБ                - Строка    - версия конечной конфигурации, при переходе на которую нужно
                                         выполнить переименование, например, "2.1.2.14".
   СтароеПолноеИмя         - Строка    - старое полное имя объекта метаданных, которое нужно переименовать,
                                         например, "Подсистема._ДемоПодсистемы".
   НовоеПолноеИмя          - Строка    - новое  полное имя объекта метаданных, на которое нужно переименовать,
                                         например, "Подсистема._ДемоСервисныеПодсистемы".
   ИдентификаторБиблиотеки - Строка    - внутренний идентификатор библиотеки, к которой относится ВерсияИБ.
                                         Для основной конфигурации не требуется.
                                         Например, "СтандартныеПодсистемы" - как указано
                                         в ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
@end example
@*@b{Пример вызова}@*
 ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
  "Подсистема._ДемоПодсистемы",
  "Подсистема._ДемоСервисныеПодсистемы");
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ДобавитьСообщениеДляЖурналаРегистрации
@section ДобавитьСообщениеДляЖурналаРегистрации
@ifinfo
@heading ДобавитьСообщениеДляЖурналаРегистрации
@end ifinfo
 Записывает сообщение в журнал регистрации. 
 Если параметр ЗаписатьСобытия = Истина, то запись выполняется сразу (обращение к серверу). 
 Если ЗаписатьСобытия = Ложь (по умолчанию), то сообщение помещается в очередь, 
 которая может быть записана позднее, при следующем вызове этой или другой процедуры,
 в которую передается в качестве параметра очередь СообщенияДляЖурналаРегистрации.
@*@b{Синтаксис}@*
@deffn Процедура ДобавитьСообщениеДляЖурналаРегистрации(Знач ИмяСобытия, Знач ПредставлениеУровня = "Информация", 
	Знач Комментарий = "", Знач ДатаСобытия = "", Знач ЗаписатьСобытия = Ложь) Экспорт
@*@b{Параметры}@*
@example
   ИмяСобытия          - Строка - имя события для журнала регистрации;
   ПредставлениеУровня - Строка - описание уровня события, по нему будет определен уровень события при записи на
                                  сервере;
                                  Например: "Ошибка", "Предупреждение".
                                  Соответствуют именам элементов перечисления УровеньЖурналаРегистрации.
   Комментарий         - Строка - комментарий для события журнала;
   ДатаСобытия         - Дата   - точная дата возникновения события, описанного в сообщении. Будет добавлена в начало
                                  комментария;
   ЗаписатьСобытия     - Булево - выполнить запись всех ранее накопленных сообщений в журнал регистрации (обращение к
                                  серверу).
@end example
@*@b{Пример вызова}@*
  ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Предупреждение",
     НСтр("ru = 'Невозможно подключиться к сети Интернет для проверки обновлений.'"));
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ДобавитьЭлементКомпоновки
@section ДобавитьЭлементКомпоновки
@ifinfo
@heading ДобавитьЭлементКомпоновки
@end ifinfo
 Добавить элемент компоновки в контейнер элементов компоновки.
@*@b{Синтаксис}@*
@deffn Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбластьДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
                                                                 например, Список.Отбор или группа в отборе.
  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
  ПравоеЗначение          - Произвольный - сравниваемое значение.
  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
  Представление           - Строка - представление элемента компоновки данных.
  Использование           - Булево - использование элемента.
  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
                                                    в синтакс-помощнике.
@end example
@*@b{Возвращаемое значение}@*
@example
  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, ИмяПоля, ВидСравнения, ПравоеЗначение, Представление, Использование, знач РежимОтображения, знач ИдентификаторПользовательскойНастройки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьМассив
@section ДополнитьМассив
@ifinfo
@heading ДополнитьМассив
@end ifinfo
 Дополняет массив МассивПриемник значениями из массива МассивИсточник.
@*@b{Синтаксис}@*
@deffn Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
  МассивПриемник - Массив - массив, в который необходимо добавить значения.
  МассивИсточник - Массив - массив значений для заполнения.
  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьСоответствие
@section ДополнитьСоответствие
@ifinfo
@heading ДополнитьСоответствие
@end ifinfo
 Дополняет соответствие значениями из другого соответствия.
@*@b{Синтаксис}@*
@deffn Процедура ДополнитьСоответствие(Приемник, Источник, Заменять = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   Приемник - Соответствие - коллекция, в которую будут добавляться новые значения.
   Источник - Соответствие - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
                                       Истина - Заменять значения приемника (самый быстрый способ),
                                       Ложь   - Не заменять значения приемника (пропускать),
                                       Неопределено - Значение по умолчанию. Бросать исключение.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Приемник, Источник, Заменять)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьСтроку
@section ДополнитьСтроку
@ifinfo
@heading ДополнитьСтроку
@end ifinfo
 Дополняет строку символами слева или справа до заданной длины и возвращает ее.
 При этом удаляются незначащие символы слева и справа (подробнее про незначащие символы 
 см. синтаксис-помощник к методу платформы СокрЛП). 
 По умолчанию функция дополняет строку символами "0" (ноль) слева.
@*@b{Синтаксис}@*
@deffn Функция ДополнитьСтроку(Знач Значение, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева") Экспорт
@*@b{Параметры}@*
@example
  Значение    - Строка - исходная строка, которую необходимо дополнить символами;
  ДлинаСтроки - Число  - требуемая результирующая длина строки;
  Символ      - Строка - символ, которым необходимо дополнить строку;
  Режим       - Строка - "Слева" или "Справа" - вариант добавления символов к исходной строке.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка, дополненная символами.
@end example
@*@b{Пример вызова}@*
  1. Результат = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("1234", 10, "0", "Слева");
  Возвращает: "0000001234".
  2. Результат = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(" 1234  ", 10, "#", "Справа");
  Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
  Возвращает: "1234######".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьСтруктуру
@section ДополнитьСтруктуру
@ifinfo
@heading ДополнитьСтруктуру
@end ifinfo
 Дополняет структуру значениями из другой структуры.
@*@b{Синтаксис}@*
@deffn Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
                                       Истина - Заменять значения приемника (самый быстрый способ),
                                       Ложь   - Не заменять значения приемника (пропускать),
                                       Неопределено - Значение по умолчанию. Бросать исключение.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Приемник, Источник, Заменять)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьТаблицу
@section ДополнитьТаблицу
@ifinfo
@heading ДополнитьТаблицу
@end ifinfo
 Дополняет таблицу значений-приемник данными из таблицы значений-источник.
@*@b{Синтаксис}@*
@deffn Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
@*@b{Параметры}@*
@example
  ТаблицаИсточник - ТаблицаЗначений - таблица, из которой будут браться строки для заполнения;
  ТаблицаПриемник - ТаблицаЗначений - таблица, в которую будут добавлены строки из таблицы-источника.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДополнитьТаблицуИзМассива
@section ДополнитьТаблицуИзМассива
@ifinfo
@heading ДополнитьТаблицуИзМассива
@end ifinfo
 Дополняет таблицу значений Таблица значениями из массива Массив.
@*@b{Синтаксис}@*
@deffn Процедура ДополнитьТаблицуИзМассива(Таблица, Массив, ИмяПоля) Экспорт
@*@b{Параметры}@*
@example
  Таблица - ТаблицаЗначений - таблица, которую необходимо заполнить значениями из массива;
  Массив  - Массив - массив значений для заполнения таблицы;
  ИмяПоля - Строка - имя поля таблицы значений, в которое необходимо загрузить значения из массива.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Таблица, Массив, ИмяПоля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ДоступноИспользованиеРазделенныхДанных
@section ДоступноИспользованиеРазделенныхДанных
@ifinfo
@heading ДоступноИспользованиеРазделенныхДанных
@end ifinfo
 Возвращает признак возможности обращения к разделенным данным (которые входят в состав разделителей).
 Признак относится к сеансу, но может меняться во время работы сеанса, если разделение было включено
 в самом сеансе, поэтому проверку следует делать непосредственно перед обращением к разделенным данным.
 Возвращает Истина, если конфигурация не может работать в режиме разделения данных
 (не содержит общих реквизитов, предназначенных для разделения данных).
@*@b{Синтаксис}@*
@deffn Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если разделение не поддерживается, либо разделение выключено,
                    либо разделение включено и разделители    установлены.
          - Ложь,   если разделение включено и разделители не установлены.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЕстьЗащитаОтОпасныхДействий
@section ЕстьЗащитаОтОпасныхДействий
@ifinfo
@heading ЕстьЗащитаОтОпасныхДействий
@end ifinfo
 Проверяет наличие механизма платформы, предупреждающего об опасных действиях.
@*@b{Синтаксис}@*
@deffn Функция ЕстьЗащитаОтОпасныхДействий() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если Истина, тогда работает механизм предупреждений безопасности.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЕстьРеквизитИлиСвойствоОбъекта
@section ЕстьРеквизитИлиСвойствоОбъекта
@ifinfo
@heading ЕстьРеквизитИлиСвойствоОбъекта
@end ifinfo
 Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
@*@b{Синтаксис}@*
@deffn Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
@*@b{Параметры}@*
@example
  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
  ИмяРеквизита - Строка       - имя реквизита или свойства.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если есть.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЕстьРеквизитОбъекта
@section ЕстьРеквизитОбъекта
@ifinfo
@heading ЕстьРеквизитОбъекта
@end ifinfo
 Позволяет определить, есть ли среди реквизитов объекта реквизит с переданным именем.
@*@b{Синтаксис}@*
@deffn Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
@*@b{Параметры}@*
@example
  ИмяРеквизита - Строка - имя реквизита;
  МетаданныеОбъекта - ОбъектМетаданных - объект, в котором требуется проверить наличие реквизита.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если есть.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЕстьСсылкиНаОбъект
@section ЕстьСсылкиНаОбъект
@ifinfo
@heading ЕстьСсылкиНаОбъект
@end ifinfo
1. Для вызова с сервера
 Проверяет наличие ссылок на объект в базе данных.
@*@b{Синтаксис}@*
@deffn Функция ЕстьСсылкиНаОбъект(Знач СсылкаИлиМассивСсылок, Знач ИскатьСредиСлужебныхОбъектов = Ложь,  ДругиеИсключения = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  СсылкаИлиМассивСсылок        - ЛюбаяСсылка, Массив - объект или список объектов.
  ИскатьСредиСлужебныхОбъектов - Булево - если Истина, то не будут учитываться
                                 исключения поиска ссылок, заданные при разработке конфигурации.
                                 Про исключение поиска ссылок подробнее
                                 см. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
  ДругиеИсключения             - Массив - полные имена объектов метаданных, которые также
                                 требуется исключить из поиска ссылок.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если есть ссылки на объект.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЕстьСсылкиНаОбъект(СсылкаИлиМассивСсылок, ИскатьСредиСлужебныхОбъектов, ДругиеИсключения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

2. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ЕстьСсылкиНаОбъект.
@*@b{Синтаксис}@*
@deffn Функция ЕстьСсылкиНаОбъект(Знач СсылкаИлиМассивСсылок, Знач ИскатьСредиСлужебныхОбъектов = Ложь) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(СсылкаИлиМассивСсылок, ИскатьСредиСлужебныхОбъектов)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

@node ЗаблокироватьРаботуСВнешнимиРесурсами
@section ЗаблокироватьРаботуСВнешнимиРесурсами
@ifinfo
@heading ЗаблокироватьРаботуСВнешнимиРесурсами
@end ifinfo
 Запрещает работу с внешними ресурсами.
@*@b{Синтаксис}@*
@deffn Процедура ЗаблокироватьРаботуСВнешнимиРесурсами() Экспорт
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.ЗаблокироватьРаботуСВнешнимиРесурсами()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node Задание
@section Задание
@ifinfo
@heading Задание
@end ifinfo
 Возвращает РегламентноеЗадание из информационной базы.
@*@b{Синтаксис}@*
@deffn Функция Задание(Знач Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания 
                           или имя метаданных предопределенного регламентного задания.
                - РегламентноеЗадание - регламентное задание из которого нужно получить
                  уникальный идентификатор для получения свежей копии регламентного задания.
@end example
@*@b{Возвращаемое значение}@*
@example
  РегламентноеЗадание - прочитано из базы данных.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.Задание(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаданиеВыполнено
@section ЗаданиеВыполнено
@ifinfo
@heading ЗаданиеВыполнено
@end ifinfo
 Проверяет состояние фонового задания по переданному идентификатору.
 При аварийном завершении задания вызывает исключение, возникшее в нем,
 либо исключение общего вида "Не удалось выполнить данную операцию. Подробности см. в Журнале регистрации".
@*@b{Синтаксис}@*
@deffn Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - состояние выполнения задания.
@end example
@*@b{Пример вызова}@*
Результат = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗакрытьФормуДлительнойОперации
@section ЗакрытьФормуДлительнойОперации
@ifinfo
@heading ЗакрытьФормуДлительнойОперации
@end ifinfo
 Закрывает форму-индикатор длительной операции.
@*@b{Синтаксис}@*
@deffn Процедура ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации) Экспорт
@*@b{Параметры}@*
@example
  ФормаДлительнойОперации - УправляемаяФорма - ссылка на форму-индикатор длительной операции. 
@end example
@*@b{Пример вызова}@*
ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ЗаменитьНедопустимыеСимволыXML
@section ЗаменитьНедопустимыеСимволыXML
@ifinfo
@heading ЗаменитьНедопустимыеСимволыXML
@end ifinfo
 Заменяет недопустимые символы в XML-строке на заданные символы.
@*@b{Синтаксис}@*
@deffn Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
@*@b{Параметры}@*
@example
   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
@end example
@*@b{Возвращаемое значение}@*
@example
    Строка - строка, полученная заменой недопустимых символов в XML-строке.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Текст, СимволЗамены)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаменитьНедопустимыеСимволыВИмениФайла
@section ЗаменитьНедопустимыеСимволыВИмениФайла
@ifinfo
@heading ЗаменитьНедопустимыеСимволыВИмениФайла
@end ifinfo
 Заменяет недопустимые символы в имени файла.
@*@b{Синтаксис}@*
@deffn Функция ЗаменитьНедопустимыеСимволыВИмениФайла(Знач ИмяФайла, НаЧтоМенять = " ") Экспорт
@*@b{Параметры}@*
@example
  ИмяФайла     - Строка - исходное имя файла.
  НаЧтоМенять  - Строка - строка, на которую необходимо заменить недопустимые символы.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - преобразованное имя файла.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, НаЧтоМенять)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаменитьОдниСимволыДругими
@section ЗаменитьОдниСимволыДругими
@ifinfo
@heading ЗаменитьОдниСимволыДругими
@end ifinfo
 Выполняет замену символов в строке.
 Предназначена для простых случаев, например, для замены латиницы на похожие кириллические символы.
@*@b{Синтаксис}@*
@deffn Функция ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
@*@b{Параметры}@*
@example
  ЗаменяемыеСимволы - Строка - строка символов, каждый из которых требует замены;
  Значение          - Строка - исходная строка, в которой требуется замена символов;
  СимволыЗамены     - Строка - строка символов, на каждый из которых нужно заменить символы параметра
                               ЗаменяемыеСимволы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка после замены символов.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаменитьСсылки
@section ЗаменитьСсылки
@ifinfo
@heading ЗаменитьСсылки
@end ifinfo
 Производит замену ссылок во всех данных. После замены неиспользуемые ссылки опционально удаляются.
 Замена ссылок происходит с транзакциями по изменяемому объекту и его связям, не по анализируемой ссылке.
@*@b{Синтаксис}@*
@deffn Функция ЗаменитьСсылки(Знач ПарыЗамен, Знач Параметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   ПарыЗамен - Соответствие - Пары замен.
       * Ключ     - ЛюбаяСсылка - Что ищем (дубль).
       * Значение - ЛюбаяСсылка - На что заменяем (оригинал).
       Ссылки сами на себя и пустые ссылки для поиска будут проигнорированы.
   Параметры - Структура - Необязательный. Параметры замены.
       * СпособУдаления - Строка - Необязательный. Что делать с дублем после успешной замены.
           ""                - По умолчанию. Не предпринимать никаких действий.
           "Пометка"         - Помечать на удаление.
           "Непосредственно" - Удалять непосредственно.
       * УчитыватьПрикладныеПравила - Булево - Необязательный. Режим проверки параметра ПарыЗамен.
           Истина - По умолчанию. Проверять каждую пару "дубль-оригинал" (вызывается функция
                    ВозможностьЗаменыЭлементов модуля менеджера).
           Ложь   - Отключить прикладные проверки пар.
       * ВключатьБизнесЛогику - Булево - Необязательный. Режим записи мест использования при замене дублей на оригиналы.
           Истина - По умолчанию. Места использования дублей записываются в режиме ОбменДанными.Загрузка = Ложь.
           Ложь   - Запись ведется в режиме ОбменДанными.Загрузка = Истина.
       * ЗаменаПарыВТранзакции - Булево - Необязательный. Определяет размер транзакции.
           Истина - По умолчанию. Транзакция охватывает все места использования одного дубля. Может быть очень ресурсоемко 
                    в случае большого количества мест использований.
           Ложь   - Замена каждого места использования выполняется в отдельной транзакции.
       * ПривилегированнаяЗапись - Булево - Необязательный. Требуется ли устанавливать привилегированный режим перед запись.
           Ложь   - По умолчанию. Записывать с текущими правами.
           Истина - Записывать в привилегированном режиме.
@end example
@*@b{Возвращаемое значение}@*
@example
   ТаблицаЗначений - Неуспешные замены (ошибки).
       * Ссылка - ЛюбаяСсылка - Ссылка, которую заменяли.
       * ОбъектОшибки - Произвольный - Объект - причина ошибки.
       * ПредставлениеОбъектаОшибки - Строка - Строковое представление объекта ошибки.
       * ТипОшибки - Строка - Тип ошибки:
           "ОшибкаБлокировки"  - при обработке ссылки некоторые объекты были заблокированы.
           "ДанныеИзменены"    - в процессе обработки данные были изменены другим пользователем.
           "ОшибкаЗаписи"      - не смогли записать объект, или метод ВозможностьЗаменыЭлементов вернул отказ.
           "ОшибкаУдаления"    - не смогли удалить объект.
           "НеизвестныеДанные" - при обработке были найдены данные, которые не планировались к анализу, замена не реализована.
       * ТекстОшибки - Строка - Подробное описание ошибки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, Параметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаписатьДанныеВБезопасноеХранилище
@section ЗаписатьДанныеВБезопасноеХранилище
@ifinfo
@heading ЗаписатьДанныеВБезопасноеХранилище
@end ifinfo
 Записывает конфиденциальные данные в безопасное хранилище.
 Вызывающий код должен самостоятельно устанавливать привилегированный режим.
 Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
 а доступно только коду, который делает обращения только к своей части данных и
 в том контексте, который предполагает чтение или запись конфиденциальных данных.
@*@b{Синтаксис}@*
@deffn Процедура ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
@*@b{Параметры}@*
@example
  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
             Для объектов других типов в качестве Владельца рекомендуется использовать ссылку на
             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
             или ключ в виде строки с учетом имен подсистем.
             Например, для БСП:
               Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.АдресныеОбъекты");
             если нужно 1 хранилище на подсистему БСП:
               Владелец = "СтандартныеПодсистемы.УправлениеДоступом";
             если нужно более 1 хранилища на подсистему БСП:
               Владелец = "СтандартныеПодсистемы.УправлениеДоступом.<Уточнение>";
  Данные  - Произвольный - Данные помещаемые в безопасное хранилище. Неопределенно - удаляет все данные.
             Для удаления данных по ключу следует использовать процедуру УдалитьДанныеИзБезопасногоХранилища.
  Ключ    - Строка       - Ключ сохраняемых настроек, по умолчанию "Пароль".
@end example
@*@b{Пример вызова}@*
  Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
      Если ТекущийПользовательМожетИзменятьПароль Тогда
          УстановитьПривилегированныйРежим(Истина);
          ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Логин, "Логин");
          ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
          УстановитьПривилегированныйРежим(Ложь);
      КонецЕсли;
  КонецПроцедуры
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаписатьСобытияВЖурналРегистрации
@section ЗаписатьСобытияВЖурналРегистрации
@ifinfo
@heading ЗаписатьСобытияВЖурналРегистрации
@end ifinfo
1. Для вызова с клиента и сервера
 Процедура пакетной записи сообщений в журнал регистрации.
 После записи переменная СобытияДляЖурналаРегистрации очищается.
@*@b{Синтаксис}@*
@deffn Процедура ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации) Экспорт
@*@b{Параметры}@*
@example
  СобытияДляЖурналаРегистрации - СписокЗначений - где Значение - Структура со свойствами:
              * ИмяСобытия  - Строка - Имя записываемого события.
              * ПредставлениеУровня  - Строка - Представление значений коллекции УровеньЖурналаРегистрации.
                                       Доступные значения: "Информация", "Ошибка", "Предупреждение", "Примечание".
              * Комментарий - Строка - Комментарий события.
              * ДатаСобытия - Дата   - Дата события, подставляется в комментарий при записи.
@end example
@*@b{Пример вызова}@*
ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
   Процедура пакетной записи сообщений в журнал регистрации.
 После записи переменная СобытияДляЖурналаРегистрации очищается.
@*@b{Синтаксис}@*
@deffn Процедура ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации) Экспорт
@*@b{Параметры}@*
@example
  СобытияДляЖурналаРегистрации - СписокЗначений - где Значение - Структура со свойствами:
              * ИмяСобытия  - Строка - Имя записываемого события.
              * ПредставлениеУровня  - Строка - Представление значений коллекции УровеньЖурналаРегистрации.
                                       Доступные значения: "Информация", "Ошибка", "Предупреждение", "Примечание".
              * Комментарий - Строка - Комментарий события.
              * ДатаСобытия - Дата   - Дата события, подставляется в комментарий при записи.
@end example
@*@b{Пример вызова}@*
ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаполнитьКоллекциюСвойств
@section ЗаполнитьКоллекциюСвойств
@ifinfo
@heading ЗаполнитьКоллекциюСвойств
@end ifinfo
 Заполняет коллекцию-приемник значениями из коллекции-источник.
 В качестве коллекций источника и приемника могут выступать типы:
 ТаблицаЗначений; ДеревоЗначений; СписокЗначений и пр.
@*@b{Синтаксис}@*
@deffn Процедура ЗаполнитьКоллекциюСвойств(КоллекцияИсточник, КоллекцияПриемник) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияИсточник - ЛюбаяКоллекция - коллекция значений, которая является источником для заполнения данных;
  КоллекцияПриемник - ЛюбаяКоллекция - коллекция значений, которая является приемником для заполнения данных.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(КоллекцияИсточник, КоллекцияПриемник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗаполнитьКоллекциюЭлементовДереваДанныхФормы
@section ЗаполнитьКоллекциюЭлементовДереваДанныхФормы
@ifinfo
@heading ЗаполнитьКоллекциюЭлементовДереваДанныхФормы
@end ifinfo
 Процедура предназначена для заполнения реквизита формы типа ДанныеФормыДерево.
@*@b{Синтаксис}@*
@deffn Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияЭлементовДерева - ДанныеФормыДерево - реквизит, который нужно заполнить.
  ДеревоЗначений           - ДеревоЗначений    - данные для заполнения.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗапрашиватьПодтверждениеПриЗавершенииПрограммы
@section ЗапрашиватьПодтверждениеПриЗавершенииПрограммы
@ifinfo
@heading ЗапрашиватьПодтверждениеПриЗавершенииПрограммы
@end ifinfo
 Получает настройку необходимости выводить подтверждение при завершении работы программы
 для текущего пользователя. Предназначена для использования в форме персональных настроек
 пользователя. Пример использования см. в общей форме _ДемоМоиНастройки.
@*@b{Синтаксис}@*
@deffn Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Булево - Если Истина, то пользователю при закрытии программы будет показано
            окно с подтверждением завершения сеанса.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗапуститьПрограмму
@section ЗапуститьПрограмму
@ifinfo
@heading ЗапуститьПрограмму
@end ifinfo
1. Для вызова с клиента
 (RunApplication) Запускает внешнюю программу в соответствии с параметрами запуска.
@*@b{Синтаксис}@*
@deffn Процедура ЗапуститьПрограмму(Знач КомандаЗапуска, ПараметрыЗапускаПрограммы = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  КомандаЗапуска - Строка, Массив - Командная строка для запуска программы.
      Если Массив, то: первый элемент массива - путь к исполняемому приложению, остальные - передаваемые параметры,
      массив соответствует тому, который получит вызываемая программа в argv.
  ПараметрыЗапускаПрограммы - Структура, Неопределено - см. функцию ПараметрыЗапускаПрограммы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с клиента и сервера
 Запускает внешнюю программу в соответствии с параметрами запуска.
 Не доступно в веб-клиенте. 
@*@b{Синтаксис}@*
@deffn Функция ЗапуститьПрограмму(Знач КомандаЗапуска, ПараметрыЗапускаПрограммы = Неопределено) Экспорт 
@*@b{Параметры}@*
@example
  КомандаЗапуска - Строка, Массив - Командная строка для запуска программы.
      Если Массив, то: первый элемент массива - путь к исполняемому приложению, остальные - передаваемые параметры,
      массив соответствует тому, который получит вызываемая программа в argv.
  ПараметрыЗапускаПрограммы - Структура - см. функцию ПараметрыЗапускаПрограммы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - Результат работы программы.
      КодВозврата - Число  - код возврата программы.
      ПотокВывода - Строка - результат работы программы, направленный в поток stdout.
      ПотокОшибок - Строка - ошибки исполнения программы, направленные в поток stderr.
@end example
@*@b{Пример вызова}@*
 ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму("calc");
 ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
 ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами = Истина;
 ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму("C:\Program Files\1cv8\common\1cestart.exe", 
  ПараметрыЗапускаПрограммы);
 ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
 ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
 Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму("ping 127.0.0.1 -n 5", ПараметрыЗапускаПрограммы);
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗарегистрироватьCOMСоединитель
@section ЗарегистрироватьCOMСоединитель
@ifinfo
@heading ЗарегистрироватьCOMСоединитель
@end ifinfo
 Выполняет регистрацию компоненты "comcntr.dll" для текущей версии платформы.
 В случае успешной регистрации, предлагает пользователю перезапустить клиентский сеанс 
 для того чтобы регистрация вступила в силу.
 Вызывается перед клиентским кодом, который использует менеджер COM-соединений (V83.COMConnector)
 и инициируется интерактивными действиями пользователя.
@*@b{Синтаксис}@*
@deffn Процедура ЗарегистрироватьCOMСоединитель(Знач ВыполнитьПерезагрузкуСеанса = Истина) Экспорт
@*@b{Параметры}@*
@example
  ВыполнитьПерезагрузкуСеанса - Булево - если Истина, то после регистрации компоненты будет вызван диалог перезапуска сеанса.
@end example
@*@b{Пример вызова}@*
  ЗарегистрироватьCOMСоединитель();
    // далее идет код, использующий менеджер COM-соединений (V83.COMConnector).
    // ...
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ЗначениеВМассиве
@section ЗначениеВМассиве
@ifinfo
@heading ЗначениеВМассиве
@end ifinfo
 Создает массив и помещает в него переданное значение.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеВМассиве(Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Произвольный - любое значение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - массив из одного элемента.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеВСтрокуXML
@section ЗначениеВСтрокуXML
@ifinfo
@heading ЗначениеВСтрокуXML
@end ifinfo
 Преобразует (сериализует) любое значение в XML-строку.
 Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
 См. также ЗначениеИзСтрокиXML.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеВСтрокуXML(Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - XML-строка.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначениеВСтрокуXML(Значение)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеИзСтрокиXML
@section ЗначениеИзСтрокиXML
@ifinfo
@heading ЗначениеИзСтрокиXML
@end ifinfo
 Выполняет преобразование (десериализацию) XML-строки в значение.
 См. также ЗначениеВСтрокуXML.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
@*@b{Параметры}@*
@example
  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
@end example
@*@b{Возвращаемое значение}@*
@example
  Произвольный - значение, полученное из переданной XML-строки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеРеквизитаОбъекта
@section ЗначениеРеквизитаОбъекта
@ifinfo
@heading ЗначениеРеквизитаОбъекта
@end ifinfo
 Значение реквизита, прочитанного из информационной базы по ссылке на объект.
 Если необходимо зачитать реквизит независимо от прав текущего пользователя,
 то следует использовать предварительный переход в привилегированный режим.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
  ИмяРеквизита       - Строка - имя получаемого реквизита.
  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
                                    - если есть ограничение на уровне записей, то возвращается Неопределено;
                                    - если нет прав для работы с таблицей, то возникнет исключение.
                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
                                или любой из реквизитов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Произвольный - зависит от типа значения прочитанного реквизита.
               - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
               - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
                 то возвращается Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеРеквизитаОбъектов
@section ЗначениеРеквизитаОбъектов
@ifinfo
@heading ЗначениеРеквизитаОбъектов
@end ifinfo
 Значения реквизита, прочитанного из информационной базы для нескольких объектов.
  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
  то следует использовать предварительный переход в привилегированный режим.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
@*@b{Параметры}@*
@example
  МассивСсылок       - Массив - массив ссылок на объекты одного типа.
                                Значения массива должны быть ссылками на объекты одного типа.
  ИмяРеквизита       - Строка - например, "Код".
  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
                                    - если какой-либо объект будет исключен из выборки по правам, то этот объект
                                      будет исключен и из результата;
                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
                                или любой из реквизитов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Соответствие - Ключ - ссылка на объект, Значение - значение прочитанного реквизита.
      * Ключ     - ссылка на объект, 
      * Значение - значение прочитанного реквизита.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеСвойстваЭлементаФормы
@section ЗначениеСвойстваЭлементаФормы
@ifinfo
@heading ЗначениеСвойстваЭлементаФормы
@end ifinfo
 Возвращает значение свойства ИмяСвойства элемента формы с именем ИмяЭлемента.
 Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
 на объект, реквизит объекта или команду.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства) Экспорт
@*@b{Параметры}@*
@example
  ЭлементыФормы - ВсеЭлементФормы, ЭлементыФормы - коллекция элементов управляемой формы.
  ИмяЭлемента   - Строка       - имя элемента формы.
  ИмяСвойства   - Строка       - имя свойства элемента формы.
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - значение свойства ИмяСвойства элемента формы ИмяЭлемента.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначениеСсылочногоТипа
@section ЗначениеСсылочногоТипа
@ifinfo
@heading ЗначениеСсылочногоТипа
@end ifinfo
 Проверяет, что переданное значение имеет ссылочный тип данных.
@*@b{Синтаксис}@*
@deffn Функция ЗначениеСсылочногоТипа(Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Произвольный - проверяемое значение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если тип значения ссылочный.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначенияРеквизитовОбъекта
@section ЗначенияРеквизитовОбъекта
@ifinfo
@heading ЗначенияРеквизитовОбъекта
@end ifinfo
 Структура, содержащая значения реквизитов, прочитанные из информационной базы по ссылке на объект.
 Если необходимо зачитать реквизит независимо от прав текущего пользователя,
 то следует использовать предварительный переход в привилегированный режим.
@*@b{Синтаксис}@*
@deffn Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
                       требований к свойствам структуры.
                       Например, "Код, Наименование, Родитель".
            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
                       значения (опционально) фактическое имя поля в таблице.
                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
                       к свойствам структуры.
  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
                                    - если есть ограничение на уровне записей, то все реквизиты вернутся 
                                      со значением Неопределено;
                                    - если нет прав для работы с таблицей, то возникнет исключение.
                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу 
                                или любой из реквизитов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - содержит имена (ключи) и значения затребованных реквизитов.
            - если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
            - если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
              соответствующая именам реквизитов со значениями Неопределено.
            - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
              то все реквизиты вернутся со значением Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЗначенияРеквизитовОбъектов
@section ЗначенияРеквизитовОбъектов
@ifinfo
@heading ЗначенияРеквизитовОбъектов
@end ifinfo
 Значения реквизитов, прочитанные из информационной базы для нескольких объектов.
  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
  то следует использовать предварительный переход в привилегированный режим.
@*@b{Синтаксис}@*
@deffn Функция ЗначенияРеквизитовОбъектов(Ссылки, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Ссылки - Массив - массив ссылок на объекты одного типа.
                          Значения массива должны быть ссылками на объекты одного типа.
                          если массив пуст, то результатом будет пустое соответствие.
  Реквизиты - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам
                             структуры. Например, "Код, Наименование, Родитель".
  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
                                    - если какой-либо объект будет исключен из выборки по правам, то этот объект
                                      будет исключен и из результата;
                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
                                или любой из реквизитов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Соответствие - список объектов и значений их реквизитов:
   * Ключ - ЛюбаяСсылка - ссылка на объект;
   * Значение - Структура - значения реквизитов:
    ** Ключ - Строка - имя реквизита;
    ** Значение - Произвольный - значение реквизита.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, Реквизиты, ВыбратьРазрешенные)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИдентификаторCOMСоединителя
@section ИдентификаторCOMСоединителя
@ifinfo
@heading ИдентификаторCOMСоединителя
@end ifinfo
 Возвращает CLSID COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторCOMСоединителя(Знач ИмяCOMСоединителя) Экспорт
@*@b{Параметры}@*
@example
  ИмяCOMСоединителя - Строка - имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строковое представление CLSID.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИдентификаторCOMСоединителя(ИмяCOMСоединителя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИдентификаторИнформационнойБазы
@section ИдентификаторИнформационнойБазы
@ifinfo
@heading ИдентификаторИнформационнойБазы
@end ifinfo
1. Для вызова с сервера
 Получает уникальный идентификатор информационной базы,
 с помощью которого можно различать различные экземпляры информационных баз,
 например, при сборе статистики или в механизмах внешнего управления базами.
 Если идентификатор не заполнен, то его значение автоматически устанавливается и возвращается.
 Идентификатор хранится в константе ИдентификаторИнформационнойБазы.
 Константа ИдентификаторИнформационнойБазы не должна входить в составы планов обмена, чтобы иметь
 различные значения в каждой информационной базе (узле РИБ).
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторИнформационнойБазы() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - идентификатор информационной базы.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

2. Для вызова с клиента и сервера
 Возвращает внутренний идентификатор информационной базы.
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторИнформационнойБазы(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИнформационнойБазы) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИнформационнойБазы - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - внутренний идентификатор информационной базы.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ИдентификаторИнформационнойБазы(ИдентификаторКластера, ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИнформационнойБазы)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИдентификаторКластера
@section ИдентификаторКластера
@ifinfo
@heading ИдентификаторКластера
@end ifinfo
 Возвращает внутренний идентификатор кластера серверов.
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторКластера(Знач ПараметрыАдминистрированияКластера) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - внутренний идентификатор кластера серверов.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ИдентификаторКластера(ПараметрыАдминистрированияКластера)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИдентификаторОбъектаМетаданных
@section ИдентификаторОбъектаМетаданных
@ifinfo
@heading ИдентификаторОбъектаМетаданных
@end ifinfo
 Возвращает ссылку, соответствующую объекту метаданных, для использования в базе данных.
 См. также ОбщегоНазначения.ИдентификаторыОбъектаМетаданных.
  Поддерживаются следующие объекты метаданных.
 - Подсистемы (требуется программировать переименование).
 - Роли       (требуется программировать переименование).
 - ПланыОбмена.
 - Константы.
 - Справочники.
 - Документы.
 - ЖурналыДокументов.
 - Отчеты.
 - Обработки.
 - ПланыВидовХарактеристик.
 - ПланыСчетов.
 - ПланыВидовРасчета.
 - РегистрыСведений.
 - РегистрыНакопления.
 - РегистрыБухгалтерии.
 - РегистрыРасчета.
 - БизнесПроцессы.
 - Задачи.
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОписаниеОбъектаМетаданных - ОбъектМетаданных - объект метаданных конфигурации;
                            - Тип - тип, который можно успешно использовать в функции Метаданные.НайтиПоТипу();
                            - Строка - полное имя объекта метаданных, которое можно успешно использовать
                              в функции Метаданные.НайтиПоПолномуИмени().
@end example
@*@b{Возвращаемое значение}@*
@example
  СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений - ссылка.
@end example
@*@b{Пример вызова}@*
  Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка));
  Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
  Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Организации");
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИдентификаторыОбъектовМетаданных
@section ИдентификаторыОбъектовМетаданных
@ifinfo
@heading ИдентификаторыОбъектовМетаданных
@end ifinfo
 Возвращает ссылки, соответствующие объектам метаданных, для использования в базе данных.
 См. также ОбщегоНазначения.ИдентификаторОбъектаМетаданных.
  Поддерживаются следующие объекты метаданных.
 - Подсистемы (требуется программировать переименование).
 - Роли       (требуется программировать переименование).
 - ПланыОбмена.
 - Константы.
 - Справочники.
 - Документы.
 - ЖурналыДокументов.
 - Отчеты.
 - Обработки.
 - ПланыВидовХарактеристик.
 - ПланыСчетов.
 - ПланыВидовРасчета.
 - РегистрыСведений.
 - РегистрыНакопления.
 - РегистрыБухгалтерии.
 - РегистрыРасчета.
 - БизнесПроцессы.
 - Задачи.
@*@b{Синтаксис}@*
@deffn Функция ИдентификаторыОбъектовМетаданных(ПолныеИменаОбъектовМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ПолныеИменаОбъектовМетаданных - Массив - со значениями:
    * Строка - полное имя объекта метаданных, которое можно успешно использовать
               в функции Метаданные.НайтиПоПолномуИмени().
@end example
@*@b{Возвращаемое значение}@*
@example
  Соответствие - со свойствами:
    * Ключ     - Строка - полное имя указанного объекта метаданных.
    * Значение - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
                 СправочникСсылка.ИдентификаторыОбъектовРасширений - найденный идентификатор.
@end example
@*@b{Пример вызова}@*
  ПолныеИмена = Новый Массив;
  ПолныеИмена.Добавить(Метаданные.Справочники.Валюты.ПолноеИмя());
  ПолныеИмена.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
  Идентификаторы = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ПолныеИмена);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИзвлечьТекстИзHTML
@section ИзвлечьТекстИзHTML
@ifinfo
@heading ИзвлечьТекстИзHTML
@end ifinfo
 Очищает текст в формате HTML от тегов и возвращает неформатированный текст. 
@*@b{Синтаксис}@*
@deffn Функция ИзвлечьТекстИзHTML(Знач ИсходныйТекст) Экспорт
@*@b{Параметры}@*
@example
  ИсходныйТекст - Строка - текст в формате HTML.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - текст, очищенный от тегов, скриптов и заголовков.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ИсходныйТекст)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИзменитьЗадание
@section ИзменитьЗадание
@ifinfo
@heading ИзменитьЗадание
@end ifinfo
 Изменяет задание с указанным идентификатором.
 В случае вызова в транзакции на задание устанавливается объектная блокировка.
@*@b{Синтаксис}@*
@deffn Процедура ИзменитьЗадание(Знач Идентификатор, Знач Параметры) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор задания
  Параметры     - Структура - Параметры, которые следует установить заданию, 
   возможные ключи:
   Использование
   Параметры
   Ключ
   ИнтервалПовтораПриАварийномЗавершении.
   Расписание
   КоличествоПовторовПриАварийномЗавершении.
   В случае если задание создано на основе шаблона или предопределенное, могут быть указаны
   только следующие ключи: Использование.
@end example
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.ИзменитьЗадание(Идентификатор, Параметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИзменитьЭлементыОтбора
@section ИзменитьЭлементыОтбора
@ifinfo
@heading ИзменитьЭлементыОтбора
@end ifinfo
 Изменить элемент отбора с заданным именем поля или представлением.
@*@b{Синтаксис}@*
@deffn Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбластьПоиска - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
                                                             например, Список.Отбор или группа в отборе.
  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
  Представление           - Строка - представление элемента компоновки данных.
  ПравоеЗначение          - Произвольный - сравниваемое значение.
  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
  Использование           - Булево - использование элемента.
  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
                                                    в синтакс-помощнике.
@end example
@*@b{Возвращаемое значение}@*
@example
  Число - количество измененных элементов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОбластьПоиска, ИмяПоля, Представление, ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИменаРеквизитовПоТипу
@section ИменаРеквизитовПоТипу
@ifinfo
@heading ИменаРеквизитовПоТипу
@end ifinfo
 Возвращает имена реквизитов объекта заданного типа.
@*@b{Синтаксис}@*
@deffn Функция ИменаРеквизитовПоТипу(Ссылка, Тип) Экспорт
@*@b{Параметры}@*
@example
  Ссылка - ЛюбаяСсылка - ссылка на элемент базы данных, для которого требуется получить результат функции;
  Тип    - Тип - тип значения реквизита.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка реквизитов объекта метаданных конфигурации, разделенные символом ",".
@end example
@*@b{Пример вызова}@*
  РеквизитыОрганизации = ОбщегоНазначения.ИменаРеквизитовПоТипу(Документ.Ссылка, Тип("СправочникСсылка.Организации"));
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИмяCOMСоединителя
@section ИмяCOMСоединителя
@ifinfo
@heading ИмяCOMСоединителя
@end ifinfo
 Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
@*@b{Синтаксис}@*
@deffn Функция ИмяCOMСоединителя() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИмяБазовогоТипаПоОбъектуМетаданных
@section ИмяБазовогоТипаПоОбъектуМетаданных
@ifinfo
@heading ИмяБазовогоТипаПоОбъектуМетаданных
@end ifinfo
 Возвращает имя базового типа по переданному значению объекта метаданных.
@*@b{Синтаксис}@*
@deffn Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя базового типа по переданному значению объекта метаданных.
@end example
@*@b{Пример вызова}@*
  ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.Справочники.Номенклатура); = "Справочники".
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn
@node ИмяЗначенияПеречисления
@section ИмяЗначенияПеречисления
@ifinfo
@heading ИмяЗначенияПеречисления
@end ifinfo
 Возвращает строковое имя значения перечисления по его ссылке.
@*@b{Синтаксис}@*
@deffn Функция ИмяЗначенияПеречисления(Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - ПеречислениеСсылка - значение, для которого необходимо получить имя перечисления.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя значения перечисления.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИмяЗначенияПеречисления(Значение)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИмяТаблицыПоСсылке
@section ИмяТаблицыПоСсылке
@ifinfo
@heading ИмяТаблицыПоСсылке
@end ifinfo
 Возвращает полное имя объекта метаданных по переданному значению ссылки.
@*@b{Синтаксис}@*
@deffn Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
@*@b{Параметры}@*
@example
  Ссылка - ЛюбаяСсылка - объект, для которого необходимо получить имя таблицы ИБ.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - полное имя объекта метаданных для указанного объекта. Например: "Справочник.Номенклатура".
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИнициализироватьПараметрыОбработчикаОжидания
@section ИнициализироватьПараметрыОбработчикаОжидания
@ifinfo
@heading ИнициализироватьПараметрыОбработчикаОжидания
@end ifinfo
 Заполняет структуру параметров значениями по умолчанию.
@*@b{Синтаксис}@*
@deffn Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыОбработчикаОжидания - Структура - заполняется значениями по умолчанию. 
@end example
@*@b{Пример вызова}@*
ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ИННСоответствуетТребованиям
@section ИННСоответствуетТребованиям
@ifinfo
@heading ИННСоответствуетТребованиям
@end ifinfo
 Проверяет соответствие ИНН требованиям.
@*@b{Синтаксис}@*
@deffn Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮридическоеЛицо, ТекстСообщения) Экспорт
@*@b{Параметры}@*
@example
  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ИНН юридическим лицом.
  ТекстСообщения     - Строка - текст сообщения о найденных ошибках.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮридическоеЛицо, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ИнтервалВремениСтрокой
@section ИнтервалВремениСтрокой
@ifinfo
@heading ИнтервалВремениСтрокой
@end ifinfo
 Возвращает строковое представление интервала между переданными датами или
 относительно переданной даты и текущей даты сеанса.
@*@b{Синтаксис}@*
@deffn Функция ИнтервалВремениСтрокой(ВремяНачала, ВремяОкончания = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ВремяНачала    - Дата - начальная точка интервала.
  ВремяОкончания - Дата - конечная точка интервала, если не задана - берется текущая дата сеанса.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - представление интервала времени.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИнтервалВремениСтрокой(ВремяНачала, ВремяОкончания)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИнформационнаяБазаФайловая
@section ИнформационнаяБазаФайловая
@ifinfo
@heading ИнформационнаяБазаФайловая
@end ifinfo
1. Для вызова с клиента
 См. ОбщегоНазначения.ИнформационнаяБазаФайловая.
@*@b{Синтаксис}@*
@deffn Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
 При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
@*@b{Синтаксис}@*
@deffn Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
@*@b{Параметры}@*
@example
  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
                 нужно проверить строку соединения не текущей информационной базы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если файловая.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ИсключенияПоискаСсылок
@section ИсключенияПоискаСсылок
@ifinfo
@heading ИсключенияПоискаСсылок
@end ifinfo
 Возвращает исключения при поиске мест использования объектов.
@*@b{Синтаксис}@*
@deffn Функция ИсключенияПоискаСсылок() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Соответствие - Исключения поиска ссылок в разрезе объектов метаданных:
       * Ключ - ОбъектМетаданных - Объект метаданных, для которого применяются исключения.
       * Значение - Строка, Массив - описание исключенных реквизитов.
           Если "*", то исключены все реквизиты объекта метаданных.
           Если массив строк, то содержит относительные имена исключенных реквизитов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ИсключенияПоискаСсылок()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node КартинкаКомментария
@section КартинкаКомментария
@ifinfo
@heading КартинкаКомментария
@end ifinfo
 Получает картинку для вывода на странице с комментарием в зависимости
 от наличия текста в комментарии.
@*@b{Синтаксис}@*
@deffn Функция КартинкаКомментария(Комментарий) Экспорт
@*@b{Параметры}@*
@example
  Комментарий  - Строка - текст комментария.
@end example
@*@b{Возвращаемое значение}@*
@example
  Картинка - Картинка, которая должна отображаться на странице с комментарием.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КаталогФайловойИнформационнойБазы
@section КаталогФайловойИнформационнойБазы
@ifinfo
@heading КаталогФайловойИнформационнойБазы
@end ifinfo
 Для файлового режима работы возвращает полное имя каталога, в котором расположена информационная база.
 Если режим работы клиент-серверный, то возвращается пустая строка.
@*@b{Синтаксис}@*
@deffn Функция КаталогФайловойИнформационнойБазы() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - Полное имя каталога, в котором расположена файловая информационная база.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КлиентПодключенЧерезВебСервер
@section КлиентПодключенЧерезВебСервер
@ifinfo
@heading КлиентПодключенЧерезВебСервер
@end ifinfo
1. Для вызова с клиента и сервера
 Возвращает Истина, если клиентское приложение подключено к базе через веб-сервер.
 Если нет клиентского приложения, возвращается Ложь.
@*@b{Синтаксис}@*
@deffn Функция КлиентПодключенЧерезВебСервер() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если подключен.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.КлиентПодключенЧерезВебСервер()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

2. Для вызова с клиента
 Возвращает Истина, если клиентское приложение подключено к базе через веб-сервер.
@*@b{Синтаксис}@*
@deffn Функция КлиентПодключенЧерезВебСервер() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если подключен.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node КлючиСтруктурыВСтроку
@section КлючиСтруктурыВСтроку
@ifinfo
@heading КлючиСтруктурыВСтроку
@end ifinfo
 Получает строку, содержащую ключи структуры, разделенные символом разделителя.
@*@b{Синтаксис}@*
@deffn Функция КлючиСтруктурыВСтроку(Структура, Разделитель = ",") Экспорт
@*@b{Параметры}@*
@example
 Структура - Структура - Структура, ключи которой преобразуются в строку.
 Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
@end example
@*@b{Возвращаемое значение}@*
@example
 Строка - Строка, содержащая ключи структуры разделенные разделителем.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Структура, Разделитель, ")
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КодОсновногоЯзыка
@section КодОсновногоЯзыка
@ifinfo
@heading КодОсновногоЯзыка
@end ifinfo
 Возвращает код основного языка конфигурации, например "ru".
@*@b{Синтаксис}@*
@deffn Функция КодОсновногоЯзыка() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - код языка.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КодПоОКПОСоответствуетТребованиям
@section КодПоОКПОСоответствуетТребованиям
@ifinfo
@heading КодПоОКПОСоответствуетТребованиям
@end ifinfo
 Проверяет соответствие кода ОКПО требованиям стандартов.
@*@b{Синтаксис}@*
@deffn Функция КодПоОКПОСоответствуетТребованиям(Знач ПроверяемыйКод, ЭтоЮридическоеЛицо, ТекстСообщения = "") Экспорт
@*@b{Параметры}@*
@example
  ПроверяемыйКод         - Строка - проверяемый код ОКПО;
  ЭтоЮридическоеЛицо     - Булево - признак, является ли владелец кода ОКПО юридическим лицом;
  ТекстСообщения         - Строка - текст сообщения о найденных ошибках в проверяемом коде ОКПО.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ПроверяемыйКод, ЭтоЮридическоеЛицо, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КоллекцииИдентичны
@section КоллекцииИдентичны
@ifinfo
@heading КоллекцииИдентичны
@end ifinfo
 Функция выполняет сравнение двух коллекций строк (ТаблицаЗначений, ДеревоЗначений и т.д.),
 для которых доступен обход посредством оператора Для каждого … Из … Цикл.
 Сравниваемые коллекции должны отвечать следующим требованиям:
  - доступен обход посредством оператора Для каждого … Из … Цикл,
  - наличие в обеих коллекциях всех колонок, перечисленных в параметре ИменаКолонок 
  (если ИменаКолонок не заполнен - все колонки первой коллекции должны существовать во второй коллекции).
  Также позволяет сравнивать массивы.
@*@b{Синтаксис}@*
@deffn Функция КоллекцииИдентичны(КоллекцияСтрок1, КоллекцияСтрок2, Знач ИменаКолонок = "", Знач ИсключаяКолонки = "", УчитыватьПоследовательностьСтрок = Ложь) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияСтрок1 - ТаблицаЗначений,
                    ДеревоЗначений,
                    СписокЗначений,
                    ТабличнаяЧасть,
                    Соответствие,
                    Структура - коллекция, отвечающая вышеописанным требованиям.
                                А так же другие объекты, для которых доступен обход
                                посредством оператора Для каждого … Из … Цикл.
  КоллекцияСтрок2 - ТаблицаЗначений,
                    ДеревоЗначений,
                    СписокЗначений,
                    ТабличнаяЧасть,
                    Соответствие,
                    Структура - коллекция, отвечающая вышеописанным требованиям.
                                А так же другие объекты, для которых доступен обход
                                посредством оператора Для каждого … Из … Цикл.
  ИменаКолонок - Строка - (необязательный) имена колонок через запятую,
                          по которым производится сравнение.
                          Не является обязательным для коллекций,
                          состав колонок которых можно выявить:
                          ТаблицаЗначений, СписокЗначений, Соответствие, Структура,
                          если не указан - сравнение производится по колонкам первой коллекции.
                          Для коллекций других типов является обязательным.
  ИсключаяКолонки - Строка - (необязательный) имена колонок, которые игнорируются при сравнении.
  УчитыватьПоследовательностьСтрок - Булево - если Истина, то коллекции признаются 
                      идентичными только если одинаковые строки размещены
                      в коллекциях на одинаковых местах.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если идентичны.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.КоллекцииИдентичны(КоллекцияСтрок1, КоллекцияСтрок2, ИменаКолонок, ИсключаяКолонки, УчитыватьПоследовательностьСтрок)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node КонтрольнаяСуммаСтрокой
@section КонтрольнаяСуммаСтрокой
@ifinfo
@heading КонтрольнаяСуммаСтрокой
@end ifinfo
 Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
@*@b{Синтаксис}@*
@deffn Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Данные   - Произвольный - любое сериализуемое значение.
  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - контрольная сумма строкой без пробелов, 32 байта.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Данные, Алгоритм)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям
@section КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям
@ifinfo
@heading КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям
@end ifinfo
 Проверка контрольного ключа в номере лицевого счета (9-й разряд номера счета),
 алгоритм установлен документом:
 "ПОРЯДОК РАСЧЕТА КОНТРОЛЬНОГО КЛЮЧА В НОМЕРЕ ЛИЦЕВОГО СЧЕТА"
 (утвержден ЦБ РФ 08.09.1997 N 515).
@*@b{Синтаксис}@*
@deffn Функция КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям(НомерСчета, БИК, ЭтоБанк = Истина)Экспорт
@*@b{Параметры}@*
@example
  НомерСчета - Строка - номер банковского счета.
  БИК - Строка - БИК банка в котором открыт счет.
  ЭтоБанк - Булево - если Истина, то проверяется банковский счет, иначе проверяется как счет РКЦ 
                     (у РКЦ корреспондентский счет не заполняется).
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям(НомерСчета, БИК, ЭтоБанк)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node КППСоответствуетТребованиям
@section КППСоответствуетТребованиям
@ifinfo
@heading КППСоответствуетТребованиям
@end ifinfo
 Проверяет соответствие КПП требованиям.
 Согласно приложению к приказу ФНС России от 29.06.2012 N ММВ-7-6/435@
 "Об утверждении Порядка и условий присвоения, применения, а также изменения
 идентификационного номера налогоплательщика".
@*@b{Синтаксис}@*
@deffn Функция КППСоответствуетТребованиям(Знач КПП, ТекстСообщения) Экспорт
@*@b{Параметры}@*
@example
  КПП            - Строка - проверяемый код причины постановки на учет.
  ТекстСообщения - Строка - текст сообщения о найденных ошибках.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node МенеджерОбъектаПоПолномуИмени
@section МенеджерОбъектаПоПолномуИмени
@ifinfo
@heading МенеджерОбъектаПоПолномуИмени
@end ifinfo
 Возвращает менеджер объекта по полному имени объекта метаданных.
 Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
@*@b{Синтаксис}@*
@deffn Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
@*@b{Параметры}@*
@example
  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
@end example
@*@b{Возвращаемое значение}@*
@example
  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
@end example
@*@b{Пример вызова}@*
  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node МенеджерОбъектаПоСсылке
@section МенеджерОбъектаПоСсылке
@ifinfo
@heading МенеджерОбъектаПоСсылке
@end ifinfo
 Возвращает менеджер объекта по ссылке на объект.
 Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
 См. также ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени.
@*@b{Синтаксис}@*
@deffn Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
@*@b{Параметры}@*
@example
  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
@end example
@*@b{Возвращаемое значение}@*
@example
  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
@end example
@*@b{Пример вызова}@*
  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОрганизацию);
  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node МестаИспользования
@section МестаИспользования
@ifinfo
@heading МестаИспользования
@end ifinfo
 Получает все места использования ссылок.
 Если какая-либо ссылка нигде не используется, то строк для нее в результирующей таблице не будет.
@*@b{Синтаксис}@*
@deffn Функция МестаИспользования(Знач НаборСсылок, Знач АдресРезультата = "") Экспорт
@*@b{Параметры}@*
@example
     НаборСсылок     - Массив - Ссылки, для которых ищем места использования.
     АдресРезультата - Строка - Необязательный адрес во временном хранилище, куда будет помещен копия результата
                                замены.
@end example
@*@b{Возвращаемое значение}@*
@example
     ТаблицаЗначений - Состоит из колонок:
       * Ссылка                - ЛюбаяСсылка      - Ссылка, которая анализируется.
       * Данные                - Произвольный     - Данные, содержащие анализируемую ссылку.
       * Метаданные            - ОбъектМетаданных - Метаданные найденных данных.
       * ПредставлениеДанных   - Строка           - Представление данных, содержащих анализируемую ссылку.
       * ТипСсылки             - Тип              - Тип анализируемой ссылки.
       * ВспомогательныеДанные - Булево           - Истина, если данные используются анализируемой ссылкой как
                                                    вспомогательными  данными (ведущее измерение и т.п.).
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.МестаИспользования(НаборСсылок, АдресРезультата)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node НайтиЗадания
@section НайтиЗадания
@ifinfo
@heading НайтиЗадания
@end ifinfo
 В локальном режиме работы возвращает регламентные задания, соответствующие отбору.
 В модели сервиса - таблицу значений, в которой содержится описание найденных заданий
 в справочниках ОчередьЗаданий (если не установлены разделители) или ОчередьЗаданийОбластейДанных.
@*@b{Синтаксис}@*
@deffn Функция НайтиЗадания(Отбор) Экспорт
@*@b{Параметры}@*
@example
  Отбор - Структура - со свойствами: 
          1) Общие для любого режима работы:
             * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор регламентного задания
                                            в локальном режиме работы.
                                       - СправочникСсылка.ОчередьЗаданий,
                                         СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
                                            очереди в модели сервиса.
             * Метаданные              - ОбъектМетаданных: РегламентноеЗадание - метаданные регламентного задания.
                                       - Строка - имя регламентного задания.
             * Использование           - Булево - если Истина, задание включено.
             * Ключ                    - Строка - прикладной идентификатор задания.
          2) Возможные ключи только локального режима:
             * Наименование            - Строка - наименование регламентного задания.
             * Предопределенное        - Булево - если Истина, регламентное задание определено в метаданных.
          3) Возможные ключи только для модели сервиса:
             * ИмяМетода               - Строка - имя метода (или псевдоним) обработчика очереди задании.
             * ОбластьДанных           - Число - значение разделителя области данных задания.
             * СостояниеЗадания        - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
             * Шаблон                  - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания, используется только
                                            для разделенных заданий очереди.
@end example
@*@b{Возвращаемое значение}@*
@example
     Массив - в локальном режиме работы массив регламентных заданий.
              см. описание метода РегламентноеЗадание в синтакс-помощнике.
     ТаблицаЗначений - в модели сервиса таблица значений со свойствами:
        * ИнтервалПовтораПриАварийномЗавершении - Число - Интервал в секундах, через который нужно перезапускать
                                                     задание в случае его аварийного завершения.
        * Использование                         - Булево - если Истина, задание включено.
        * Ключ                                  - Строка - прикладной идентификатор задания.
        * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
        * Параметры                             - Массив - параметры, передаваемые в обработчик задания.
        * Расписание                            - Расписание - расписание задания.
        * УникальныйИдентификатор               - УникальныйИдентификатор - идентификатор регламентного задания
                                                     в локальном режиме работы.
                                                - СправочникСсылка.ОчередьЗаданий,
                                                  СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
                                                     очереди в модели сервиса.
        * ЗапланированныйМоментЗапуска          - Дата - дата и время запланированного запуска задания
                                                     (в часовом поясе области данных).
        * ИмяМетода                             - Строка - имя метода (или псевдоним) обработчика очереди задании.
        * ОбластьДанных                         - Число - значение разделителя области данных задания.
        * СостояниеЗадания                      - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
        * Шаблон                                - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания,
                                                     используется только для разделенных заданий очереди.
        * ЭксклюзивноеВыполнение                - Булево - при установленном флаге задание будет выполнено 
                                                     даже при установленной блокировке начала сеансов в области
                                                     данных. Так же если в области есть задания с таким флагом
                                                     сначала будут выполнены они.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.НайтиЗадания(Отбор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node НайтиНедопустимыеСимволыВИмениФайла
@section НайтиНедопустимыеСимволыВИмениФайла
@ifinfo
@heading НайтиНедопустимыеСимволыВИмениФайла
@end ifinfo
 Проверяет наличие недопустимых символов в имени файла.
@*@b{Синтаксис}@*
@deffn Функция НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла) Экспорт
@*@b{Параметры}@*
@example
  ИмяФайла  - Строка - имя файла.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив   - массив обнаруженных в имени файла недопустимых символов.
              Если недопустимых символов не обнаружено - возвращается пустой массив.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node НайтиЭлементОтбораПоПредставлению
@section НайтиЭлементОтбораПоПредставлению
@ifinfo
@heading НайтиЭлементОтбораПоПредставлению
@end ifinfo
 Выполняет поиск элемента отбора в коллекции по заданному представлению.
@*@b{Синтаксис}@*
@deffn Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
                                                                  например, Список.Отбор.Элементы или группа в отборе.
  Представление - Строка - представление группы.
@end example
@*@b{Возвращаемое значение}@*
@example
  ЭлементОтбораКомпоновкиДанных - элемент отбора.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node НайтиЭлементыИГруппыОтбора
@section НайтиЭлементыИГруппыОтбора
@ifinfo
@heading НайтиЭлементыИГруппыОтбора
@end ifinfo
 Найти элемент или группу отбора по заданному имени поля или представлению.
@*@b{Синтаксис}@*
@deffn Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбластьПоиска - ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных,
                  ГруппаЭлементовОтбораКомпоновкиДанных - контейнер
                  с элементами и группами отбора, например Список.Отбор или группа в отборе.
  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
  Представление - Строка - представление поля компоновки.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - коллекция отборов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОбластьПоиска, ИмяПоля, Представление)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node НовоеЗащищенноеСоединение
@section НовоеЗащищенноеСоединение
@ifinfo
@heading НовоеЗащищенноеСоединение
@end ifinfo
 Создает объект описания защищенного соединения OpenSSL.
@*@b{Синтаксис}@*
@deffn Функция НовоеЗащищенноеСоединение(СертификатКлиента = Неопределено, СертификатыУдостоверяющихЦентров = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  СертификатКлиента - СертификатКлиентаФайл, 
                      СертификатКлиентаWindows, 
                      Неопределено - см ЗащищенноеСоединениеOpenSSL.
  СертификатыУдостоверяющихЦентров - СертификатыУдостоверяющихЦентровФайл, 
                                     СертификатыУдостоверяющихЦентровWindows, 
                                     СертификатыУдостоверяющихЦентровLinux, 
                                     СертификатыУдостоверяющихЦентровОС, 
                                     Неопределено - см ЗащищенноеСоединениеOpenSSL.
@end example
@*@b{Возвращаемое значение}@*
@example
  ЗащищенноеСоединениеOpenSSL - описание защищенного соединения.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(СертификатКлиента, СертификатыУдостоверяющихЦентров)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ОбновитьВсеПараметрыРаботыПрограммы
@section ОбновитьВсеПараметрыРаботыПрограммы
@ifinfo
@heading ОбновитьВсеПараметрыРаботыПрограммы
@end ifinfo
 Обновляет кэши свойств метаданных, позволяющие ускорить
 открытие сеанса, а также обновление ИБ, особенно в модели сервиса.
 Их обновление происходит до обновления ИБ.
 Для использования в других библиотеках и конфигурациях.
@*@b{Синтаксис}@*
@deffn Процедура ОбновитьВсеПараметрыРаботыПрограммы() Экспорт
@*@b{Пример вызова}@*
СтандартныеПодсистемыСервер.ОбновитьВсеПараметрыРаботыПрограммы()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбновитьИнтерфейсПрограммы
@section ОбновитьИнтерфейсПрограммы
@ifinfo
@heading ОбновитьИнтерфейсПрограммы
@end ifinfo
 Обновляет интерфейс программы сохраняя текущее активное окно.
@*@b{Синтаксис}@*
@deffn Процедура ОбновитьИнтерфейсПрограммы() Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОбновитьПараметрыОбработчикаОжидания
@section ОбновитьПараметрыОбработчикаОжидания
@ifinfo
@heading ОбновитьПараметрыОбработчикаОжидания
@end ifinfo
 Заполняет структуру параметров новыми расчетными значениями.
@*@b{Синтаксис}@*
@deffn Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыОбработчикаОжидания - Структура - заполняется расчетными значениями. 
@end example
@*@b{Пример вызова}@*
ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОбщиеПараметрыБазовойФункциональности
@section ОбщиеПараметрыБазовойФункциональности
@ifinfo
@heading ОбщиеПараметрыБазовойФункциональности
@end ifinfo
 См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
@*@b{Синтаксис}@*
@deffn Функция ОбщиеПараметрыБазовойФункциональности() Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбщийМодуль
@section ОбщийМодуль
@ifinfo
@heading ОбщийМодуль
@end ifinfo
1. Для вызова с клиента
 Возвращает ссылку на общий модуль или модуль менеджера по имени.
@*@b{Синтаксис}@*
@deffn Функция ОбщийМодуль(Имя) Экспорт
@*@b{Параметры}@*
@example
  Имя - Строка - имя общего модуля.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
@end example
@*@b{Пример вызова}@*
 Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
  МодульОбновлениеКонфигурацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбновлениеКонфигурацииКлиент");
  МодульОбновлениеКонфигурацииКлиент.<Имя метода>();
 КонецЕсли;
 Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
  МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
  МодульПолнотекстовыйПоискКлиент.<Имя метода>();
 КонецЕсли;
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Возвращает ссылку на общий модуль или модуль менеджера по имени.
@*@b{Синтаксис}@*
@deffn Функция ОбщийМодуль(Имя) Экспорт
@*@b{Параметры}@*
@example
  Имя - Строка - имя общего модуля.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
@end example
@*@b{Пример вызова}@*
 Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
  МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
  МодульОбновлениеКонфигурации.<Имя метода>();
 КонецЕсли;
 Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
  МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
  МодульПолнотекстовыйПоискСервер.<Имя метода>();
 КонецЕсли;
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектXDTOВСтрокуXML
@section ОбъектXDTOВСтрокуXML
@ifinfo
@heading ОбъектXDTOВСтрокуXML
@end ifinfo
 Возвращает XML-представление XDTO-объекта.
@*@b{Синтаксис}@*
@deffn Функция ОбъектXDTOВСтрокуXML(Знач ОбъектXDTO, Знач Фабрика = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбъектXDTO - ОбъектXDTO  - объект, для которого требуется сформировать XML-представление.
  Фабрика    - ФабрикаXDTO - фабрика, с использованием которой требуется формировать XML-представление.
                             Если параметр не указан - будет использоваться глобальная фабрика XDTO.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - XML-представление XDTO-объекта.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ОбъектXDTO, Фабрика)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектXDTOИзСтрокиXML
@section ОбъектXDTOИзСтрокиXML
@ifinfo
@heading ОбъектXDTOИзСтрокиXML
@end ifinfo
 Формирует XDTO-объект по XML-представлению.
@*@b{Синтаксис}@*
@deffn Функция ОбъектXDTOИзСтрокиXML(Знач СтрокаXML, Знач Фабрика = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  СтрокаXML - Строка    - XML-представление XDTO-объекта,
  Фабрика - ФабрикаXDTO - фабрика, с использованием которой требуется формировать XDTO-объект.
                          Если параметр не указан - будет использоваться глобальная фабрика XDTO.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОбъектXDTO - XDTO-объект.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СтрокаXML, Фабрика)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектМетаданныхДоступенПоФункциональнымОпциям
@section ОбъектМетаданныхДоступенПоФункциональнымОпциям
@ifinfo
@heading ОбъектМетаданныхДоступенПоФункциональнымОпциям
@end ifinfo
 Определяет доступность объекта метаданных по функциональным опциям.
@*@b{Синтаксис}@*
@deffn Функция ОбъектМетаданныхДоступенПоФункциональнымОпциям(Знач ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
   ОбъектМетаданных - ОбъектМетаданных, Строка - проверяемый объект метаданных.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект доступен.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектМетаданныхПоИдентификатору
@section ОбъектМетаданныхПоИдентификатору
@ifinfo
@heading ОбъектМетаданныхПоИдентификатору
@end ifinfo
 Возвращает объект метаданных по переданному идентификатору.
@*@b{Синтаксис}@*
@deffn Функция ОбъектМетаданныхПоИдентификатору(Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
                  СправочникСсылка.ИдентификаторыОбъектовРасширений - идентификатор
                    объекта метаданных конфигурации или расширения.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОбъектМетаданных - объект метаданных, соответствующий идентификатору.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектПоПолномуИмени
@section ОбъектПоПолномуИмени
@ifinfo
@heading ОбъектПоПолномуИмени
@end ifinfo
 Создает и возвращает экземпляр отчета или обработки по полному имени объекта метаданных.
@*@b{Синтаксис}@*
@deffn Функция ОбъектПоПолномуИмени(ПолноеИмя) Экспорт
@*@b{Параметры}@*
@example
  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Отчет.БизнесПроцессы".
@end example
@*@b{Возвращаемое значение}@*
@example
  ОтчетОбъект, ОбработкаОбъект - экземпляр отчета или обработки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектПоПолномуИмени(ПолноеИмя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОбъектЯвляетсяГруппой
@section ОбъектЯвляетсяГруппой
@ifinfo
@heading ОбъектЯвляетсяГруппой
@end ifinfo
 Проверяет, является ли объект группой элементов.
@*@b{Синтаксис}@*
@deffn Функция ОбъектЯвляетсяГруппой(Объект) Экспорт
@*@b{Параметры}@*
@example
  Объект - ЛюбаяСсылка, Объект - проверяемый объект.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если является.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Объект)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОГРНСоответствуетТребованиям
@section ОГРНСоответствуетТребованиям
@ifinfo
@heading ОГРНСоответствуетТребованиям
@end ifinfo
 Проверяет соответствие ОГРН требованиям.
@*@b{Синтаксис}@*
@deffn Функция ОГРНСоответствуетТребованиям(Знач ОГРН, ЭтоЮридическоеЛицо, ТекстСообщения) Экспорт
@*@b{Параметры}@*
@example
  ОГРН               - Строка - проверяемый основной государственный регистрационный номер.
  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ОГРН юридическим лицом.
  ТекстСообщения     - Строка - текст сообщения о найденных ошибках.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОГРН, ЭтоЮридическоеЛицо, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ОжидатьЗавершение
@section ОжидатьЗавершение
@ifinfo
@heading ОжидатьЗавершение
@end ifinfo
 Ожидать завершения выполнения процедуры в фоновом задании и открыть форму ожидания длительной операции.
 Применяется совместно с функцией ДлительныеОперации.ВыполнитьВФоне для повышения отзывчивости пользовательского 
 интерфейса, заменяя длительный серверный вызов на запуск фонового задания.
@*@b{Синтаксис}@*
@deffn Процедура ОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении = Неопределено, 
	Знач ПараметрыОжидания = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ДлительнаяОперация     - Структура - см. возвращаемое значение функции ДлительныеОперации.ВыполнитьВФоне.
  ОповещениеОЗавершении  - ОписаниеОповещения - оповещение, которое вызывается при завершении фонового задания. 
                           Параметры процедуры-обработчика оповещения: 
   * Результат - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
    ** Статус           - Строка - "Выполнено", если задание было успешно выполнено;
                                   "Ошибка", если задание завершено с ошибкой.
    ** АдресРезультата  - Строка - адрес временного хранилища, в которое будет
                                   помещен (или уже помещен) результат работы процедуры.
    ** АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
                                      содержит адрес дополнительного временного хранилища,
                                      в которое будет помещен (или уже помещен) результат работы процедуры.
    ** КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
    ** ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
    ** Сообщения        - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, 
                                                сформированных в процедуре-обработчике длительной операции.
   * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
  ПараметрыОжидания      - Структура - см. ДлительныеОперацииКлиент.ПараметрыОжидания.
@end example
@*@b{Пример вызова}@*
ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОперативнаяПамятьДоступнаяКлиентскомуПриложению
@section ОперативнаяПамятьДоступнаяКлиентскомуПриложению
@ifinfo
@heading ОперативнаяПамятьДоступнаяКлиентскомуПриложению
@end ifinfo
 Возвращает объем оперативной памяти, доступной клиентскому  приложению.
@*@b{Синтаксис}@*
@deffn Функция ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Число - количество гигабайт оперативной памяти с точностью до десятых долей.
  Неопределено - нет клиентского приложения, то есть ТекущийРежимЗапуска() = Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ОперативнаяПамятьДоступнаяКлиентскомуПриложению()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеЗащитыБезПредупреждений
@section ОписаниеЗащитыБезПредупреждений
@ifinfo
@heading ОписаниеЗащитыБезПредупреждений
@end ifinfo
 Возвращает описание защиты от опасных действий с отключенными предупреждениями.
 Функция не приводит к ошибке компиляции при отсутствии в платформе механизмов
 предупреждений безопасности.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеЗащитыБезПредупреждений() Экспорт
@*@b{Возвращаемое значение}@*
@example
  ОписаниеЗащитыОтОпасныхДействий - со свойством ПредупреждатьОбОпасныхДействиях = Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеСвойствОбъекта
@section ОписаниеСвойствОбъекта
@ifinfo
@heading ОписаниеСвойствОбъекта
@end ifinfo
 Возвращает таблицу значений с описанием требуемых свойств всех реквизитов объекта метаданного.
 Получает значения свойств стандартных реквизитов и пользовательских реквизитов (созданных в режиме конфигуратора).
@*@b{Синтаксис}@*
@deffn Функция ОписаниеСвойствОбъекта(ОбъектМетаданных, Свойства) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных  - ОбъектМетаданных - объект, для которого необходимо получить значение свойств реквизитов.
                      Например: Метаданные.Документ.РеализацияТоваровИУслуг
  Свойства - Строка - свойства реквизитов, перечисленные через запятую, значение которых необходимо получить.
                      Например: "Имя, Тип, Синоним, Подсказка".
@end example
@*@b{Возвращаемое значение}@*
@example
  ТаблицаЗначений - описание требуемых свойств всех реквизитов объекта метаданных.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеСвойствОбъекта(ОбъектМетаданных, Свойства)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеТипаВсеСсылки
@section ОписаниеТипаВсеСсылки
@ifinfo
@heading ОписаниеТипаВсеСсылки
@end ifinfo
 Возвращает описание типа, включающего в себя все возможные ссылочные типы конфигурации.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеТипаВсеСсылки() Экспорт
@*@b{Возвращаемое значение}@*
@example
  ОписаниеТипов - все ссылочные типы конфигурации.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеТипаВсеСсылки()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеТипаДата
@section ОписаниеТипаДата
@ifinfo
@heading ОписаниеТипаДата
@end ifinfo
 Создает объект ОписаниеТипов, содержащий тип Дата.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеТипаДата(ЧастиДаты) Экспорт
@*@b{Параметры}@*
@example
  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОписаниеТипов - описание типа Дата.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеТипаСостоитИзТипа
@section ОписаниеТипаСостоитИзТипа
@ifinfo
@heading ОписаниеТипаСостоитИзТипа
@end ifinfo
 Проверить, что описание типа состоит из единственного типа значения и 
 совпадает с нужным типом.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеТипаСостоитИзТипа(ОписаниеТипа, ТипЗначения) Экспорт
@*@b{Параметры}@*
@example
   ОписаниеТипа - ОписаниеТипов - проверяемая коллекция типов;
   ТипЗначения  - Тип - проверяемый тип.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если совпадает.
@end example
@*@b{Пример вызова}@*
  Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево") Тогда
    // Выводим поле в виде флажка.
  КонецЕсли;
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn
@node ОписаниеТипаСтрока
@section ОписаниеТипаСтрока
@ifinfo
@heading ОписаниеТипаСтрока
@end ifinfo
 Создает объект ОписаниеТипов, содержащий тип Строка.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеТипаСтрока(ДлинаСтроки) Экспорт
@*@b{Параметры}@*
@example
  ДлинаСтроки - Число - длина строки.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОписаниеТипов - описание типа Строка.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОписаниеТипаЧисло
@section ОписаниеТипаЧисло
@ifinfo
@heading ОписаниеТипаЧисло
@end ifinfo
 Создает объект ОписаниеТипов, содержащий тип Число.
@*@b{Синтаксис}@*
@deffn Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Разрядность - Число - общее количество разрядов числа (количество разрядов
                        целой части плюс количество разрядов дробной части).
  РазрядностьДробнойЧасти - Число - число разрядов дробной части.
  ЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
@end example
@*@b{Возвращаемое значение}@*
@example
  ОписаниеТипов - описание типа Число.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОповеститьОбИзмененииОбъекта
@section ОповеститьОбИзмененииОбъекта
@ifinfo
@heading ОповеститьОбИзмененииОбъекта
@end ifinfo
 Оповещает открытые формы и динамические списки об изменении одного объекта.
@*@b{Синтаксис}@*
@deffn Процедура ОповеститьОбИзмененииОбъекта(Источник, Знач ДополнительныеПараметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Источник - ЛюбаяСсылка,
             РегистрСведенийКлючЗаписи,
             РегистрНакопленияКлючЗаписи,
             РегистрБухгалтерииКлючЗаписи,
             РегистрРасчетаКлючЗаписи - ссылка измененного объекта или ключ измененной записи регистра, об изменении 
                                        которой(го) необходимо уведомить динамические списки и формы.
  ДополнительныеПараметры - Произвольный - любые параметры, которые необходимо передать в методе Оповестить.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Источник, ДополнительныеПараметры)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОповеститьОбИзмененииОбъектов
@section ОповеститьОбИзмененииОбъектов
@ifinfo
@heading ОповеститьОбИзмененииОбъектов
@end ifinfo
 Оповещает открытые формы и динамические списки об изменении сразу нескольких объектов.
@*@b{Синтаксис}@*
@deffn Процедура ОповеститьОбИзмененииОбъектов(Источник, Знач ДополнительныеПараметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Источник - Тип, ОписаниеТипов - тип или типы объектов, об изменении которых необходимо уведомить 
                                  динамические списки и формы;
           - Массив - список измененных ссылок и/или ключей записей регистров, об изменении 
                      которых необходимо уведомить динамические списки и формы.
  ДополнительныеПараметры - Произвольный - любые параметры, которые необходимо передать в методе Оповестить.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(Источник, ДополнительныеПараметры)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьЖурналРегистрации
@section ОткрытьЖурналРегистрации
@ifinfo
@heading ОткрытьЖурналРегистрации
@end ifinfo
 Открывает форму журнала регистрации с установленным отбором.
@*@b{Синтаксис}@*
@deffn Процедура ОткрытьЖурналРегистрации(Знач Отбор = Неопределено, Владелец = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Отбор - Структура - со свойствами:
     * Пользователь              - Строка, СписокЗначений - имя или список пользователей
                                                            информационной базы.
     * СобытиеЖурналаРегистрации - Строка, Массив - идентификатор события.
     * ДатаНачала                - Дата           - начало интервала отображаемых событий.
     * ДатаОкончания             - Дата           - конец интервала отображаемых событий.
     * Данные                    - Произвольный   - данные любого типа.
     * Сеанс                     - СписокЗначений - список выбираемых сеансов.
     * Уровень                   - Строка, Массив - представление уровня важности
                                                    события журнала регистрации.
     * ИмяПриложения             - Массив         - массив идентификаторов приложения.
  Владелец - УправляемаяФорма - форма, из которой открывается журнал регистрации.
@end example
@*@b{Пример вызова}@*
ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, Владелец)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьНавигационнуюСсылку
@section ОткрытьНавигационнуюСсылку
@ifinfo
@heading ОткрытьНавигационнуюСсылку
@end ifinfo
 Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
 Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
 Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
 - для открытия проводника см. ОткрытьПроводник.
 - для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
@*@b{Синтаксис}@*
@deffn Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
@end example
@*@b{Пример вызова}@*
  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@@1c.ru");
  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьПроводник
@section ОткрытьПроводник
@ifinfo
@heading ОткрытьПроводник
@end ifinfo
 Открывает проводник с указанным путем.
 Если передан путь к файлу, то выполняет позиционирование курсора в проводнике на этом файле.
@*@b{Синтаксис}@*
@deffn Процедура ОткрытьПроводник(ПутьККаталогуИлиФайлу) Экспорт
@*@b{Параметры}@*
@example
  ПутьККаталогуИлиФайлу - Строка - полный путь к файлу или каталогу на диске.
@end example
@*@b{Пример вызова}@*
  // Для Windows
  ОбщегоНазначенияКлиент.ОткрытьПроводник("C:\Users");
  ОбщегоНазначенияКлиент.ОткрытьПроводник("C:\Program Files\1cv8\common\1cestart.exe");
  // Для Linux
  ОбщегоНазначенияКлиент.ОткрытьПроводник("/home/");
  ОбщегоНазначенияКлиент.ОткрытьПроводник("/opt/1C/v8.3/x86_64/1cv8c");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьСписокАктивныхПользователей
@section ОткрытьСписокАктивныхПользователей
@ifinfo
@heading ОткрытьСписокАктивныхПользователей
@end ifinfo
 Вызывается при необходимости открыть форму списка активных пользователей,
 которые в данный момент времени работают с системой.
@*@b{Синтаксис}@*
@deffn Процедура ОткрытьСписокАктивныхПользователей(ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
@*@b{Параметры}@*
@example
    ПараметрыФормы - Структура        - См. описание параметра Параметры метода ОткрытьФорму в синтакс-помощнике.
    ВладелецФормы  - УправляемаяФорма - См. описание параметра Владелец метода ОткрытьФорму в синтакс-помощнике.
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы, ВладелецФормы)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьФайлВПрограммеПросмотра
@section ОткрытьФайлВПрограммеПросмотра
@ifinfo
@heading ОткрытьФайлВПрограммеПросмотра
@end ifinfo
 Открывает файл в программе просмотра, ассоциированной с расширением файла в операционной системе.
 Блокирует возможность открытия файлов, расширение которых относятся к исполняемым файлам.
@*@b{Синтаксис}@*
@deffn Процедура ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу, Знач Оповещение = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПутьКФайлу - Строка - полный путь к файлу на диске, который требуется открыть.
  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
@end example
@*@b{Пример вызова}@*
  ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(КаталогДокументов() + "test.pdf");
  ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(КаталогДокументов() + "test.xlsx");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОткрытьФормуДлительнойОперации
@section ОткрытьФормуДлительнойОперации
@ifinfo
@heading ОткрытьФормуДлительнойОперации
@end ifinfo
 Открывает форму-индикатор длительной операции.
@*@b{Синтаксис}@*
@deffn Функция ОткрытьФормуДлительнойОперации(Знач ВладелецФормы, Знач ИдентификаторЗадания) Экспорт
@*@b{Параметры}@*
@example
  ВладелецФормы        - УправляемаяФорма - форма, из которой производится открытие. 
  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
@end example
@*@b{Возвращаемое значение}@*
@example
  УправляемаяФорма     - ссылка на открытую форму.
@end example
@*@b{Пример вызова}@*
Результат = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ВладелецФормы, ИдентификаторЗадания)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ОтменитьВыполнениеЗадания
@section ОтменитьВыполнениеЗадания
@ifinfo
@heading ОтменитьВыполнениеЗадания
@end ifinfo
 Отменяет выполнение фонового задания по переданному идентификатору.
@*@b{Синтаксис}@*
@deffn Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
@*@b{Параметры}@*
@example
  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
@end example
@*@b{Пример вызова}@*
ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ОтмеченныеЭлементы
@section ОтмеченныеЭлементы
@ifinfo
@heading ОтмеченныеЭлементы
@end ifinfo
 Получает массив значений из отмеченных элементов списка значений.
@*@b{Синтаксис}@*
@deffn Функция ОтмеченныеЭлементы(Список) Экспорт
@*@b{Параметры}@*
@example
  Список - СписокЗначений - список значений из которого будет формироваться массив значений;
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - массив значений из отмеченных элементов списка значений.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Список)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ОчиститьПараметрыСеанса
@section ОчиститьПараметрыСеанса
@ifinfo
@heading ОчиститьПараметрыСеанса
@end ifinfo
 Переводит параметры сеанса в состояние "Не установлено". 
@*@b{Синтаксис}@*
@deffn Процедура ОчиститьПараметрыСеанса(ПараметрыДляОчистки = "", Исключения = "") Экспорт
@*@b{Параметры}@*
@example
  ПараметрыДляОчистки - Строка - имена параметров сеанса для очистки, разделенные ",".
  Исключения          - Строка - имена параметров сеанса не предназначенные для очистки, разделенные ",".
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ОчиститьПараметрыСеанса(ПараметрыДляОчистки, Исключения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыАдминистрирования
@section ПараметрыАдминистрирования
@ifinfo
@heading ПараметрыАдминистрирования
@end ifinfo
 Возвращает сохраненные в информационной базы параметры администрирования.
 Предназначена для использования в механизмах, требующих для свой работы
 ввода параметров администрирования информационной базы и/или кластера серверов.
 Например, блокировка установки соединений с информационной базой.
 См. так же УстановитьПараметрыАдминистрирования.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыАдминистрирования() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - содержит свойства двух структур
              АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера 
              и АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
              При этом поля, содержащие пароли, возвращаются пустыми. Если параметры администрирования
              не были ранее сохранены при помощи функции УстановитьПараметрыАдминистрирования
              то буду возвращены автоматически вычисленные параметры администрирования по-умолчанию.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыАдминистрированияИнформационнойБазыКластера
@section ПараметрыАдминистрированияИнформационнойБазыКластера
@ifinfo
@heading ПараметрыАдминистрированияИнформационнойБазыКластера
@end ifinfo
 Конструктор структуры, описывающей параметры подключения к администрируемой информационной
  базе кластера.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыАдминистрированияИнформационнойБазыКластера() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - структура с полями:
    * ИмяВКластере - Строка - имя администрируемой информационной базы в кластере серверов,
    * ИмяАдминистратораИнформационнойБазы - Строка - имя пользователя информационной базы с правами
      администратора (если для информационной базы не задан список пользователей ИБ - используется
      пустая строка),
    * ПарольАдминистратораИнформационнойБазы - Строка - пароль пользователя информационной базы
      с правами администратора (если для информационной базы не задан список пользователей ИБ или
      для пользователя ИБ не установлен пароль - используется пустая строка).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыАдминистрированияКластера
@section ПараметрыАдминистрированияКластера
@ifinfo
@heading ПараметрыАдминистрированияКластера
@end ifinfo
 Конструктор структуры, описывающей параметры подключения к администрируемому
 кластеру серверов.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыАдминистрированияКластера() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - структура с полями:
    * ТипПодключения - Строка - возможные значения:
        "COM" - при подключении к агенту сервера с использованием COM-объекта V8*.ComConnector,
        "RAS" - при подключении к серверу администрирования (ras) с использованием консольного
                клиента сервера администрирования (rac),
    * АдресАгентаСервера - Строка - сетевой адрес агента сервера (только при ТипПодключения = "COM"),
    * ПортАгентаСервера - Число - сетевой порт агента сервера (только при ТипПодключения = "COM"),
      типичное значение - 1540,
    * АдресСервераАдминистрирования - Строка - сетевой адрес сервера администрирования ras (только
      при ТипПодключения = "RAS"),
    * ПортСервераАдминистрирования - Число - сетевой порт сервера администрирования ras (только при
      ТипПодключения = "RAS"), типичное значение - 1545,
    * ПортКластера - Число - сетевой порт менеджера администрируемого кластера, типичное значение -1541,
    * ИмяАдминистратораКластера - Строка - имя учетной записи администратора кластера (если для кластера
      не задан список администраторов - используется пустая строка),
    * ПарольАдминистратораКластера - Строка - пароль учетной записи администратора кластера (если
      для кластера не задан список администраторов или для учетной записи не установлен пароль -
      используется пустая строка).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыВопросаПользователю
@section ПараметрыВопросаПользователю
@ifinfo
@heading ПараметрыВопросаПользователю
@end ifinfo
 Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыВопросаПользователю() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура   - структура со свойствами:
    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
                                                     с ней значению.
    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
                                                     вопроса.
    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
                                                     на которой отображается количество секунд, оставшихся до
                                                     истечения таймаута.
    * Заголовок                     - Строка       - заголовок вопроса. 
    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево- если Истина, то в окне вопроса будет доступен одноименный флажок.
    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
                                                     флажке.
    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается блокируя работу всех
                                                     остальных открытых окон, включая главное окно.
    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПараметрыВыполненияВФоне
@section ПараметрыВыполненияВФоне
@ifinfo
@heading ПараметрыВыполненияВФоне
@end ifinfo
 Возвращает новую структуру для параметра ПараметрыВыполнения функции ВыполнитьВФоне.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы) Экспорт
@*@b{Параметры}@*
@example
   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, 
                               во временное хранилище которой надо поместить результат выполнения процедуры.
@end example
@*@b{Возвращаемое значение}@*
@example
   Структура - со свойствами:
     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы, 
                               во временное хранилище которой надо поместить результат выполнения процедуры.
     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи 
                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
     * ОжидатьЗавершение       - Число, Неопределено - таймаут в секундах ожидания завершения фонового задания. 
                               Если задано Неопределено, то ждать до момента завершения задания. 
                               Если задано 0, то ждать завершения задания не требуется. 
                               По умолчанию - 2 секунды; а для низкой скорости соединения - 4. 
     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
                                              По умолчанию, не задан.
     * АдресРезультата          - Строка - адрес временного хранилища, в которое должен быть помещен результат
                                           работы процедуры. Если не задан, адрес формируется автоматически.
     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне,
                               за исключением режима отладки.
                               В файловом варианте, при наличии ранее запущенных заданий,
                               новое задание становится в очередь и начинает выполняться после завершения предыдущих.
     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
                               без использования фонового задания.
     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
                               расширений конфигурации.
@end example
@*@b{Пример вызова}@*
Результат = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыЗапускаПрограммы
@section ПараметрыЗапускаПрограммы
@ifinfo
@heading ПараметрыЗапускаПрограммы
@end ifinfo
1. Для вызова с клиента
 Возвращает структуру параметров для см. процедуру ЗапуститьПрограмму.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыЗапускаПрограммы() Экспорт
@*@b{Возвращаемое значение}@*
@example
  ТекущийКаталог              - Строка - Задает текущий каталог запускаемого приложения.
  Оповещение                  - Булево - ОписаниеОповещения, Неопределено - оповещение о результате 
                                         завершения запущенного приложения.
                                         если оповещение не задано - в случае ошибки будет показано предупреждение.
      * Результат             - Структура - Результат работы программы.
          ** ПриложениеЗапущено - Булево - Истина, если внешнее приложение не вызвало ошибок при открытии.
          ** ОписаниеОшибки     - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
          ** КодВозврата        - Число  - код возврата программы.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ПараметрыЗапускаПрограммы()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с клиента и сервера
 Возвращает структуру параметров для см. процедуру ЗапуститьПрограмму.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыЗапускаПрограммы() Экспорт
@*@b{Возвращаемое значение}@*
@example
  ТекущийКаталог - Строка - Задает текущий каталог запускаемого приложения.
  ДождатьсяЗавершения - Булево - Истина - дожидаться завершения запущенного приложения 
      перед продолжением работы.
  ПолучитьПотокВывода - Булево - Истина - результат, направленный в поток stdout,
      если не указан ДождатьсяЗавершения - игнорируется.
  ПолучитьПотокОшибок - Булево - Истина - ошибки, направленные в поток stderr,
      если не указан ДождатьсяЗавершения - игнорируется.
  ВыполнитьСНаивысшимиПравами - Булево - Истина - требуется запустить программу на исполнение 
      с повышением привилегий системы:
      - подтверждение UAC для Windows;
      - интерактивным запросом c GUI sudo и перенаправлением
      $DISPLAY и $XAUTHORITY текущего пользователя для Linux;
      Не совместим с параметром ДождатьсяЗавершения. В MacOS игнорируется.
  Кодировка - Строка - Код кодировки, устанавливаемый до выполнения пакетной операции.
      В Linux и macOS игнорируется.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыИзСтроки
@section ПараметрыИзСтроки
@ifinfo
@heading ПараметрыИзСтроки
@end ifinfo
 Получает значения параметров из строки.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
@*@b{Параметры}@*
@example
  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
                              фрагмент вида <Имя параметра>=<Значение>, где:
                                Имя параметра - имя параметра; 
                                Значение - его значение. 
                              Фрагменты отделяются друг от друга символами ';'.
                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
                              кавычки (").
                              Например:
                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
  Разделитель - Строка - символ, которым фрагменты отделяются друг от друга.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - значения параметров, где ключ - имя параметра, значение - значение параметра.
@end example
@*@b{Пример вызова}@*
  Результат = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки("File=""c:\InfoBases\Trade""; Usr=""Director"";""", ";");
  - вернет структуру:
     ключ "File" и значение "c:\InfoBases\Trade"
     ключ "Usr"  и значение "Director".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыОжидания
@section ПараметрыОжидания
@ifinfo
@heading ПараметрыОжидания
@end ifinfo
 Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ДлительныеОперацииКлиент.ОжидатьЗавершение.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыОжидания(ФормаВладелец) Экспорт
@*@b{Параметры}@*
@example
  ФормаВладелец - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура              - параметры выполнения задания: 
   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
                                       Если не задан, то выводится "Пожалуйста, подождите...".
   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции. 
                                       Если используется собственный механизм индикации, то следует указать Ложь.
   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при 
                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
      *** Статус               - Строка - "Выполняется", если задание еще не завершилось;
                                           "Выполнено", если задание было успешно выполнено;
                                          "Ошибка", если задание завершено с ошибкой;
                                           "Отменено", если задание отменено пользователем или администратором.
      *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
      *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс, 
                                                            если ВыводитьПрогрессВыполнения = Истина.
      *** Сообщения            - ФиксированныйМассив, Неопределено - если ВыводитьСообщения = Истина, массив объектов СообщениеПользователю, 
                                  очередная порция сообщений, сформированных в процедуре-обработчике длительной операции.
     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
   * ВыводитьСообщения      - Булево - выводить в оповещения о завершении и прогресс сообщения, 
                                       сформированные в процедуре-обработчике длительной операции.
   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
                                       По умолчанию 0 - после каждой проверки интервал увеличивается с 1 до 15 секунд
                                       с коэффициентом 1.4.
   * ОповещениеПользователя - Структура - содержит свойства:
     ** Показать            - Булево - если Истина, то по завершении длительной операции вывести оповещение пользователя.
     ** Текст               - Строка - текст оповещения пользователя.
     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
     ** Пояснение           - Строка - пояснение оповещения пользователя.
   * ПолучатьРезультат - Булево - Служебный параметр. Не предназначен для использования.
@end example
@*@b{Пример вызова}@*
Результат = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПараметрыПодключенияWSПрокси
@section ПараметрыПодключенияWSПрокси
@ifinfo
@heading ПараметрыПодключенияWSПрокси
@end ifinfo
 Возвращает структуру параметров для функции СоздатьWSПрокси.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыПодключенияWSПрокси() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - коллекция параметров, см. СоздатьWSПрокси().
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПараметрыПодключенияWSПрокси()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПараметрыПодключенияКомпоненты
@section ПараметрыПодключенияКомпоненты
@ifinfo
@heading ПараметрыПодключенияКомпоненты
@end ifinfo
 Возвращает структуру параметров для см. процедуру ПодключитьКомпонентуИзМакета.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыПодключенияКомпоненты() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - коллекция параметров:
      * Кэшировать           - Булево - (по умолчанию Истина) использовать механизм кэширования компонент на клиенте.
      * ПредложитьУстановить - Булево - (по умолчанию Истина) предлагать устанавливать и обновлять компоненту.
      * ТекстПояснения       - Строка - для чего нужна компонента и что не будет работать, если ее не устанавливать.
      * ИдентификаторыСозданияОбъектов - Массив - идентификатор создания экземпляра модуля объекта,
                 используется только для компонент, у которых есть несколько идентификаторов создания объектов,
                 при задании параметр Идентификатор будет игнорироваться.
@end example
@*@b{Пример вызова}@*
  ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
  ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для использования сканера штрихкодов требуется
                                             |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПараметрыРаботыКлиента
@section ПараметрыРаботыКлиента
@ifinfo
@heading ПараметрыРаботыКлиента
@end ifinfo
 Возвращает значения параметров, необходимых для работы клиентского кода конфигурации
 без дополнительных серверных вызовов.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыРаботыКлиента() Экспорт
@*@b{Возвращаемое значение}@*
@example
   ФиксированнаяСтруктура - параметры работы клиента.
                            Состав свойств см. в ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПараметрыРаботыКлиентаПриЗапуске
@section ПараметрыРаботыКлиентаПриЗапуске
@ifinfo
@heading ПараметрыРаботыКлиентаПриЗапуске
@end ifinfo
 Возвращает значения параметров, необходимых для работы клиентского кода
 при запуске конфигурации за один серверный вызовов (для минимизации клиент-серверного взаимодействия
 и снижения времени запуска). 
 С помощью этой функции можно обращаться к параметрам в клиентском коде, вызываемом из обработчиков событий:
 - ПередНачаломРаботыСистемы,
 - ПриНачалеРаботыСистемы.
 В этих обработчиках, при запуске недопустимо использовать команды сброса кэша
 повторно используемых модулей, иначе запуск может привести
 к непредсказуемым ошибкам и лишним серверным вызовам.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
@*@b{Возвращаемое значение}@*
@example
   ФиксированнаяСтруктура - параметры работы клиента при запуске. 
                            См. в ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПараметрыУстановкиКомпоненты
@section ПараметрыУстановкиКомпоненты
@ifinfo
@heading ПараметрыУстановкиКомпоненты
@end ifinfo
 Возвращает структуру параметров для см. процедуру УстановитьКомпонентуИзМакета.
@*@b{Синтаксис}@*
@deffn Функция ПараметрыУстановкиКомпоненты() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - коллекция параметров:
      * ТекстПояснения - Строка - для чего нужна компонента и что не будет работать, если ее не устанавливать.
@end example
@*@b{Пример вызова}@*
  ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
  ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Для использования сканера штрихкодов требуется
                                           |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПередЗавершениемРаботыСистемы
@section ПередЗавершениемРаботыСистемы
@ifinfo
@heading ПередЗавершениемРаботыСистемы
@end ifinfo
 Выполнить стандартные действия перед завершением работы пользователя
 с областью данных, либо в локальном режиме работы.
 Предназначена для вызова из обработчика ПередЗавершениемРаботыСистемы модулей управляемого и обычного приложения.
@*@b{Синтаксис}@*
@deffn Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт
@*@b{Параметры}@*
@example
  Отказ                - Булево - Возвращаемое значение. Признак отказа от завершения работы 
                         для обработчика события ПередЗавершениемРаботыСистемы, либо программного отказа,
                         либо потребовалась интерактивная обработка. В случае успешного взаимодействия
                         с пользователем, завершение работы будет продолжено.
  ТекстПредупреждения  - Строка - см. ПередЗавершениемРаботыСистемы() в синтакс-помощнике.
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПередНачаломРаботыСистемы
@section ПередНачаломРаботыСистемы
@ifinfo
@heading ПередНачаломРаботыСистемы
@end ifinfo
 Выполнить стандартные действия перед началом работы пользователя
 с областью данных, либо в локальном режиме работы.
 Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
@*@b{Синтаксис}@*
@deffn Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередНачаломРаботыСистемы 
                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
                         оповещение с параметром типа Структура со свойствами:
                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
                         выполнен;
                         - Перезапустить - Булево - если требуется перезапуск программы;
                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы(ОповещениеЗавершения)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПодключитьКомпонентуИзМакета
@section ПодключитьКомпонентуИзМакета
@ifinfo
@heading ПодключитьКомпонентуИзМакета
@end ifinfo
1. Для вызова с клиента
 Подключает компоненту, выполненную по технологии Native API и COM асинхронном режиме.
 Компонента должна храниться в макете конфигурации в виде ZIP-архива.
 Для веб-клиента предлагается диалог, подсказывающий пользователю действия по установке.
@*@b{Синтаксис}@*
@deffn Процедура ПодключитьКомпонентуИзМакета(Оповещение, Идентификатор, ПолноеИмяМакета,
	ПараметрыПодключения = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Оповещение - ОписаниеОповещения - Описание оповещения о подключении со следующими параметрами:
      * Результат - Структура - результат подключения компоненты:
          ** Подключено         - Булево - признак подключения.
          ** ПодключаемыйМодуль - AddIn  - экземпляр объекта внешней компоненты;
                                - ФиксированноеСоответствие - экземпляры объектов внешней компоненты, 
                                     указанные в ПараметрыПодключения.ИдентификаторыСозданияОбъектов,
                                     Ключ - Идентификатор, Значение - экземпляр объекта.
          ** ОписаниеОшибки     - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
  Идентификатор        - Строка                  - идентификатор объекта внешней компоненты.
  ПолноеИмяМакета      - Строка                  - полное имя макета, используемое как местоположение компоненты.
  ПараметрыПодключения - Структура, Неопределено - см. функцию ПараметрыПодключенияКомпоненты.
@end example
@*@b{Пример вызова}@*
  Оповещение = Новый ОписаниеОповещения("ПодключитьКомпонентуЗавершение", ЭтотОбъект);
  ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
  ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для оформления заявления на выпуск сертификата требуется
                                             |внешняя компонента «Криптография (CryptS)».'");
  ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(Оповещение, 
      "CryptS",
      "Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
      ПараметрыПодключения);
  &НаКлиенте
  Процедура ПодключитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
      ПодключаемыйМодуль = Неопределено;
      Если Результат.Подключено Тогда 
          ПодключаемыйМодуль = Результат.ПодключаемыйМодуль;
      Иначе
          Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
              ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
          КонецЕсли;
      КонецЕсли;
      Если ПодключаемыйМодуль <> Неопределено Тогда 
          // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
      КонецЕсли;
      ПодключаемыйМодуль = Неопределено;
  КонецПроцедуры
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Подключает компоненту, выполненную по технологии Native API и COM.
 Компонента должна храниться в макете конфигурации в виде ZIP-архива.
@*@b{Синтаксис}@*
@deffn Функция ПодключитьКомпонентуИзМакета(Идентификатор, ПолноеИмяМакета) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор   - Строка - идентификатор объекта внешней компоненты.
  ПолноеИмяМакета - Строка - полное имя макета конфигурации, хранящего ZIP-архив.
@end example
@*@b{Возвращаемое значение}@*
@example
  AddIn, Неопределено - экземпляр объекта внешней компоненты или Неопределено, если не удалось создать.
@end example
@*@b{Пример вызова}@*
  ПодключаемыйМодуль = ОбщегоНазначения.ПодключитьКомпонентуИзМакета(
      "CNameDecl",
      "ОбщийМакет.КомпонентаСклоненияФИО");
  Если ПодключаемыйМодуль <> Неопределено Тогда 
      // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
  КонецЕсли;
  ПодключаемыйМодуль = Неопределено;
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПодсистемаСуществует
@section ПодсистемаСуществует
@ifinfo
@heading ПодсистемаСуществует
@end ifinfo
1. Для вызова с клиента
 Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
 Предназначена для реализации вызова необязательной подсистемы (условного вызова).
 У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
@*@b{Синтаксис}@*
@deffn Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
@*@b{Параметры}@*
@example
  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
                        без слов "Подсистема." и с учетом регистра символов.
                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если существует.
@end example
@*@b{Пример вызова}@*
  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
   МодульВариантыОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВариантыОтчетовКлиент");
   МодульВариантыОтчетовКлиент.<Имя метода>();
  КонецЕсли;
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
 Предназначена для реализации вызова необязательной подсистемы (условного вызова).
 У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
@*@b{Синтаксис}@*
@deffn Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
@*@b{Параметры}@*
@example
  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
                        без слов "Подсистема." и с учетом регистра символов.
                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если существует.
@end example
@*@b{Пример вызова}@*
  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
   МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
   МодульВариантыОтчетов.<Имя метода>();
  КонецЕсли;
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПодставитьПараметрыВСтроку
@section ПодставитьПараметрыВСтроку
@ifinfo
@heading ПодставитьПараметрыВСтроку
@end ifinfo
 Подставляет параметры в строку. Максимально возможное число параметров - 9.
 Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
@*@b{Синтаксис}@*
@deffn Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
                           например, "%1 пошел в %2");
  Параметр<n>   - Строка - значение подставляемого параметра.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка   - текстовая строка с подставленными параметрами.
@end example
@*@b{Пример вызова}@*
  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
  в Зоопарк".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПодставитьПараметрыВСтрокуИзМассива
@section ПодставитьПараметрыВСтрокуИзМассива
@ifinfo
@heading ПодставитьПараметрыВСтрокуИзМассива
@end ifinfo
 Подставляет параметры в строку. Число параметров в строке не ограничено.
 Параметры в строке задаются как %<номер параметра>. Нумерация параметров
 начинается с единицы.
@*@b{Синтаксис}@*
@deffn Функция ПодставитьПараметрыВСтрокуИзМассива(Знач ШаблонСтроки, Знач Параметры) Экспорт
@*@b{Параметры}@*
@example
  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
                           например, "%1 пошел в %2");
  Параметры     - Массив - значения параметров в строке ШаблонСтроки.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - строка с подставленными значениями параметрами.
@end example
@*@b{Пример вызова}@*
  ЗначенияПараметров = Новый Массив;
  ЗначенияПараметров.Добавить("Вася");
  ЗначенияПараметров.Добавить("Зоопарк");
  Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтр("ru='%1 пошел в %2'"), ЗначенияПараметров);
  - вернет строку "Вася пошел в Зоопарк".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами
@section ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами
@ifinfo
@heading ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами
@end ifinfo
 Предлагает пользователю установить расширение работы с файлами в веб-клиенте.
 Предназначена для использования в начале участков кода, в которых ведется работа с файлами.
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", 
	ВозможноПродолжениеБезУстановки = Истина) Экспорт
@*@b{Параметры}@*
@example
   ОписаниеОповещенияОЗакрытии    - ОписаниеОповещения - описание процедуры,
                                    которая будет вызвана после закрытия формы со следующими параметрами:
                                      РасширениеПодключено    - Булево - Истина, если расширение было подключено.
                                      ДополнительныеПараметры - Произвольный - параметры, заданные в
                                                                               ОписаниеОповещенияОЗакрытии.
   ТекстПредложения                - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
   ВозможноПродолжениеБезУстановки - Булево - если Истина, будет показана кнопка ПродолжитьБезУстановки,
                                              если Ложь, будет показана кнопка Отмена.
@end example
@*@b{Пример вызова}@*
    Оповещение = Новый ОписаниеОповещения("ПечатьДокументаЗавершение", ЭтотОбъект);
    ТекстСообщения = НСтр("ru = 'Для печати документа необходимо установить расширение работы с файлами.'");
    ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
    Процедура ПечатьДокументаЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
      Если РасширениеПодключено Тогда
        // код печати документа, рассчитывающий на то, что расширение подключено.
        // ...
      Иначе
        // код печати документа, который работает без подключенного расширения.
        // ...
      КонецЕсли;
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПоказатьВопросПользователю
@section ПоказатьВопросПользователю
@ifinfo
@heading ПоказатьВопросПользователю
@end ifinfo
 Показать форму вопроса.
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
                                                        вопроса со следующими параметрами:
                                                          РезультатВопроса - Структура - структура со свойствами:
                                                            Значение - результат выбора пользователя: значение
                                                                       системного перечисления или значение,
                                                                       связанное с нажатой кнопкой. В случае закрытия
                                                                       диалога по истечении времени - значение
                                                                       Таймаут.
                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
                                                                                                  пользователя в
                                                                                                  одноименном флажке.
                                                          ДополнительныеПараметры - Структура 
   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором.
                                       Значение - содержит значение, связанное с 
                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
                                                  использоваться значение
                                                  перечисления КодВозвратаДиалога, а также другие значения,
                                                  поддерживающее XDTO-сериализацию.
                                       Представление - задает текст кнопки.
   ДополнительныеПараметры       - Структура          - см. СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю.
@end example
@*@b{Возвращаемое значение}@*
@example
   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПоказатьПодтверждениеЗакрытияПроизвольнойФормы
@section ПоказатьПодтверждениеЗакрытияПроизвольнойФормы
@ifinfo
@heading ПоказатьПодтверждениеЗакрытияПроизвольнойФормы
@end ifinfo
 Задает вопрос о продолжении действия, которое приведет к закрытию формы.
 Для использования в обработчиках события ПередЗакрытием модулей форм.
 Для отображения вопроса в форме, которая  возможно записать в информационную базу, используйте: 
  см. процедуру ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы().
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Знач Форма, Отказ, Знач ЗавершениеРаботы, 
	Знач ТекстПредупреждения, Знач ИмяРеквизитаЗакрытьФормуБезПодтверждения, Знач ОписаниеОповещенияЗакрыть = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Форма                        - УправляемаяФорма - форма, которая вызывает диалог предупреждения.
  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
  ЗавершениеРаботы             - Булево - признак завершения работы программы.
  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю.
  ИмяРеквизитаЗакрытьФормуБезПодтверждения - Строка - имя реквизита, содержащего в себе признак того, нужно
                                 выводить предупреждение или нет.
  ОписаниеОповещенияЗакрыть    - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку да.
@end example
@*@b{Пример вызова}@*
  ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
  ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
      ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПодтверждения");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПоказатьПодтверждениеЗакрытияФормы
@section ПоказатьПодтверждениеЗакрытияФормы
@ifinfo
@heading ПоказатьПодтверждениеЗакрытияФормы
@end ifinfo
 Задает вопрос о продолжении действия, которое приведет к потере изменений:
 "Данные были изменены. Сохранить изменения?" 
 Для использования в обработчиках события ПередЗакрытием модулей форм объектов,
 которые возможно записать в информационную базу.
 Отображение вопроса зависит свойства модифицированности формы.
 Для отображения вопроса произвольной формы используйте: 
  см. процедуру ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы().
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьПодтверждениеЗакрытияФормы(Знач ОповещениеСохранитьИЗакрыть, Отказ, 
	Знач ЗавершениеРаботы, Знач ТекстПредупреждения = "", ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОповещениеСохранитьИЗакрыть  - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку OK.
  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
  ЗавершениеРаботы             - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю. По умолчанию, выводится текст
                                          "Данные были изменены. Сохранить изменения?"
  ТекстПредупрежденияПриЗавершении - Строка - возвращаемый параметр с текстом предупреждения, выводимым пользователю 
                                          при завершении приложения. Если параметр указан, то возвращается текст
                                          "Данные были изменены. Все изменения будут потеряны.".
@end example
@*@b{Пример вызова}@*
  &НаКлиенте
  Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
    ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
  КонецПроцедуры
  &НаКлиенте
  Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
     // записываем данные формы.
     // ...
     Модифицированность = Ложь; // не выводить подтверждение о закрытии формы еще раз.
     Закрыть(<РезультатВыбораВФорме>);
  КонецПроцедуры
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПоказатьФормуРедактированияКомментария
@section ПоказатьФормуРедактированияКомментария
@ifinfo
@heading ПоказатьФормуРедактированияКомментария
@end ifinfo
 Открывает форму редактирования многострочного комментария.
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
  ФормаВладелец           - УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
                                     комментарий.
  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
                                     По умолчанию: "Комментарий".
@end example
@*@b{Пример вызова}@*
  ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПоказатьФормуРедактированияМногострочногоТекста
@section ПоказатьФормуРедактированияМногострочногоТекста
@ifinfo
@heading ПоказатьФормуРедактированияМногострочногоТекста
@end ifinfo
 Открывает форму редактирования произвольного многострочного текста.
@*@b{Синтаксис}@*
@deffn Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
                            после закрытия формы ввода текста с теми же параметрами, что и для метода
                            ПоказатьВводСтроки.
  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
@end example
@*@b{Пример вызова}@*
   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
   &НаКлиенте
   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
      Если ВведенныйТекст = Неопределено Тогда
     Возврат;
    КонецЕсли; 
    Объект.МногострочныйКомментарий = ВведенныйТекст;
    Модифицированность = Истина;
   КонецПроцедуры
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПолучитьВерсииИнтерфейса
@section ПолучитьВерсииИнтерфейса
@ifinfo
@heading ПолучитьВерсииИнтерфейса
@end ifinfo
 Возвращает номера версий программных интерфейсов удаленной системы, доступной через веб-сервис.
 Позволяет обеспечивать полную обратную совместимость при изменениях в программных интерфейсах
 с помощью их явного версионирования. Например, если программный интерфейс выше определенной версии,
 то только в этом случае допустимо вызывать у него новую функцию.
 В целях экономии трафика при интенсивном взаимодействии между вызывающей и вызываемой сторонами 
 сведения о версиях кэшируются на одни сутки. Если для целей отладки требуется сбросить кэш раньше этого времени,
 следует удалить соответствующие записи из регистра сведений КэшПрограммныхИнтерфейсов.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьВерсииИнтерфейса(Знач Адрес, Знач Пользователь, Знач Пароль = Неопределено, Знач Интерфейс = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Адрес        - Строка - адрес веб-сервиса версионирования интерфейсов InterfaceVersion;
  Пользователь - Строка - имя пользователя веб-сервиса;
  Пароль       - Строка - пароль пользователя веб-сервиса;
  Интерфейс    - Строка - имя запрашиваемого программного интерфейса, например, "СервисПередачиФайлов".
@end example
@*@b{Возвращаемое значение}@*
@example
   ФиксированныйМассив - массив строк, каждая строка является представлением номера версии интерфейса. 
                         Например, "1.0.2.1".
@end example
@*@b{Пример вызова}@*
   Версии = ПолучитьВерсииИнтерфейса("http://vsrvx/sm", "ivanov",, "СервисПередачиФайлов");
    Также для обратной совместимости поддерживается устаревший вариант вызова:
   ПараметрыПодключения = Новый Структура;
   ПараметрыПодключения.Вставить("URL", "http://vsrvx/sm");
   ПараметрыПодключения.Вставить("UserName", "ivanov");
   ПараметрыПодключения.Вставить("Password", "");
   Версии = ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "СервисПередачиФайлов");
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение
@section ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение
@ifinfo
@heading ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение
@end ifinfo
 Возвращает номера версий программных интерфейсов удаленной системы, подключенной через внешнее соединение.
 Позволяет обеспечивать полную обратную совместимость при изменениях в программных интерфейсах
 с помощью их явного версионирования. Например, если программный интерфейс выше определенной версии,
 то только в этом случае допустимо вызывать у него новую функцию.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение, Знач ИмяИнтерфейса) Экспорт
@*@b{Параметры}@*
@example
   ВнешнееСоединение - COMОбъект - внешнее соединение, которое используется для работы с удаленной системой.
   ИмяИнтерфейса     - Строка    - имя запрашиваемого программного интерфейса, например, "СервисПередачиФайлов".
@end example
@*@b{Возвращаемое значение}@*
@example
   ФиксированныйМассив - массив строк, каждая строка является представлением номера версии интерфейса. 
                         Например, "1.0.2.1".
@end example
@*@b{Пример вызова}@*
  Версии = ОбщегоНазначения.ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение, "СервисПередачиФайлов");
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля
@section ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля
@ifinfo
@heading ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля
@end ifinfo
 Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки
 дерева.
 Используется для позиционирования курсора в иерархических списках.
@*@b{Синтаксис}@*
@deffn Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
@*@b{Параметры}@*
@example
  ИмяПоля - Строка - Имя колонки дерева значений, по которому выполняется поиск.
  ИдентификаторСтроки - Число - полученный в результате поиска идентификатор строки дерева значений.
  КоллекцияЭлементовДерева - ДанныеФормыКоллекцияЭлементовДерева - коллекция, в которой следует выполнять поиск.
  КлючСтроки - Произвольный - искомое значение поля.
  ПрекратитьПоиск - Булево - признак прекращения поиска.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьИмяСРасширением
@section ПолучитьИмяСРасширением
@ifinfo
@heading ПолучитьИмяСРасширением
@end ifinfo
 Возвращает имя файла с расширением.
 Если расширение пустое, тогда точка не добавляется.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение) Экспорт
@*@b{Параметры}@*
@example
  ИмяБезРасширения - Строка - имя файла без расширения.
  Расширение       - Строка - расширение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя файла с расширением.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьНедопустимыеСимволыВИмениФайла
@section ПолучитьНедопустимыеСимволыВИмениФайла
@ifinfo
@heading ПолучитьНедопустимыеСимволыВИмениФайла
@end ifinfo
 Возвращает строку недопустимых символов.
 Согласно http://en.wikipedia.org/wiki/Filename - в разделе "Reserved characters and words".
@*@b{Синтаксис}@*
@deffn Функция ПолучитьНедопустимыеСимволыВИмениФайла() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Строка - строка недопустимых символов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьНедопустимыеСимволыВИмениФайла()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы
@section ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы
@ifinfo
@heading ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы
@end ifinfo
 Извлекает из строки соединения с информационной базой параметры подключения
 и передает параметры в структуру для установки внешнего соединения.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(Знач СтрокаСоединения) Экспорт
@*@b{Параметры}@*
@example
  СтрокаСоединения - Строка - строка соединения ИБ.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - см. СтруктураПараметровДляУстановкиВнешнегоСоединения.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(СтрокаСоединения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьПолноеИмяФайла
@section ПолучитьПолноеИмяФайла
@ifinfo
@heading ПолучитьПолноеИмяФайла
@end ifinfo
 Составляет полное имя файла из имени каталога и имени файла.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьПолноеИмяФайла(Знач ИмяКаталога, Знач ИмяФайла) Экспорт
@*@b{Параметры}@*
@example
  ИмяКаталога  - Строка - путь к каталогу файла на диске.
  ИмяФайла     - Строка - имя файла, без имени каталога.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - полное имя файла с учетом каталога.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталога, ИмяФайла)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьРасширениеИмениФайла
@section ПолучитьРасширениеИмениФайла
@ifinfo
@heading ПолучитьРасширениеИмениФайла
@end ifinfo
 Выделяет из имени файла его расширение (набор символов после последней точки).
@*@b{Синтаксис}@*
@deffn Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
@*@b{Параметры}@*
@example
  ИмяФайла - Строка - имя файла с именем каталога или без.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - расширение файла.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьРегламентноеЗадание
@section ПолучитьРегламентноеЗадание
@ifinfo
@heading ПолучитьРегламентноеЗадание
@end ifinfo
 Возвращает РегламентноеЗадание из информационной базы.
 Не предназначена для использования в модели сервиса.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание из которого нужно получить
                  уникальный идентификатор для получения свежей копии регламентного задания.
@end example
@*@b{Возвращаемое значение}@*
@example
  РегламентноеЗадание - прочитано из базы данных.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПолучитьРеквизитФормыПоПути
@section ПолучитьРеквизитФормыПоПути
@ifinfo
@heading ПолучитьРеквизитФормыПоПути
@end ifinfo
 Получает значение реквизита формы.
@*@b{Синтаксис}@*
@deffn Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
@*@b{Параметры}@*
@example
  Форма - УправляемаяФорма - форма.
  ПутьРеквизита - Строка - путь к данным реквизита формы, например: "Объект.МесяцНачисления".
@end example
@*@b{Возвращаемое значение}@*
@example
  Произвольный - реквизит формы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПредлагатьСоздаватьРезервныеКопии
@section ПредлагатьСоздаватьРезервныеКопии
@ifinfo
@heading ПредлагатьСоздаватьРезервныеКопии
@end ifinfo
 Проверяет, возможно ли выполнить резервное копирование в пользовательском режиме.
@*@b{Синтаксис}@*
@deffn Функция ПредлагатьСоздаватьРезервныеКопии() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если предлагать.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ПредлагатьСоздаватьРезервныеКопии()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПредлагатьУстановкуРасширенияРаботыСФайлами
@section ПредлагатьУстановкуРасширенияРаботыСФайлами
@ifinfo
@heading ПредлагатьУстановкуРасширенияРаботыСФайлами
@end ifinfo
 Возвращает пользовательскую настройку "Предлагать установку расширения работы с файлами".
@*@b{Синтаксис}@*
@deffn Функция ПредлагатьУстановкуРасширенияРаботыСФайлами() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если предлагать.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ПредлагатьУстановкуРасширенияРаботыСФайлами()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПредложитьПользователюСоздатьРезервнуюКопию
@section ПредложитьПользователюСоздатьРезервнуюКопию
@ifinfo
@heading ПредложитьПользователюСоздатьРезервнуюКопию
@end ifinfo
 Предлагает пользователю создать резервную копию.
@*@b{Синтаксис}@*
@deffn Процедура ПредложитьПользователюСоздатьРезервнуюКопию() Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.ПредложитьПользователюСоздатьРезервнуюКопию()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПредметСтрокой
@section ПредметСтрокой
@ifinfo
@heading ПредметСтрокой
@end ifinfo
 Возвращает описание предмета в виде текстовой строки.
@*@b{Синтаксис}@*
@deffn Функция ПредметСтрокой(СсылкаНаПредмет) Экспорт
@*@b{Параметры}@*
@example
  СсылкаНаПредмет - ЛюбаяСсылка - объект ссылочного типа.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - представление предмета.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПредметСтрокой(СсылкаНаПредмет)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПредопределенныйЭлемент
@section ПредопределенныйЭлемент
@ifinfo
@heading ПредопределенныйЭлемент
@end ifinfo
 Получает ссылку предопределенного элемента по его полному имени.
 Предопределенные элементы могут содержаться только в следующих объектах:
   - Справочники;
   - Планы видов характеристик;
   - Планы счетов;
   - Планы видов расчета.
 После изменения состава предопределенных следует выполнить метод
 ОбновитьПовторноИспользуемыеЗначения(), который сбросит кэш ПовтИсп в текущем сеансе.
@*@b{Синтаксис}@*
@deffn Функция ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт
@*@b{Параметры}@*
@example
   ПолноеИмяПредопределенного - Строка - Полный путь к предопределенному элементу, включая его имя.
     Формат аналогичен функции глобального контекста ПредопределенноеЗначение().
     Например:
       "Справочник.ВидыКонтактнойИнформации.EmailПользователя"
       "ПланСчетов.Хозрасчетный.Материалы"
       "ПланВидовРасчета.Начисления.ОплатаПоОкладу".
@end example
@*@b{Возвращаемое значение}@*
@example
   ЛюбаяСсылка - ссылка на предопределенный элемент.
   Неопределено - если предопределенный есть в метаданных, но не создан в ИБ.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ПолноеИмяПредопределенного)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПредставлениеЛокальнойДатыСоСмещением
@section ПредставлениеЛокальнойДатыСоСмещением
@ifinfo
@heading ПредставлениеЛокальнойДатыСоСмещением
@end ifinfo
 Преобразует локальную дату к формату "YYYY-MM-DDThh:mm:ssTZD" согласно ISO 8601.
@*@b{Синтаксис}@*
@deffn Функция ПредставлениеЛокальнойДатыСоСмещением(ЛокальнаяДата) Экспорт
@*@b{Параметры}@*
@example
  ЛокальнаяДата - Дата - дата в часовом поясе сеанса.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - представление даты.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПредставлениеЛокальнойДатыСоСмещением(ЛокальнаяДата)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПредупреждениеПриЗавершенииРаботы
@section ПредупреждениеПриЗавершенииРаботы
@ifinfo
@heading ПредупреждениеПриЗавершенииРаботы
@end ifinfo
 Возвращает новую структуру параметров для вывода предупреждения перед завершением работы программы.
 Для использования в ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы.
@*@b{Синтаксис}@*
@deffn Функция ПредупреждениеПриЗавершенииРаботы() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - со свойствами:
    ТекстПредупреждения  - Строка - текст, выводимый в окне веб-браузера (или тонкого клиента) при завершении работы.
                                    Например, "Имеются редактируемые файлы, которые не помещены в программу".
                                    Остальные параметры определяют внешний вид формы предупреждений,
                                    открываемой после подтверждения в окне веб-браузера (или тонкого клиента).
    ТекстФлажка          - Строка - если задан, то в форме предупреждений выводится флажок с указанным текстом. 
                                    Например, "Завершить редактирование файлов (5)".
    ПоясняющийТекст      - Строка - текст, выводимый в форме сверху управляющего элемента (флажок или гиперссылка).
                                    Например, "Редактируемые файлы, не помещенные в программу".
    ТекстГиперссылки     - Строка - если задан, то выводится гиперссылка с указанным текстом.
                                    Например, "Редактируемые файлы (5)".
    РасширеннаяПодсказка - Строка - текст подсказки, выводимый по кнопке справа от управляющего элемента (флажок или
                                    гиперссылка). Например, "Нажмите для перехода к списку файлов, 
                                    открытых для редактирования".
    Приоритет            - Число  - относительный порядок в списке предупреждений на форме (чем больше, тем выше).
    ВывестиОдноПредупреждение - Булево - если Истина, то в списке предупреждений выводится только одно это
                                         предупреждение. Т.е. такое предупреждение не совместимо с любыми другими.
    ДействиеПриУстановленномФлажке - Структура со свойствами:
      * Форма          - Строка    - если пользователь установил флажок, то следует открыть указанную форму.
                                     Например, "Обработка.Файлы.РедактируемыеФайлы".
      * ПараметрыФормы - Структура - произвольная структура параметров для открытия формы. 
    ДействиеПриНажатииГиперссылки - Структура со свойствами:
      * Форма          - Строка    - путь к форме, которая должна открываться по нажатию на гиперссылку.
                                     Например, "Обработка.Файлы.РедактируемыеФайлы".
      * ПараметрыФормы - Структура - произвольная структура параметров для открываемой формы.
      * ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу
                                        вместо универсальной формы в случае, когда в списке 
                                        предупреждений оказывается только одно данное предупреждение.
                                        Например, "Обработка.Файлы.РедактируемыеФайлы".
      * ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура
                                                 параметров для вышеописанной формы.
      * РежимОткрытияОкна - РежимОткрытияОкнаФормы - режим открытия форм Форма или ПрикладнаяФормаПредупреждения.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПреобразоватьЧислоВАрабскуюНотацию
@section ПреобразоватьЧислоВАрабскуюНотацию
@ifinfo
@heading ПреобразоватьЧислоВАрабскуюНотацию
@end ifinfo
 Выполняет преобразование римского числа в арабское.
@*@b{Синтаксис}@*
@deffn Функция ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло, ИспользоватьКириллицу = Истина) Экспорт
@*@b{Параметры}@*
@example
  РимскоеЧисло - Строка - число, записанное римскими цифрами;
  ИспользоватьКириллицу - Булево - использовать в качестве арабских цифр кириллицу или латиницу.
@end example
@*@b{Возвращаемое значение}@*
@example
  Число - преобразованное число.
@end example
@*@b{Пример вызова}@*
  СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВАрабскуюНотацию("ХVII") = 17.
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПреобразоватьЧислоВРимскуюНотацию
@section ПреобразоватьЧислоВРимскуюНотацию
@ifinfo
@heading ПреобразоватьЧислоВРимскуюНотацию
@end ifinfo
 Выполняет преобразование арабского числа в римское.
@*@b{Синтаксис}@*
@deffn Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспользоватьКириллицу = Истина) Экспорт
@*@b{Параметры}@*
@example
  АрабскоеЧисло - Число - число, целое, от 0 до 999;
  ИспользоватьКириллицу - Булево - использовать в качестве арабских цифр кириллицу или латиницу.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - число в римской нотации.
@end example
@*@b{Пример вызова}@*
  СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПриНачалеВыполненияРегламентногоЗадания
@section ПриНачалеВыполненияРегламентногоЗадания
@ifinfo
@heading ПриНачалеВыполненияРегламентногоЗадания
@end ifinfo
 Выполняет действия перед продолжением выполнения обработчика регламентного задания.
 Например, проверяет возможность выполнения обработчика регламентного задания.
 Если администратор не заблокировал выполнение регламентных заданий до
 окончания обновления ИБ, тогда требуется прекратить выполнение обработчика.
@*@b{Синтаксис}@*
@deffn Процедура ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  РегламентноеЗадание - ОбъектМетаданных.РегламентноеЗадание - регламентное задание,
    из которого был вызван данный метод. Необходимо передавать для проверки доступности
    по функциональным опциям.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриНачалеРаботыСистемы
@section ПриНачалеРаботыСистемы
@ifinfo
@heading ПриНачалеРаботыСистемы
@end ifinfo
 Выполнить стандартные действия при начале работы пользователя
 с областью данных, либо в локальном режиме работы.
 Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
@*@b{Синтаксис}@*
@deffn Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
@*@b{Параметры}@*
@example
  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПриНачалеРаботыСистемы 
                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
                         оповещение с параметром типа Структура со свойствами:
                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
                         выполнен;
                         - Перезапустить - Булево - если требуется перезапуск программы;
                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
  НепрерывноеВыполнение - Булево - Только для внутреннего использования.
                          Для перехода из обработчика ПередНачаломРаботыСистемы
                          выполненного в режиме интерактивной обработки.
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы(ОповещениеЗавершения, НепрерывноеВыполнение)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node Проверить
@section Проверить
@ifinfo
@heading Проверить
@end ifinfo
 Вызывает исключение с текстом Сообщение, если Условие не равно Истина.
 Применяется для самодиагностики кода.
@*@b{Синтаксис}@*
@deffn Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
@*@b{Параметры}@*
@example
   Условие                - Булево - если не равно Истина, то вызывается исключение.
   КонтекстПроверки       - Строка - например, имя процедуры или функции, в которой выполняется проверка.
   Сообщение              - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по
                                     умолчанию.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.Проверить(Условие, Сообщение, КонтекстПроверки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПроверитьВыводТабличногоДокумента
@section ПроверитьВыводТабличногоДокумента
@ifinfo
@heading ПроверитьВыводТабличногоДокумента
@end ifinfo
 Проверяет, умещаются ли переданные табличные документы на страницу при печати.
@*@b{Синтаксис}@*
@deffn Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт
@*@b{Параметры}@*
@example
  ТабДокумент        - ТабличныйДокумент - табличный документ.
  ВыводимыеОбласти   - Массив, ТабличныйДокумент - массив из проверяемых таблиц или табличный документ. 
  РезультатПриОшибке - Булево - какой возвращать результат при возникновении ошибки.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево   - умещаются или нет переданные документы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПроверитьПараметр
@section ПроверитьПараметр
@ifinfo
@heading ПроверитьПараметр
@end ifinfo
 Вызывает исключение, если тип значения параметра ИмяПараметра процедуры или функции ИмяПроцедурыИлиФункции
 отличается от ожидаемого.
 Для быстрой диагностики типов параметров, передаваемых в процедуры и функции программного интерфейса.
@*@b{Синтаксис}@*
@deffn Процедура ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра, 
	Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   ИмяПроцедурыИлиФункции - Строка             - имя процедуры или функции, параметр которой проверяется.
   ИмяПараметра           - Строка             - имя проверяемого параметра процедуры или функции.
   ЗначениеПараметра      - Произвольный       - фактическое значение параметра.
   ОжидаемыеТипы  - ОписаниеТипов, Тип, Массив - тип(ы) параметра процедуры или функции.
   ОжидаемыеТипыСвойств   - Структура          - если ожидаемый тип - структура, то 
                                                 в этом параметре можно указать типы ее свойств.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедурыИлиФункции, ИмяПараметра, ЗначениеПараметра, ОжидаемыеТипы, ОжидаемыеТипыСвойств)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПроверитьПараметрыАдминистрирования
@section ПроверитьПараметрыАдминистрирования
@ifinfo
@heading ПроверитьПараметрыАдминистрирования
@end ifinfo
 Проверяет корректность параметров администрирования.
@*@b{Синтаксис}@*
@deffn Процедура ПроверитьПараметрыАдминистрирования(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено,
	ПроверятьПараметрыАдминистрированияКластера = Истина,
	ПроверятьПараметрыАдминистрированияИнформационнойБазы = Истина) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  ПроверятьПараметрыАдминистрированияКластера - Булево - флаг необходимости проверки параметров администрирования кластера,
  ПроверятьПараметрыАдминистрированияИнформационнойБазы - Булево - флаг необходимости проверки параметров
                                                                   администрирования кластера.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, ПроверятьПараметрыАдминистрированияКластера, ПроверятьПараметрыАдминистрированияИнформационнойБазы)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПроверитьПроведенностьДокументов
@section ПроверитьПроведенностьДокументов
@ifinfo
@heading ПроверитьПроведенностьДокументов
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ПроверитьПроведенностьДокументов.
@*@b{Синтаксис}@*
@deffn Функция ПроверитьПроведенностьДокументов(Знач Документы) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(Документы)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Проверяет статус проведения переданных документов и возвращает
 те из них, которые не проведены.
@*@b{Синтаксис}@*
@deffn Функция ПроверитьПроведенностьДокументов(Знач Документы) Экспорт
@*@b{Параметры}@*
@example
  Документы - Массив - документы, статус проведения которых необходимо проверить.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - непроведенные документы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПроверитьПроведенностьДокументов(Документы)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПроверитьРасширениеРаботыСФайламиПодключено
@section ПроверитьРасширениеРаботыСФайламиПодключено
@ifinfo
@heading ПроверитьРасширениеРаботыСФайламиПодключено
@end ifinfo
 Предлагает пользователю подключить расширение работы с файлами в веб-клиенте,
 и в случае отказа выдает предупреждение о невозможности продолжения операции.
 Предназначена для использования в начале участков кода, в которых ведется работа с файлами
 только при подключенном расширении.
@*@b{Синтаксис}@*
@deffn Процедура ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещенияОЗакрытии, Знач ТекстПредложения = "", 
	Знач ТекстПредупреждения = "") Экспорт
@*@b{Параметры}@*
@example
  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание процедуры, которая будет вызвана, если расширение
                                                     подключено со следующими параметрами:
                                                      Результат               - Булево - всегда Истина.
                                                      ДополнительныеПараметры - Неопределено
  ТекстПредложения    - Строка - текст с предложением подключить расширение работы с файлами. 
                                 Если не указан, то выводится текст по умолчанию.
  ТекстПредупреждения - Строка - текст предупреждения о невозможности продолжения операции. 
                                 Если не указан, то выводится текст по умолчанию.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если расширение подключено.
@end example
@*@b{Пример вызова}@*
    Оповещение = Новый ОписаниеОповещения("ПечатьДокументаЗавершение", ЭтотОбъект);
    ТекстСообщения = НСтр("ru = 'Для печати документа необходимо установить расширение работы с файлами.'");
    ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
    Процедура ПечатьДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
        // код печати документа, рассчитывающий на то, что расширение подключено.
        // ...
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПроверитьТипПараметраКоманды
@section ПроверитьТипПараметраКоманды
@ifinfo
@heading ПроверитьТипПараметраКоманды
@end ifinfo
 Проверяет, что в параметре команды Параметр передан объект ожидаемого типа ОжидаемыйТип.
 В противном случае, выдает стандартное сообщение и возвращает Ложь.
 Такая ситуация возможна, например, если в списке выделена строка группировки.
 Для использования в командах, работающих с элементами динамических списков в формах.
@*@b{Синтаксис}@*
@deffn Функция ПроверитьТипПараметраКоманды(Знач Параметр, Знач ОжидаемыйТип) Экспорт
@*@b{Параметры}@*
@example
  Параметр     - Массив, ЛюбаяСсылка - параметр команды.
  ОжидаемыйТип - Тип                 - ожидаемый тип параметра.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если параметр ожидаемого типа.
@end example
@*@b{Пример вызова}@*
   Если НЕ ПроверитьТипПараметраКоманды(Элементы.Список.ВыделенныеСтроки, 
      Тип("ЗадачаСсылка.ЗадачаИсполнителя")) Тогда
      Возврат;
   КонецЕсли;
   ...
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПровестиДокументы
@section ПровестиДокументы
@ifinfo
@heading ПровестиДокументы
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ПровестиДокументы.
@*@b{Синтаксис}@*
@deffn Функция ПровестиДокументы(Документы) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Документы)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Выполняет попытку проведения документов.
@*@b{Синтаксис}@*
@deffn Функция ПровестиДокументы(Документы) Экспорт
@*@b{Параметры}@*
@example
   Документы - Массив - документы, которые необходимо провести.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - массив структур со свойствами:
      * Ссылка         - ДокументСсылка - документ, который не удалось провести.
      * ОписаниеОшибки - Строка         - текст описания ошибки при проведении.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПровестиДокументы(Документы)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПропуститьПредупреждениеПередЗавершениемРаботыСистемы
@section ПропуститьПредупреждениеПередЗавершениемРаботыСистемы
@ifinfo
@heading ПропуститьПредупреждениеПередЗавершениемРаботыСистемы
@end ifinfo
 Отключает выдачу предупреждения пользователю при завершении работы программы.
@*@b{Синтаксис}@*
@deffn Процедура ПропуститьПредупреждениеПередЗавершениемРаботыСистемы() Экспорт
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПрофильБезопасности
@section ПрофильБезопасности
@ifinfo
@heading ПрофильБезопасности
@end ifinfo
 Возвращает свойства профиля безопасности.
@*@b{Синтаксис}@*
@deffn Функция ПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ИмяПрофиля - Строка - имя профиля безопасности.
@end example
@*@b{Возвращаемое значение}@*
@example
   Структура - см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПрофильБезопасности(ПараметрыАдминистрированияКластера, ИмяПрофиля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@section ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@ifinfo
@heading ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@end ifinfo
 Возвращает имя профиля безопасности, назначенного для информационной базы в качестве профиля безопасности
  безопасного режима.
@*@b{Синтаксис}@*
@deffn Функция ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя профиля безопасности, назначенного для информационной базы в качестве профиля
  безопасности безопасного режима. Если для информационной базы не назначен профиль безопасности - возвращается пустая
  строка.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn
@node ПрофильБезопасностиИнформационнойБазы
@section ПрофильБезопасностиИнформационнойБазы
@ifinfo
@heading ПрофильБезопасностиИнформационнойБазы
@end ifinfo
 Возвращает имя профиля безопасности, назначенного для информационной базы.
@*@b{Синтаксис}@*
@deffn Функция ПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - имя профиля безопасности, назначенного для информационной базы. Если
  для информационной базы не назначен профиль безопасности - возвращается пустая строка.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПрофильБезопасностиИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПрофильБезопасностиСуществует
@section ПрофильБезопасностиСуществует
@ifinfo
@heading ПрофильБезопасностиСуществует
@end ifinfo
 Проверяет существование в кластере серверов профиля безопасности.
@*@b{Синтаксис}@*
@deffn Функция ПрофильБезопасностиСуществует(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ИмяПрофиля - Строка - имя профиля безопасности, существование которого проверяется.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина если профиль с указанным именем существует, Ложь - если не существует.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПрофильБезопасностиСуществует(ПараметрыАдминистрированияКластера, ИмяПрофиля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПрочитатьXMLВТаблицу
@section ПрочитатьXMLВТаблицу
@ifinfo
@heading ПрочитатьXMLВТаблицу
@end ifinfo
 Преобразует текст указанного формата XML в таблицу значений,
 при этом колонки таблицы формируются на основе описания в XML.
 Схема XML:
 <?xml version="1.0" encoding="utf-8"?>
  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <xs:element name="Items">
    <xs:complexType>
     <xs:sequence>
      <xs:element maxOccurs="unbounded" name="Item">
       <xs:complexType>
        <xs:attribute name="Code" type="xs:integer" use="required" />
        <xs:attribute name="Name" type="xs:string" use="required" />
        <xs:attribute name="Socr" type="xs:string" use="required" />
        <xs:attribute name="Index" type="xs:string" use="required" />
       </xs:complexType>
      </xs:element>
     </xs:sequence>
    <xs:attribute name="Description" type="xs:string" use="required" />
    <xs:attribute name="Columns" type="xs:string" use="required" />
   </xs:complexType>
  </xs:element>
 </xs:schema>
@*@b{Синтаксис}@*
@deffn Функция ПрочитатьXMLВТаблицу(Знач XML) Экспорт
@*@b{Параметры}@*
@example
  XML - Строка, ЧтениеXML - текст в формате XML или ЧтениеXML.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - со свойствами:
   * ИмяТаблицы - Строка          - имя таблицы.
   * Данные     - ТаблицаЗначений - преобразованная из XML таблица.
@end example
@*@b{Пример вызова}@*
   КлассификаторТаблица = ПрочитатьXMLВТаблицу(
     Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст()).Данные;
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПрочитатьДанныеИзБезопасногоХранилища
@section ПрочитатьДанныеИзБезопасногоХранилища
@ifinfo
@heading ПрочитатьДанныеИзБезопасногоХранилища
@end ifinfo
 Возвращает данные из безопасного хранилища.
 Вызывающий код должен самостоятельно устанавливать привилегированный режим.
 Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
 а доступно только коду, который делает обращения только к своей части данных и
 в том контексте, который предполагает чтение или запись конфиденциальных данных.
@*@b{Синтаксис}@*
@deffn Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
  Ключи       - Строка - Содержит список имен сохраненных данных, указанных через запятую.
  ОбщиеДанные - Булево - Истина, если требуется в модели сервиса получить данные из общих данных в разделенном режиме.
@end example
@*@b{Возвращаемое значение}@*
@example
  Произвольный, Структура, Неопределенно - Данные из безопасного хранилища. Если указан один ключ,
                            то возвращается его значение, иначе структура.
                            Если данные отсутствуют - Неопределенно.
@end example
@*@b{Пример вызова}@*
 Процедура ПриЧтенииНаСервере(ТекущийОбъект)
  Если ТекущийПользовательМожетИзменятьПароль Тогда
   УстановитьПривилегированныйРежим(Истина);
   Логин  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка, "Логин");
   Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка);
   УстановитьПривилегированныйРежим(Ложь);
  Иначе
   Элементы.ГруппаЛогинИПароль.Видимость = Ложь;
  КонецЕсли;
 КонецПроцедуры
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПрочитатьПрогресс
@section ПрочитатьПрогресс
@ifinfo
@heading ПрочитатьПрогресс
@end ifinfo
 Считывает информацию о ходе выполнения длительной операции, 
 записанную процедурой ДлительныеОперации.СообщитьПрогресс.
@*@b{Синтаксис}@*
@deffn Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
@*@b{Параметры}@*
@example
   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
@end example
@*@b{Возвращаемое значение}@*
@example
   Неопределено, Структура - информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
    * Процент                 - Число  - Необязательный. Процент выполнения.
    * Текст                   - Строка - Необязательный. Информация о текущей операции.
    * ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
@end example
@*@b{Пример вызова}@*
Результат = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПустойБуферОбмена
@section ПустойБуферОбмена
@ifinfo
@heading ПустойБуферОбмена
@end ifinfo
 Проверяет наличие сохраненных данных во внутренний буфере обмена.
@*@b{Синтаксис}@*
@deffn Функция ПустойБуферОбмена(Источник = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Источник - Строка - Если передан, то проверяется наличие данных
             в внутреннем буфере обмена с этим ключем.
             По умолчанию - Неопределено.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если пустой.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ПустойБуферОбмена(Источник)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПутьККлиентуСервераАдминистрирования
@section ПутьККлиентуСервераАдминистрирования
@ifinfo
@heading ПутьККлиентуСервераАдминистрирования
@end ifinfo
 Возвращает путь к консольному клиенту сервера администрирования.
@*@b{Синтаксис}@*
@deffn Функция ПутьККлиентуСервераАдминистрирования(Знач ПараметрыАдминистрированияКластера) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - путь к консольному клиенту сервера администрирования.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.ПутьККлиентуСервераАдминистрирования(ПараметрыАдминистрированияКластера)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ПутьКТабличнойЧасти
@section ПутьКТабличнойЧасти
@ifinfo
@heading ПутьКТабличнойЧасти
@end ifinfo
 Формирует путь к заданной строке НомерСтроки и колонке ИмяРеквизита 
 табличной части ИмяТабличнойЧасти для выдачи сообщений в форме.
 Для совместного использования с процедурой СообщитьПользователю
 (для передачи в параметры Поле или ПутьКДанным). 
@*@b{Синтаксис}@*
@deffn Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, 
	Знач ИмяРеквизита) Экспорт
@*@b{Параметры}@*
@example
  ИмяТабличнойЧасти - Строка - имя табличной части.
  НомерСтроки       - Число - номер строки табличной части.
  ИмяРеквизита      - Строка - имя реквизита.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - путь к ячейке таблицы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НомерСтроки, ИмяРеквизита)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РаботаСВнешнимиРесурсамиЗаблокирована
@section РаботаСВнешнимиРесурсамиЗаблокирована
@ifinfo
@heading РаботаСВнешнимиРесурсамиЗаблокирована
@end ifinfo
 Возвращает признак установленной блокировки работы с внешними ресурсами.
@*@b{Синтаксис}@*
@deffn Функция РаботаСВнешнимиРесурсамиЗаблокирована() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Булево   - Истина, если работа с внешними ресурсами заблокирована.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РабочаяДатаПользователя
@section РабочаяДатаПользователя
@ifinfo
@heading РабочаяДатаПользователя
@end ifinfo
 Возвращает значение настройки рабочей даты для пользователя.
@*@b{Синтаксис}@*
@deffn Функция РабочаяДатаПользователя(ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
 ИмяПользователя - Строка - Имя пользователя, для которого запрашивается рабочая дата.
  Если не задано, то устанавливается для текущего пользователя.
@end example
@*@b{Возвращаемое значение}@*
@example
 Дата - Значение настройки рабочей даты пользователя или пустая дата, если настройка не задана.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.РабочаяДатаПользователя(ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РазблокироватьРаботуСВнешнимиРесурсами
@section РазблокироватьРаботуСВнешнимиРесурсами
@ifinfo
@heading РазблокироватьРаботуСВнешнимиРесурсами
@end ifinfo
 Разрешает работу с внешними ресурсами.
@*@b{Синтаксис}@*
@deffn Процедура РазблокироватьРаботуСВнешнимиРесурсами() Экспорт
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.РазблокироватьРаботуСВнешнимиРесурсами()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РазделениеВключено
@section РазделениеВключено
@ifinfo
@heading РазделениеВключено
@end ifinfo
 Возвращает признак работы в режиме разделения данных по областям
 (технически это признак условного разделения).
 Возвращает Ложь, если конфигурация не может работать в режиме разделения данных
 (не содержит общих реквизитов, предназначенных для разделения данных).
@*@b{Синтаксис}@*
@deffn Функция РазделениеВключено() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если разделение включено.
         - Ложь,   если разделение выключено или не поддерживается.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.РазделениеВключено()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РазделительПакетаЗапросов
@section РазделительПакетаЗапросов
@ifinfo
@heading РазделительПакетаЗапросов
@end ifinfo
 Возвращает фрагмент текста запроса, отделяющего один запрос от другого.
@*@b{Синтаксис}@*
@deffn Функция РазделительПакетаЗапросов() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - разделитель запросов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.РазделительПакетаЗапросов()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РазложитьПолноеИмяФайла
@section РазложитьПолноеИмяФайла
@ifinfo
@heading РазложитьПолноеИмяФайла
@end ifinfo
 Раскладывает полное имя файла на составляющие.
@*@b{Синтаксис}@*
@deffn Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
@*@b{Параметры}@*
@example
  ПолноеИмяФайла - Строка - полный путь к файлу.
  ЭтоПапка - Булево - признак того, что требуется разложить полное имя папки, а не файла.
@end example
@*@b{Возвращаемое значение}@*
@example
   Структура - имя файла, разложенное на составные части(аналогично свойствам объекта Файл):
  ПолноеИмя - Содержит полный путь к файлу, т.е. полностью соответствует входному параметру ПолноеИмяФайла.
  Путь - Содержит путь к каталогу, в котором лежит файл.
  Имя - Содержит имя файла с расширением, без пути к файлу.
  Расширение - Содержит расширение файла.
  ИмяБезРасширения - Содержит имя файла без расширения и без пути к файлу.
   Пример: если ПолноеИмяФайла = "c:\temp\test.txt", то структура заполнится следующим образом:
    ПолноеИмя: "c:\temp\test.txt".
    Путь: "c:\temp\"
    Имя: "test.txt"
    Расширение: ".txt"
    ИмяБезРасширения: "test".
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла, ЭтоПапка)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазложитьСтрокуВМассивПодстрок
@section РазложитьСтрокуВМассивПодстрок
@ifinfo
@heading РазложитьСтрокуВМассивПодстрок
@end ifinfo
 Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
 В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
 рекомендуется использовать функцию платформы СтрРазделить.
@*@b{Синтаксис}@*
@deffn Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Значение               - Строка - текст с разделителями;
  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
       включаются в результат.
     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
       при других разделителях результатом функции будет пустой массив.
  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - массив строк.
@end example
@*@b{Пример вызова}@*
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
  - возвратит массив из двух элементов: "один", "два";
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
  - возвратит массив из двух элементов: "один", "два";
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
  - возвратит пустой массив;
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
  - возвратит массив с одним элементом: ""(пустая строка);
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
  - возвратит массив с одним элементом: "" (пустая строка).
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазложитьСтрокуВМассивСлов
@section РазложитьСтрокуВМассивСлов
@ifinfo
@heading РазложитьСтрокуВМассивСлов
@end ifinfo
 Разбивает строку на несколько строк, используя заданный набор разделителей.
 Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
 не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
@*@b{Синтаксис}@*
@deffn Функция РазложитьСтрокуВМассивСлов(Знач Значение, РазделителиСлов = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Значение        - Строка - исходная строка, которую необходимо разложить на слова.
  РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - список слов.
@end example
@*@b{Пример вызова}@*
  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@@#два2_!три") возвратит массив значений: "один",
  "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@@#два2_!три", "#@@!_") возвратит массив
  значений: "один-", "два2", "три".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазложитьСтрокуПоТочкамИСлэшам
@section РазложитьСтрокуПоТочкамИСлэшам
@ifinfo
@heading РазложитьСтрокуПоТочкамИСлэшам
@end ifinfo
 Функция раскладывает Строку в массив строк, используя "./\" как разделитель.
@*@b{Синтаксис}@*
@deffn Функция РазложитьСтрокуПоТочкамИСлэшам(Знач Строка) Экспорт
@*@b{Параметры}@*
@example
  Строка - Строка - исходная строка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - коллекция фрагментов строки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Строка)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазностьМассивов
@section РазностьМассивов
@ifinfo
@heading РазностьМассивов
@end ifinfo
 Вычисляет разность массивов. Разностью массивов А и В является массив, содержащий
 все элементы массива А не существующие в массиве В.
@*@b{Синтаксис}@*
@deffn Функция РазностьМассивов(Массив, МассивВычитания) Экспорт
@*@b{Параметры}@*
@example
  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
  МассивВычитания - Массив - массив элементов, который будет вычитаться.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - дополнение массива В до А.
@end example
@*@b{Пример вызова}@*
 //А = [1, 3, 5, 7];
 //В = [3, 7, 9];
 Результат = РазностьМассивов(А, В);
 //Результат = [1, 5];
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазобратьСтрокуСПочтовымиАдресами
@section РазобратьСтрокуСПочтовымиАдресами
@ifinfo
@heading РазобратьСтрокуСПочтовымиАдресами
@end ifinfo
 Функция проверяет, что введенная строка с e-mail адресами введена правильно.
  Формат строки:
  Z = ИмяПользователя|[Имя Пользователя] [<]пользователь@@почтовый_сервер[>], Строка = Z[<разделитель*>Z].
   Прим.: разделитель* - имеется ввиду любой разделитель адресов.
@*@b{Синтаксис}@*
@deffn Функция РазобратьСтрокуСПочтовымиАдресами(Знач СтрокаПереданныхАдресов, ВызыватьИсключение = Истина) Экспорт
@*@b{Параметры}@*
@example
  СтрокаПереданныхАдресов - Строка - правильная строка с почтовыми адресами.
  ВызыватьИсключение - Булево - необходимо передать Ложь, чтобы в случае неуспешного разбора не выдавалось исключение.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - результат разбора:
   * Статус - Булево - успех или неуспех преобразования
   * Значение - Массив - (параметр доступен, если Статус = Истина) коллекция адресов в виде структур:
    ** Адрес - Строка - e-mail получателя.
    ** Представление - Строка - имя получателя.
   * СообщениеОбОшибке - Строка - (параметр доступен, если Статус = Ложь) информация об ошибке.
  ВАЖНО: Функция возвращает массив структур, в которых одно поле (любое)
         может быть незаполнено. Может использоваться различными
         подсистемами для собственного сопоставления имени пользователя
         некому e-mail адресу. Поэтому, необходимо перед непосредственной
         отправкой проверить, что поле почтового адреса заполнено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаПереданныхАдресов, ВызыватьИсключение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РазорватьСоединенияСИнформационнойБазой
@section РазорватьСоединенияСИнформационнойБазой
@ifinfo
@heading РазорватьСоединенияСИнформационнойБазой
@end ifinfo
 Разрывает соединения с информационной базой по фильтру.
@*@b{Синтаксис}@*
@deffn Процедура РазорватьСоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  Фильтр - Массив - массив структур, описывающих условия фильтрации соединений. Поля структур, входящих в массив:
              * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСоединения),
              * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений
                соединений с указанным в условии фильтра,
              * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
                сравнивается значение соответствующего свойства соединения,
         - Структура - структура: ключ - Имя свойства соединения (см. выше), значение - значение, с которым
           выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на равенство.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.РазорватьСоединенияСИнформационнойБазой(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РасписаниеВСтруктуру
@section РасписаниеВСтруктуру
@ifinfo
@heading РасписаниеВСтруктуру
@end ifinfo
 Преобразует РасписаниеРегламентногоЗадания в структуру.
@*@b{Синтаксис}@*
@deffn Функция РасписаниеВСтруктуру(Знач Расписание) Экспорт
@*@b{Параметры}@*
@example
  Расписание - РасписаниеРегламентногоЗадания - исходное расписание.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - расписание в виде структуры.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РасписаниеРегламентногоЗадания
@section РасписаниеРегламентногоЗадания
@ifinfo
@heading РасписаниеРегламентногоЗадания
@end ifinfo
 Возвращает расписание регламентного задания.
 Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
 Не предназначена для использования в модели сервиса.
@*@b{Синтаксис}@*
@deffn Функция РасписаниеРегламентногоЗадания(Знач Идентификатор, Знач ВСтруктуре = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание.
  ВСтруктуре    - Булево - если Истина, тогда расписание будет преобразовано
                  в структуру, которую можно передать на клиент.
@end example
@*@b{Возвращаемое значение}@*
@example
  РасписаниеРегламентногоЗадания, Структура - структура содержит те же свойства, что и расписание.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Идентификатор, ВСтруктуре)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РасписанияОдинаковые
@section РасписанияОдинаковые
@ifinfo
@heading РасписанияОдинаковые
@end ifinfo
 Сравнивает два расписания между собой.
@*@b{Синтаксис}@*
@deffn Функция РасписанияОдинаковые(Знач Расписание1, Знач Расписание2) Экспорт
@*@b{Параметры}@*
@example
 Расписание1 - РасписаниеРегламентногоЗадания - первое расписание.
  Расписание2 - РасписаниеРегламентногоЗадания - второе расписание.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если одинаковые.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(Расписание1, Расписание2)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РаспределитьСуммуПропорциональноКоэффициентам
@section РаспределитьСуммуПропорциональноКоэффициентам
@ifinfo
@heading РаспределитьСуммуПропорциональноКоэффициентам
@end ifinfo
1. Для вызова с сервера
 Делит сумму на требуемое количество частей, размеры частей задаются коэффициентами.
 Остатки от округления распределяется на часть с наибольшим коэффициентом.
@*@b{Синтаксис}@*
@deffn Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, КоэффициентыРаспределения, Знач Точность = 2) Экспорт
@*@b{Параметры}@*
@example
  РаспределяемаяСумма - Число - сумма, которую надо распределить;
  КоэффициентыРаспределения - Массив - список коэффициентов (типа Число);
  Точность - Число - количество знаков дробной части, до которых производится округление. Если параметр отрицательный,
                     то число округляется до соответствующего разряда в целой части, начиная с младших разрядов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - список чисел, полученный в результате распределения суммы.
           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
           или суммарный вес коэффициентов = 0), то возвращается значение Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, КоэффициентыРаспределения, Точность)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

2. Для вызова с клиента и сервера
 Выполняет пропорциональное распределение суммы в соответствии
 с заданными коэффициентами распределения.
@*@b{Синтаксис}@*
@deffn Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2) Экспорт
@*@b{Параметры}@*
@example
  РаспределяемаяСумма - Число  - сумма, которую надо распределить, если сумма равна 0 - то возвращается Неопределено;
                                 Если передана отрицательная - расчет по модулю и после инверсия знаков результата.
  Коэффициенты        - Массив - коэффициенты распределения, должны быть положительны или отрицательными одновременно
  Точность            - Число  - точность округления при распределении. Необязателен.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - массив размерностью равный массиву коэффициентов, содержит
           суммы в соответствии с весом коэффициента (из массива коэффициентов).
           В случае, если распределить невозможно (кол-во коэффициентов = 0,
           есть коэффициенты с отрицательным значением или суммарный вес коэффициентов = 0),
           тогда будет возвращено Неопределено.
@end example
@*@b{Пример вызова}@*
 Коэффициенты = Новый Массив;
 Коэффициенты.Добавить(1);
 Коэффициенты.Добавить(2);
 Результат = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(1, Коэффициенты);
 // Результат = [0.33, 0.67]
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node РасширениеБезТочки
@section РасширениеБезТочки
@ifinfo
@heading РасширениеБезТочки
@end ifinfo
 Преобразует расширение файла в нижний регистр без точки.
@*@b{Синтаксис}@*
@deffn Функция РасширениеБезТочки(Знач Расширение) Экспорт
@*@b{Параметры}@*
@example
  Расширение - Строка - Расширение для преобразования.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - преобразованное расширение.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn
@node РегламентноеЗаданиеИспользуется
@section РегламентноеЗаданиеИспользуется
@ifinfo
@heading РегламентноеЗаданиеИспользуется
@end ifinfo
 Возвращает использование регламентного задания.
 Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
 Не предназначена для использования в модели сервиса.
@*@b{Синтаксис}@*
@deffn Функция РегламентноеЗаданиеИспользуется(Знач Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - если Истина, регламентное задание используется.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РедакцияКонфигурации
@section РедакцияКонфигурации
@ifinfo
@heading РедакцияКонфигурации
@end ifinfo
 Возвращает редакцию конфигурации.
 Редакцией принято называть две первые группы цифр полной версии конфигурации.
 Например, у версии "1.2.3.4" редакция "1.2".
@*@b{Синтаксис}@*
@deffn Функция РедакцияКонфигурации() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Строка - номер редакции конфигурации.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.РедакцияКонфигурации()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node РежимОтладки
@section РежимОтладки
@ifinfo
@heading РежимОтладки
@end ifinfo
 Возвращает Истина, если включен режим отладки.
@*@b{Синтаксис}@*
@deffn Функция РежимОтладки() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если включен режим отладки.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.РежимОтладки()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвернутьМассив
@section СвернутьМассив
@ifinfo
@heading СвернутьМассив
@end ifinfo
 Удаляет повторяющиеся элементы массива.
@*@b{Синтаксис}@*
@deffn Функция СвернутьМассив(Массив) Экспорт
@*@b{Параметры}@*
@example
  Массив - Массив - массив произвольных значений.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - коллекция уникальных элементов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваCOMКласса
@section СвойстваCOMКласса
@ifinfo
@heading СвойстваCOMКласса
@end ifinfo
 Конструктор структуры, описывающей свойства COM-класса.
@*@b{Синтаксис}@*
@deffn Функция СвойстваCOMКласса() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя COM-класса, используется в качестве ключа при поиске,
     * Описание - Строка - описание COM-класса,
     * ФайлМоникер - Строка - имя файла, по которому создается объект методом глобального 
       контекста ПолучитьCOMОбъект() с пустым значением второго параметра,
     * CLSID - Строка - представление идентификатора COM-класса в формате системного реестра MS Windows 
       без фигурных скобок, по которому он может быть создан операционной системой,
     * Компьютер - Строка - имя компьютера, на котором может быть создан COM-объект.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваCOMКласса()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваБлокировкиСеансовИРегламентныхЗаданий
@section СвойстваБлокировкиСеансовИРегламентныхЗаданий
@ifinfo
@heading СвойстваБлокировкиСеансовИРегламентныхЗаданий
@end ifinfo
 Конструктор структуры, описывающей свойства блокировки сеансов и регламентных заданий
  информационной базы.
@*@b{Синтаксис}@*
@deffn Функция СвойстваБлокировкиСеансовИРегламентныхЗаданий() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - структура с полями:
    * БлокировкаСеансов - Булево - флаг установки блокировки новых сеансов с информационной базой,
    * ДатаС - Дата - (Дата и время) момент начала блокировки новых сеансов с информационной базой,
    * ДатаПо - Дата - (Дата и время) момент окончания блокировки новых сеансов с информационной базой,
    * Сообщение - Строка - сообщение, отображаемое пользователю при попытке установки нового сеанса
      с информационной базой при установленной блокировке новых сеансов,
    * КодРазрешения - Строка - код обхода блокировки новых сеансов с информационной базой,
    * БлокировкаРегламентныхЗаданий - Булево - флаг блокировки выполнения регламентных заданий
      информационной базы.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваВиртуальногоКаталога
@section СвойстваВиртуальногоКаталога
@ifinfo
@heading СвойстваВиртуальногоКаталога
@end ifinfo
 Конструктор структуры, описывающей свойства виртуального каталога.
@*@b{Синтаксис}@*
@deffn Функция СвойстваВиртуальногоКаталога() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * ЛогическийURL - Строка - логический URL каталога,
     * ФизическийURL - Строка - физический URL каталога на сервере для размещения данных
       виртуального каталога,
     * Описание - Строка - описание виртуального каталога,
     * ЧтениеДанных - Булево - флаг разрешения чтения данных из виртуального каталога,
     * ЗаписьДанных - Булево - флаг разрешения записи данных в виртуальный каталог.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваВиртуальногоКаталога()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваВнешнегоМодуля
@section СвойстваВнешнегоМодуля
@ifinfo
@heading СвойстваВнешнегоМодуля
@end ifinfo
 Конструктор структуры, описывающей свойства внешнего модуля.
@*@b{Синтаксис}@*
@deffn Функция СвойстваВнешнегоМодуля() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя внешнего модуля, используется в качестве ключа для поиска,
     * Описание - Строка - описание внешнего модуля,
     * ХэшСумма - Строка - контрольная сумма разрешенного внешнего модуля, вычисленная алгоритмом
       SHA-1 и преобразованная к строке base64.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваВнешнегоМодуля()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваВнешнейКомпоненты
@section СвойстваВнешнейКомпоненты
@ifinfo
@heading СвойстваВнешнейКомпоненты
@end ifinfo
 Конструктор структуры, описывающей свойства внешней компоненты.
@*@b{Синтаксис}@*
@deffn Функция СвойстваВнешнейКомпоненты() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя внешней компоненты, используется в качестве ключа для поиска,
     * Описание - Строка -описание внешней компоненты,
     * ХэшСумма - Строка - контрольная сумма разрешенной внешней компоненты, вычисленная алгоритмом
       SHA-1 и преобразованная к строке base64.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваВнешнейКомпоненты()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваИнтернетРесурса
@section СвойстваИнтернетРесурса
@ifinfo
@heading СвойстваИнтернетРесурса
@end ifinfo
 Конструктор структуры, описывающей Интернет-ресурс.
@*@b{Синтаксис}@*
@deffn Функция СвойстваИнтернетРесурса() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя Интернет-ресурса, используется в качестве ключа для поиска,
     * Описание - Строка - описание Интернет-ресурса,
     * Протокол - Строка - разрешаемый сетевой протокол. Возможные значения:
         HTTP,
         HTTPS,
         FTP,
         FTPS,
         POP3,
         SMTP,
         IMAP,
     * Адрес - Строка - сетевой адрес Интернет-ресурса без указания протокола и порта,
     * Порт - Число - сетевой порт Интернет-ресурса.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваИнтернетРесурса()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваИнформационныхБаз
@section СвойстваИнформационныхБаз
@ifinfo
@heading СвойстваИнформационныхБаз
@end ifinfo
 Возвращает описания информационных баз.
@*@b{Синтаксис}@*
@deffn Функция СвойстваИнформационныхБаз(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  Фильтр - Структура - параметры фильтрации информационных баз.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - массив структур (свойств информационной базы).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваИнформационныхБаз(ИдентификаторКластера, ПараметрыАдминистрированияКластера, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваКластеров
@section СвойстваКластеров
@ifinfo
@heading СвойстваКластеров
@end ifinfo
 Возвращает описания кластеров серверов.
@*@b{Синтаксис}@*
@deffn Функция СвойстваКластеров(Знач ПараметрыАдминистрированияКластера, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  Фильтр - Структура - параметры фильтрации кластеров серверов.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - массив структур (свойств кластеров).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваКластеров(ПараметрыАдминистрированияКластера, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваПриложенияОС
@section СвойстваПриложенияОС
@ifinfo
@heading СвойстваПриложенияОС
@end ifinfo
 Конструктор структуры, описывающей свойства приложения операционной системы.
@*@b{Синтаксис}@*
@deffn Функция СвойстваПриложенияОС() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя приложения операционной системы, используется в качестве ключа для поиска,
     * Описание - Строка - описание приложения операционной системы,
     * ШаблонСтрокиЗапуска - Строка - шаблон строки запуска приложения (состоит из последовательности
       шаблонных слов, разделенных пробелами).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваПриложенияОС()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваПрофиляБезопасности
@section СвойстваПрофиляБезопасности
@ifinfo
@heading СвойстваПрофиляБезопасности
@end ifinfo
 Конструктор структуры, описывающей свойства профиля безопасности.
@*@b{Синтаксис}@*
@deffn Функция СвойстваПрофиляБезопасности() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Структура - структура с полями:
     * Имя - Строка - имя профиля безопасности,
     * Описание - Строка - описание профиля безопасности,
     * ПрофильБезопасногоРежима - Булево - определяет возможность использования профиля безопасности
       в качестве профиля безопасности безопасного режима (как при указании в качестве профиля
       безопасного режима для информационной базы, так и при вызове УстановитьБезопасныйРежим(<Имя профиля>) из кода конфигурации,
     * ПолныйДоступКПривилегированномуРежиму - Булево - определяет возможность установки
       привилегированного режима из безопасного режима данного профиля безопасности,
     * ПолныйДоступКФайловойСистеме - Булево - определяет наличие ограничений на доступ к файловой
       системе. При установке значения равным Ложь, доступ будет предоставлен только к каталогам файловой
       системы, перечисленным в свойстве ВиртуальныеКаталоги,
     * ПолныйДоступКCOMОбъектам - Булево - определяет наличие ограничений на доступ к использованию
       COMОбъектов. При установке значения равным Ложь, доступ будет предоставлен только к COM-классам,
       перечисленным в свойстве COMКлассы,
     * ПолныйДоступКВнешнимКомпонентам - Булево - определяет наличие ограничений на доступ к использованию
       внешних компонент. При установке значения равным Ложь, доступ будет предоставлен только к внешним
       компонентам, перечисленным в свойстве ВнешниеКомпоненты,
     * ПолныйДоступКВнешнимМодулям - Булево - определяет наличие ограничений на доступ к использованию
       внешних модулей (внешние отчеты и обработки, вызовы Выполнить() и Вычислить()) в небезопасном режиме.
       При установке значения равным Ложь, будет предоставлена возможность использовать в небезопасном
       режиме только внешние модули, перечисленные в свойстве ВнешниеМодули,
     * ПолныйДоступКПриложениямОперационнойСистемы - Булево - определяет наличие ограничений на доступ к
       использованию приложений операционной системы. При установке значения равным Ложь, будет предоставлена
       возможность использовать только приложения операционной системы, перечисленные в свойстве ПриложенияОС,
     * ПолныйДоступКИнтернетРесурсам - Булево - определяет наличие ограничений на доступ к использованию
       Интернет-ресурсов. При установке значения равным Ложь, будет предоставлена возможность использовать
       только Интернет-ресурсы, перечисленные в свойстве ИнтернетРесурсы,
     * ВиртуальныеКаталоги - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваВиртуальногоКаталога),
       описывающих виртуальные каталоги, к которых предоставляется доступ при установке ПолныйДоступКФайловойСистеме =
       Ложь,
     * COMКлассы - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваCOMКласса),
       описывающих COM-классы, к которым предоставляется доступ при установке ПолныйДоступКCOMОбъектам = Ложь,
     * ВнешниеКомпоненты - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваВнешнейКомпоненты),
       описывающих внешние компоненты, к которым предоставляется доступ при установке ПолныйДоступКВнешнимКомпонентам
       = Ложь,
     * ВнешниеМодули - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваВнешнегоМодуля),
       описывающих внешние модули, к которым предоставляется доступ в небезопасном режиме при установке
       ПолныйДоступКВнешнимМодулям = Ложь,
     * ПриложенияОС - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваПриложенияОС),
       описывающих приложения операционной системы, к которым предоставляется доступ при установке
       ПолныйДоступКПриложениямОперационнойСистемы = Ложь,
     * ИнтернетРесурсы - Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваИнтернетРесурса),
       описывающих Интернет-ресурсы, к которым предоставляется доступ при установке ПолныйДоступКИнтернетРесурсам = Ложь.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваРабочихПроцессов
@section СвойстваРабочихПроцессов
@ifinfo
@heading СвойстваРабочихПроцессов
@end ifinfo
 Возвращает описания рабочих процессов.
@*@b{Синтаксис}@*
@deffn Функция СвойстваРабочихПроцессов(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  Фильтр - Структура - параметры фильтрации рабочих процессов.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - массив структур (свойств рабочих процессов).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваРабочихПроцессов(ИдентификаторКластера, ПараметрыАдминистрированияКластера, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваРабочихСерверов
@section СвойстваРабочихСерверов
@ifinfo
@heading СвойстваРабочихСерверов
@end ifinfo
 Возвращает описания рабочих серверов.
@*@b{Синтаксис}@*
@deffn Функция СвойстваРабочихСерверов(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  Фильтр - Структура - параметры фильтрации рабочих серверов.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - массив структур (свойств рабочих процессов).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваРабочихСерверов(ИдентификаторКластера, ПараметрыАдминистрированияКластера, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваСеанса
@section СвойстваСеанса
@ifinfo
@heading СвойстваСеанса
@end ifinfo
 Конструктор структуры, описывающей свойства сеанса информационной базы.
@*@b{Синтаксис}@*
@deffn Функция СвойстваСеанса() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - структура с полями:
   * Номер - Число - номер сеанса. Уникален среди всех сеансов информационной базы,
   * ИмяПользователя - Строка - имя аутентифицированного пользователя информационной базы,
   * ИмяКлиентскогоКомпьютера - Строка - имя или сетевой адрес компьютера, установившего
     сеанс с информационной базой,
   * ИдентификаторКлиентскогоПриложения - Строка - идентификатор приложения, установившего сеанс
     (см. описание к функции глобального контекста ПредставлениеПриложения),
   * ИдентификаторЯзыка - Строка - идентификатор языка интерфейса,
   * МоментСозданияСеанса - Дата - (Дата и время) момент установки сеанса,
   * МоментПоследнейАктивностиСеанса - Дата - (Дата и время) момент последней активности сеанса,
   * Блокировка - Число - номер сеанса, который является причиной ожидания управляемой транзакционной
     блокировки, в том случае, если сеанс выполняет установку управляемых транзакционных блокировок
     и ожидает снятия блокировок, установленных другим сеансом (иначе - значение равно 0),
   * БлокировкаСУБД - Число - номер сеанса, который является причиной ожидания транзакционной
     блокировки, в том случае, если сеанс исполняет запрос к СУБД и ожидает транзакционную
     блокировку, установленную другим сеансом (иначе - значение равно 0),
   * Передано - Число - объем данных, переданных меду сервером 1С:Предприятия и клиентским приложением
     данного сеанса с момента начала сеанса (в байтах),
   * ПереданоЗа5Минут - Число - объем данных, переданных между сервером 1С:Предприятия и клиентским
     приложением данного сеанса за последние 5 минут (в байтах),
   * СерверныхВызовов - Число - количество вызовов сервера 1С:Предприятия от имена данного сеанса с
     момента начала сеанса,
   * СерверныхВызововЗа5Минут - Число - количество вызовов сервера 1С:Предприятия от имени данного сеанса
     за последние 5 минут,
   * ДлительностьСерверныхВызовов - Число - время исполнения вызовов сервера 1С:Предприятия от имени
     данного сеанса с момента начала сеанса (в секундах),
   * ДлительностьТекущегоСерверногоВызова - Число - интервал времени в миллисекундах, прошедший с момента начала
     обращения, в случае, если сеанс выполняется вызов сервера 1С:Предприятия (иначе - значение равно 0),
   * ДлительностьСерверныхВызововЗа5Минут - Число - время исполнения вызовов сервера 1С:Предприятия от имени
     данного сеанса за последние 5 минут (в миллисекундах),
   * ПереданоСУБД - Число - количество данных, переданных и полученных от СУБД от имени данного сеанса с
     момента начала сеанса (в байтах),
   * ПереданоСУБДЗа5Минут - Число - количество данных, переданных и полученных от СУБД от имени данного сеанса
     за последние 5 минут (в байтах),
   * ДлительностьВызововСУБД - Число - время исполнения запросов к СУБД от имени данного сеанса с момента начала
     сеанса (в миллисекундах),
   * ДлительностьТекущегоВызоваСУБД - Число - интервал времени в миллисекундах, прошедший с начала выполнения
     запроса в случае, если сеанс выполняет запрос к СУБД (иначе - значение равно 0),
   * ДлительностьВызововСУБДЗа5Минут - Число - суммарное время исполнения запросов к СУБД от имени данного сеанса
     за последние 5 минут (в миллисекундах),
   * СоединениеСУБД - Строка - номер соединения с СУБД в терминах СУБД в том случае, если в момент получения списка
     сеансов выполняется запрос к СУБД, открыта транзакция или определены временные таблицы (т.е. захвачено
     соединение с СУБД). Если соединение с СУБД не захвачено - значение равно пустой строке,
   * ВремяСоединенияСУБД - Число - время соединения с СУБД с момента захвата (в миллисекундах). Если соединение с.
     СУБД не захвачено - значение равно 0,
   * МоментЗахватаСоединенияСУБД - Дата - (Дата и время) момент времени, когда соединение с СУБД было последний раз
     захвачено другим сеансом.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваСеанса()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваСеансов
@section СвойстваСеансов
@ifinfo
@heading СвойстваСеансов
@end ifinfo
 Возвращает описания сеансов информационной базы.
@*@b{Синтаксис}@*
@deffn Функция СвойстваСеансов(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач ИдентификаторИнформационнойБазы, Знач Фильтр = Неопределено, Знач ИспользоватьСловарь = Истина) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ИдентификаторИнформационнойБазы - Строка - внутренний идентификатор информационной базы,
  Фильтр - Массив - массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
             * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса),
             * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения,
             * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
               сравнивается значение соответствующего свойства сеанса.
         - Структура - структура: ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
           выполняется сеанс. При использовании данного варианта описания фильтра сравнение всегда выполняется на
           равенство.
  ИспользоватьСловарь - Булево - если Истина, то возвращаемый результат будет заполнен с использован словаря, иначе - без
    использования.
@end example
@*@b{Возвращаемое значение}@*
@example
   - Массив(Структура) - Массив - структур (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса), описывающих
                                  свойства сеансов,
   - Массив(Соответствие) - Массив - соответствий (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса),
     описывающих свойства сеансов в нотации утилиты rac (при ИспользоватьСловарь = Ложь).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваСеансов(ИдентификаторКластера, ПараметрыАдминистрированияКластера, ИдентификаторИнформационнойБазы, Фильтр, ИспользоватьСловарь)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваСоединений
@section СвойстваСоединений
@ifinfo
@heading СвойстваСоединений
@end ifinfo
 Возвращает описания соединений с информационной базой.
@*@b{Синтаксис}@*
@deffn Функция СвойстваСоединений(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач ИдентификаторИнформационнойБазы, Знач ПараметрыАдминистрированияИнформационнойБазы, Знач Фильтр = Неопределено, Знач ИспользоватьСловарь = Ложь) Экспорт
@*@b{Параметры}@*
@example
  ИдентификаторКластера - Строка - внутренний идентификатор кластера серверов,
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ИдентификаторИнформационнойБазы - Строка - внутренний идентификатор информационной базы,
  ПараметрыАдминистрированияИнформационнойБазы - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
  Фильтр - Массив - массив структур, описывающих условия фильтрации соединений. Поля структур, входящих в массив:
             * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСоединений),
             * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения,
             * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
               сравнивается значение соответствующего свойства соединения.
         - Структура - структура: ключ - Имя свойства соединения (см. выше), значение - значение, с которым
           выполняется соединение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
           равенство.
  ИспользоватьСловарь - Булево - если Истина - возвращаемый результат будет заполнен с использован словаря, иначе - без
    использования.
@end example
@*@b{Возвращаемое значение}@*
@example
   - Массив(Структура) - Массив - структур (см. АдминистрированиеКластераКлиентСервер.СвойстваСоединений), описывающих
                                  свойства соединений,
   - Массив(Соответствие) - Массив - соответствий (см. АдминистрированиеКластераКлиентСервер.СвойстваСоединений),
     описывающих свойства соединений в нотации утилиты rac (при ИспользоватьСловарь = Ложь).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваСоединений(ИдентификаторКластера, ПараметрыАдминистрированияКластера, ИдентификаторИнформационнойБазы, ПараметрыАдминистрированияИнформационнойБазы, Фильтр, ИспользоватьСловарь)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойстваСоединения
@section СвойстваСоединения
@ifinfo
@heading СвойстваСоединения
@end ifinfo
 Конструктор структуры, описывающей свойства соединения с информационной базой.
@*@b{Синтаксис}@*
@deffn Функция СвойстваСоединения() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - структура с полями:
    * Номер - Число - номер соединения с информационной базой,
    * ИмяПользователя - Строка - имя пользователя 1С:Предприятия, подсоединенного к информационной базе,
    * ИмяКлиентскогоКомпьютера - Строка - имя компьютера, с которого установлено соединение,
    * ИдентификаторКлиентскогоПриложения - Строка - идентификатор приложения, установившего соединение (см. описание к
                                                    функции глобального контекста ПредставлениеПриложения),
    * МоментУстановкиСоединения - Дата - (Дата и время) момент установки соединения,
    * РежимСоединенияСИнформационнойБазой - Число - режим соединения с информационной базой (0 -
      разделяемый, 1 - монопольный),
    * РежимСоединенияСБазойДанных - Число - режим соединения с базой данных (0 - соединение не установлено,
      1 - разделяемый, 2 - монопольный),
    * БлокировкаСУБД - Число - идентификатор соединения, блокирующего работу данного соединения в СУБД,
    * Передано - Число - объем данных, полученных и отправленных соединением,
    * ПереданоЗа5Минут - Число - объем данных, полученных и отправленных соединением за последние 5 минут,
    * СерверныхВызовов - Число - количество серверных вызовов,
    * СерверныхВызововЗа5Минут - Число - количество серверных вызовов соединения за последние 5 минут,
    * ПереданоСУБД - Число - объем данных, переданных между сервером 1С:Предприятия и сервером баз данных,
      с момента установки данного соединения,
    * ПереданоСУБДЗа5Минут - Число - объем данных, переданных между сервером 1С:Предприятия и сервером баз
        данных за последние 5 минут,
    * СоединениеСУБД - Строка - идентификатор процесса соединения с СУБД (если на момент получения списка
      соединений данное соединение выполняло обращение к серверу СУБД, в противном случае - значение равно пустой
      строке). Идентификатор возвращается в терминах сервера СУБД,
    * ВремяСУБД - Число - время в секундах, в течении которого выполняется обращение к серверу СУБД (если на момент
      получения списка соединений данное соединение выполняло обращение к серверу СУБД, в противном случае - значение
      равно 0),
    * МоментЗахватаСоединенияСУБД - Дата - (Дата и время) момент последнего захвата соединения с сервером СУБД,
    * ДлительностьСерверныхВызовов - Число - длительность всех серверных вызовов соединения,
    * ДлительностьВызововСУБД - Число - время вызовов СУБД, инициированных соединением,
    * ДлительностьТекущегоСерверногоВызова - Число - длительность текущего серверного вызова,
    * ДлительностьТекущегоВызоваСУБД - Число - длительность текущего вызова сервера СУБД,
    * ДлительностьСерверныхВызововЗа5Минут - Число - длительность серверных вызовов соединения за последние 5 минут,
    * ДлительностьВызововСУБДЗа5Минут - Число - длительность вызовов соединения СУБД за последние 5 минут.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СвойстваСоединения()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СвойствоСтруктуры
@section СвойствоСтруктуры
@ifinfo
@heading СвойствоСтруктуры
@end ifinfo
 Возвращает значение свойства структуры.
@*@b{Синтаксис}@*
@deffn Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   Структура - Структура, ФиксированнаяСтруктура - Объект, из которого необходимо прочитать значение ключа.
   Ключ - Строка - Имя свойства структуры, для которого необходимо прочитать значение.
   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в структуре нет значения по указанному
                                        ключу.
       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
       требуется).
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СеансыИнформационнойБазы
@section СеансыИнформационнойБазы
@ifinfo
@heading СеансыИнформационнойБазы
@end ifinfo
 Возвращает описания сеансов информационной базы.
@*@b{Синтаксис}@*
@deffn Функция СеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  Фильтр - Массив - массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
             * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса),
             * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения,
             * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
               сравнивается значение соответствующего свойства сеанса.
         - Структура - структура: ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
           выполняется сеанс. При использовании данного варианта описания фильтра сравнение всегда выполняется на
           равенство.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - массив структур (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса).
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СеансыИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьВБуферОбмена
@section СкопироватьВБуферОбмена
@ifinfo
@heading СкопироватьВБуферОбмена
@end ifinfo
 Помещает произвольные данные во внутренний буфер обмена, откуда их можно получить с помощью СтрокиИзБуфераОбмена.
@*@b{Синтаксис}@*
@deffn Процедура СкопироватьВБуферОбмена(Данные, Источник = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Данные           - Произвольный - Данные, которые необходимо поместить в внутренний буфер обмена.
  Источник         - Строка       - Произвольный строковый идентификатор, например, имя объекта,
                                    строки табличной части которого помещаются во внутренний буфер обмена.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.СкопироватьВБуферОбмена(Данные, Источник)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьМассив
@section СкопироватьМассив
@ifinfo
@heading СкопироватьМассив
@end ifinfo
 Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
 Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
 то их содержимое не копируются, а возвращаются ссылки на исходный объект.
@*@b{Синтаксис}@*
@deffn Функция СкопироватьМассив(МассивИсточник) Экспорт
@*@b{Параметры}@*
@example
  МассивИсточник - Массив - массив, копию которого необходимо получить.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - копия исходного массива.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивИсточник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьРекурсивно
@section СкопироватьРекурсивно
@ifinfo
@heading СкопироватьРекурсивно
@end ifinfo
 Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
 с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
 (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
@*@b{Синтаксис}@*
@deffn Функция СкопироватьРекурсивно(Источник) Экспорт
@*@b{Параметры}@*
@example
  Источник - Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - объект, который необходимо 
             скопировать.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Источник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьСоответствие
@section СкопироватьСоответствие
@ifinfo
@heading СкопироватьСоответствие
@end ifinfo
 Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
 Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
 то их содержимое не копируются, а возвращаются ссылки на исходный объект.
@*@b{Синтаксис}@*
@deffn Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
@*@b{Параметры}@*
@example
  СоответствиеИсточник - Соответствие - соответствие, копию которого необходимо получить.
@end example
@*@b{Возвращаемое значение}@*
@example
  Соответствие - копия исходного соответствия.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СоответствиеИсточник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьСписокЗначений
@section СкопироватьСписокЗначений
@ifinfo
@heading СкопироватьСписокЗначений
@end ifinfo
 Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
 Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
 то их содержимое не копируются, а возвращаются ссылки на исходный объект.
@*@b{Синтаксис}@*
@deffn Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
@*@b{Параметры}@*
@example
  СписокИсточник - СписокЗначений - список значений, копию которого необходимо получить.
@end example
@*@b{Возвращаемое значение}@*
@example
  СписокЗначений - копия исходного списка значений.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(СписокИсточник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьСтрокиВБуферОбмена
@section СкопироватьСтрокиВБуферОбмена
@ifinfo
@heading СкопироватьСтрокиВБуферОбмена
@end ifinfo
 Помещает выделенные строки табличной части во внутренний буфер обмена
 откуда их можно получить с помощью СтрокиИзБуфераОбмена.
@*@b{Синтаксис}@*
@deffn Процедура СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, ВыделенныеСтроки, Источник = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ТабличнаяЧасть   - ДанныеФормыКоллекция - Табличная часть, строки которой
                                            необходимо поместить во внутренний буфер обмена.
  ВыделенныеСтроки - Массив - Массив идентификаторов выделенных строк.
  Источник         - Строка - Произвольный строковый идентификатор, например, имя объекта,
                              строки табличной части которого помещаются во внутренний буфер обмена.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, ВыделенныеСтроки, Источник)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СкопироватьСтруктуру
@section СкопироватьСтруктуру
@ifinfo
@heading СкопироватьСтруктуру
@end ifinfo
 Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств. 
 Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
 то их содержимое не копируются, а возвращаются ссылки на исходный объект.
@*@b{Синтаксис}@*
@deffn Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
@*@b{Параметры}@*
@example
  СтруктураИсточник - Структура - копируемая структура.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - копия исходной структуры.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураИсточник)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СнятьБлокировкуСеансовИЗаданийИнформационнойБазы
@section СнятьБлокировкуСеансовИЗаданийИнформационнойБазы
@ifinfo
@heading СнятьБлокировкуСеансовИЗаданийИнформационнойБазы
@end ifinfo
 Снимает блокировку сеансов и регламентных заданий для информационной базы.
@*@b{Синтаксис}@*
@deffn Процедура СнятьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.СнятьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СнятьУсловноеОформлениеСпискаЗначений
@section СнятьУсловноеОформлениеСпискаЗначений
@ifinfo
@heading СнятьУсловноеОформлениеСпискаЗначений
@end ifinfo
 Снимает один элемент условного оформления, если это список значений.
@*@b{Синтаксис}@*
@deffn Процедура СнятьУсловноеОформлениеСпискаЗначений(УсловноеОформление, Знач ИдентификаторПользовательскойНастройки, 
	Знач Значение) Экспорт
@*@b{Параметры}@*
@example
  УсловноеОформление - УсловноеОформление - условное оформление элемента формы;
  ИдентификаторПользовательскойНастройки - Строка - идентификатор настройки;
  Значение - Произвольный -  значение, которое требуется удалить из списка оформления.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.СнятьУсловноеОформлениеСпискаЗначений(УсловноеОформление, ИдентификаторПользовательскойНастройки, Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СоединенияСИнформационнойБазой
@section СоединенияСИнформационнойБазой
@ifinfo
@heading СоединенияСИнформационнойБазой
@end ifinfo
 Возвращает описания соединений с информационной базой.
@*@b{Синтаксис}@*
@deffn Функция СоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  Фильтр - Массив - массив структур, описывающих условия фильтрации соединений. Поля структур, входящих в массив:
             * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСоединения),
             * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений
               соединений с указанным в условии фильтра,
             * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
               сравнивается значение соответствующего свойства соединения,
         - Структура - структура: ключ - Имя свойства соединения (см. выше), значение - значение, с которым
           выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на равенство.
@end example
@*@b{Возвращаемое значение}@*
@example
   Массив - см. АдминистрированиеКластераКлиентСервер.СвойстваСоединения.
@end example
@*@b{Пример вызова}@*
Результат = АдминистрированиеКластераКлиентСервер.СоединенияСИнформационнойБазой(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СоздатьWSПрокси
@section СоздатьWSПрокси
@ifinfo
@heading СоздатьWSПрокси
@end ifinfo
 Конструктор объекта WSПрокси.
 Отличия от конструктора Новый WSПрокси:
  - встроенный конструктор WSОпределения;
  - кэширует файл WSDL;
  - не требуется указание ИнтернетПрокси (используется автоматически, если настроен);
  - умеет делать быструю проверку доступности сервиса.
@*@b{Синтаксис}@*
@deffn Функция СоздатьWSПрокси(ПереданныеПараметры) Экспорт
@*@b{Параметры}@*
@example
  ПереданныеПараметры             - Структура - настройки подключения (необходимо использовать функцию ПараметрыПодключенияWSПрокси):
   * АдресWSDL                    - Строка - месторасположение wsdl.
   * URIПространстваИмен          - Строка - URI пространства имен web-сервиса.
   * ИмяСервиса                   - Строка - имя сервиса.
   * ИмяТочкиПодключения          - Строка - (необязательный) если не задано, образуется как <ИмяСервиса>Soap.
   * ИмяПользователя              - Строка - (необязательный) имя пользователя для входа на сервер.
   * Пароль                       - Строка - (необязательный) пароль пользователя.
   * Таймаут                      - Число  - (необязательный) таймаут на операции выполняемые через полученное прокси.
   * Местоположение               - Строка - (необязательный) фактический адрес сервиса. Используется, если адрес реального
                                             расположения сервиса отличается от адреса, который указан в WSDL-файле.
   * ИспользоватьАутентификациюОС - Булево - (необязательный) включает использование авторизации NTLM или Negotiate на
                                             сервере.
   * ДелатьКонтрольныйВызов       - Булево - (необязательный) выполнять проверку доступности сервиса (требуется 
                                             поддержка этой команды веб-сервисом).
   * ЗащищенноеСоединение         - ЗащищенноеСоединениеOpenSSL, Неопределено - (необязательный) параметры защищенного
                                                                                соединения.
@end example
@*@b{Возвращаемое значение}@*
@example
  WSПрокси  - объект WSПрокси.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СоздатьWSПрокси(ПереданныеПараметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СоздатьВременныйКаталог
@section СоздатьВременныйКаталог
@ifinfo
@heading СоздатьВременныйКаталог
@end ifinfo
1. Для вызова с клиента
 Получение имени временного каталога.
@*@b{Синтаксис}@*
@deffn Процедура СоздатьВременныйКаталог(Знач Оповещение, Расширение = "") Экспорт 
@*@b{Параметры}@*
@example
  Оповещение - ОписаниеОповещения - оповещение о результате получения.
      * ИмяКаталога             - Строка - путь к созданному каталогу.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
  Расширение - Строка - суффикс в имени каталога, который поможет идентифицировать каталог при анализе.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.СоздатьВременныйКаталог(Оповещение, Расширение)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Создает временный каталог. После окончания работы с временным каталогом его необходимо удалить 
 с помощью ОбщегоНазначения.УдалитьВременныйКаталог.
@*@b{Синтаксис}@*
@deffn Функция СоздатьВременныйКаталог(Знач Расширение = "") Экспорт
@*@b{Параметры}@*
@example
   Расширение - Строка - Расширение каталога, которое идентифицирует назначение временного каталога
                         и подсистему, которая его создала.
                         Рекомендуется указывать на английском языке.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - Полный путь к каталогу с разделителем пути.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СоздатьВременныйКаталог(Расширение)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СоздатьГруппуЭлементовОтбора
@section СоздатьГруппуЭлементовОтбора
@ifinfo
@heading СоздатьГруппуЭлементовОтбора
@end ifinfo
 Добавить группу отбора в коллекцию КоллекцияЭлементов.
@*@b{Синтаксис}@*
@deffn Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
@*@b{Параметры}@*
@example
  КоллекцияЭлементов - ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных,
                       ГруппаЭлементовОтбораКомпоновкиДанных - контейнер
                       с элементами и группами отбора, например Список.Отбор или группа в отборе.
  Представление      - Строка - представление группы.
  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
@end example
@*@b{Возвращаемое значение}@*
@example
  ГруппаЭлементовОтбораКомпоновкиДанных - группа отбора.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СоздатьПрофильБезопасности
@section СоздатьПрофильБезопасности
@ifinfo
@heading СоздатьПрофильБезопасности
@end ifinfo
 Создает профиль безопасности по переданному описанию.
@*@b{Синтаксис}@*
@deffn Процедура СоздатьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  СвойстваПрофиляБезопасности - Структура - см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.СоздатьПрофильБезопасности(ПараметрыАдминистрированияКластера, СвойстваПрофиляБезопасности)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СократитьДвойныеКавычки
@section СократитьДвойныеКавычки
@ifinfo
@heading СократитьДвойныеКавычки
@end ifinfo
 Удаляет двойные кавычки с начала и конца строки, если они есть.
@*@b{Синтаксис}@*
@deffn Функция СократитьДвойныеКавычки(Знач Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Строка - входная строка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка без двойных кавычек.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СократитьСтрокуКонтрольнойСуммой
@section СократитьСтрокуКонтрольнойСуммой
@ifinfo
@heading СократитьСтрокуКонтрольнойСуммой
@end ifinfo
 Сокращает строку до нужной длины, при этом обрезанная часть хешируется,
 обеспечивая уникальность строки. Проверяет длину строки на входе и, в случае
 превышения максимальной длины, преобразует ее конец по алгоритму MD5 в
 уникальную строку из 32 символов.
@*@b{Синтаксис}@*
@deffn Функция СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
@*@b{Параметры}@*
@example
  Строка            - Строка - исходная строка произвольной длины.
  МаксимальнаяДлина - Число  - требуемое максимальное количество символов в строке,
                               минимальное значение: 32.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - строка, не превышающая максимальную длину.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СообщенияПользователю
@section СообщенияПользователю
@ifinfo
@heading СообщенияПользователю
@end ifinfo
 Получает сообщения пользователю, отфильтровывает служебные сообщения о состоянии длительной операции.
@*@b{Синтаксис}@*
@deffn Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  УдалятьПолученные    - Булево                  - Признак необходимости удаления полученных сообщений.
  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания, соответствующего длительной 
                                                   операции, у которой требуется получить сообщения пользователю. 
                                                   Если не задан, то сообщения пользователю возвращаются
                                                   из сеанса текущего пользователя.
@end example
@*@b{Возвращаемое значение}@*
@example
@end example
  ФиксированныйМассив - объекты СообщениеПользователю, которые были сформированы в фоновом задании.
@*@b{Пример вызова}@*
   Операция = ДлительныеОперации.ВыполнитьВФоне(...);
   ...
   Сообщения = ДлительныеОперации.СообщенияПользователю(Истина, Операция.ИдентификаторЗадания);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СообщитьОшибкиПользователю
@section СообщитьОшибкиПользователю
@ifinfo
@heading СообщитьОшибкиПользователю
@end ifinfo
 Выводит накопленные методом ДобавитьОшибкуПользователю ошибки, при этом использует нужные шаблоны текстов ошибок
 в зависимости от количества однотипных ошибок.
@*@b{Синтаксис}@*
@deffn Процедура СообщитьОшибкиПользователю(Ошибки, Отказ = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Ошибки  - Неопределено, Структура - коллекция ошибок.
  Отказ   - Булево - устанавливается Истина, если ошибки сообщались.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СообщитьПользователю
@section СообщитьПользователю
@ifinfo
@heading СообщитьПользователю
@end ifinfo
 Формирует и выводит сообщение, которое может быть связано с элементом 
 управления формы.
@*@b{Синтаксис}@*
@deffn Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
@*@b{Параметры}@*
@example
  ТекстСообщенияПользователю - Строка - текст сообщения.
  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
  Поле                       - Строка - наименование реквизита формы.
  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
@end example
@*@b{Пример вызова}@*
  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
   НСтр("ru = 'Сообщение об ошибке.'"), ,
   "ПолеВРеквизитеФормыОбъект",
   "Объект");
  Альтернативный вариант использования в форме объекта:
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
   НСтр("ru = 'Сообщение об ошибке.'"), ,
   "Объект.ПолеВРеквизитеФормыОбъект");
  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
   НСтр("ru = 'Сообщение об ошибке.'"), ,
   "ИмяРеквизитаФормы");
  3. Для вывода сообщения связанного с объектом информационной базы:
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
  4. Для вывода сообщения по ссылке на объект информационной базы:
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
  Случаи некорректного использования:
   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
   2. Передача в параметре КлючДанных значения типа отличного от допустимых.
   3. Установка ссылки без установки поля (и/или пути к данным).
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СообщитьПрогресс
@section СообщитьПрогресс
@ifinfo
@heading СообщитьПрогресс
@end ifinfo
 Регистрирует информацию о ходе выполнения длительной операции.
 В дальнейшем ее можно считать при помощи функции ДлительныеОперации.ПрочитатьПрогресс.
 Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
 не следует сообщать прогресс более 100 раз.
@*@b{Синтаксис}@*
@deffn Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Процент                 - Число        - Процент выполнения.
  Текст                   - Строка       - Информация о текущей операции.
  ДополнительныеПараметры - Произвольный - Любая дополнительная информация, которую необходимо передать на клиент. 
                                           Значение должно быть простым (сериализуемым в XML строку).
@end example
@*@b{Пример вызова}@*
ДлительныеОперации.СообщитьПрогресс(Процент, Текст, ДополнительныеПараметры)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СохранитьПерсональныеНастройки
@section СохранитьПерсональныеНастройки
@ifinfo
@heading СохранитьПерсональныеНастройки
@end ifinfo
1. Для вызова с клиента
 Сохраняет персональные настройки пользователя.
@*@b{Синтаксис}@*
@deffn Процедура СохранитьПерсональныеНастройки(Настройки) Экспорт
@*@b{Параметры}@*
@example
 Настройки - Структура - коллекция настроек:
  * НапоминатьОбУстановкеРасширенияРаботыСФайлами  - Булево - Признак необходимости
                                                               напоминания об установке расширения.
  * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - Запрашивать подтверждение по завершении работы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиент.СохранитьПерсональныеНастройки(Настройки)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

2. Для вызова с сервера
 Сохраняет персональные настройки пользователя, относящиеся к подсистеме БазоваяФункциональность.
 Для получения настроек предусмотрены следующие функции:
  - ОбщегоНазначенияКлиент.ПредлагатьУстановкуРасширенияРаботыСФайлами(),
  - СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы().
@*@b{Синтаксис}@*
@deffn Процедура СохранитьПерсональныеНастройки(Настройки) Экспорт
@*@b{Параметры}@*
@example
 Настройки - Структура - коллекция настроек:
  * НапоминатьОбУстановкеРасширенияРаботыСФайлами  - Булево - Признак необходимости
                                                               напоминания об установке расширения.
  * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - Запрашивать подтверждение по завершении работы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.СохранитьПерсональныеНастройки(Настройки)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СпискиЗначенийИдентичны
@section СпискиЗначенийИдентичны
@ifinfo
@heading СпискиЗначенийИдентичны
@end ifinfo
 Сравнивает элементы списков значений или массивов по значениям.
@*@b{Синтаксис}@*
@deffn Функция СпискиЗначенийИдентичны(Список1, Список2) Экспорт
@*@b{Параметры}@*
@example
  Список1 - Массив, СписокЗначений - сравниваемая коллекция элементов.
  Список2 - Массив, СписокЗначений - сравниваемая коллекция элементов.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если идентичны.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(Список1, Список2)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СравнитьВерсии
@section СравнитьВерсии
@ifinfo
@heading СравнитьВерсии
@end ifinfo
 Сравнить две строки версий.
@*@b{Синтаксис}@*
@deffn Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
@*@b{Параметры}@*
@example
  СтрокаВерсии1  - Строка - номер версии в формате РР.@{П|ПП@}.ЗЗ.СС.
  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
@end example
@*@b{Возвращаемое значение}@*
@example
   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СравнитьВерсииБезНомераСборки
@section СравнитьВерсииБезНомераСборки
@ifinfo
@heading СравнитьВерсииБезНомераСборки
@end ifinfo
 Сравнить две строки версий.
@*@b{Синтаксис}@*
@deffn Функция СравнитьВерсииБезНомераСборки(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
@*@b{Параметры}@*
@example
  СтрокаВерсии1  - Строка - номер версии в формате РР.@{П|ПП@}.ЗЗ.
  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
@end example
@*@b{Возвращаемое значение}@*
@example
   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(СтрокаВерсии1, СтрокаВерсии2)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СсылкаСуществует
@section СсылкаСуществует
@ifinfo
@heading СсылкаСуществует
@end ifinfo
 Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
@*@b{Синтаксис}@*
@deffn Функция СсылкаСуществует(ПроверяемаяСсылка) Экспорт
@*@b{Параметры}@*
@example
  ПроверяемаяСсылка - ЛюбаяСсылка - значение любой ссылки информационной базы данных.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если существует.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СсылкаСуществует(ПроверяемаяСсылка)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СтраховойНомерПФРСоответствуетТребованиям
@section СтраховойНомерПФРСоответствуетТребованиям
@ifinfo
@heading СтраховойНомерПФРСоответствуетТребованиям
@end ifinfo
 Проверяет номер страхового свидетельства на соответствие требованиям ПФР.
@*@b{Синтаксис}@*
@deffn Функция СтраховойНомерПФРСоответствуетТребованиям(Знач СтраховойНомер, ТекстСообщения) Экспорт
@*@b{Параметры}@*
@example
  СтраховойНомер - Строка - страховой номер ПФР. Строка должна быть ведена по шаблону "999-999-999 99".
  ТекстСообщения - Строка - текст сообщения об ошибке ввода страхового номера.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если соответствует.
@end example
@*@b{Пример вызова}@*
Результат = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомер, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокаВДату
@section СтрокаВДату
@ifinfo
@heading СтрокаВДату
@end ifinfo
 Преобразует исходную строку в дату.
@*@b{Синтаксис}@*
@deffn Функция СтрокаВДату(Знач Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Строка - Строка, которую необходимо привести к дате.
                      Формат даты должен быть в виде "ДД.ММ.ГГГГ" или "ДД/ММ/ГГ" или "ДД-ММ-ГГ",
                      Например, "23.02.1980" или "23/02/80".
@end example
@*@b{Возвращаемое значение}@*
@example
  Дата - полученная дата.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокаВЧисло
@section СтрокаВЧисло
@ifinfo
@heading СтрокаВЧисло
@end ifinfo
 Преобразует исходную строку в число без вызова исключений.
@*@b{Синтаксис}@*
@deffn Функция СтрокаВЧисло(Знач Значение) Экспорт
@*@b{Параметры}@*
@example
   Значение - Строка - Строка, которую необходимо привести к числу.
                       Например, "10", "+10", "010", вернет 10;
                                 "(10)", "-10",вернет -10;
                                 "10,2", "10.2",вернет 10.2;
                                 "000", " ", "",вернет 0;
                                 "10текст", вернет Неопределено.
@end example
@*@b{Возвращаемое значение}@*
@example
   Число, Неопределено - Полученное число, либо Неопределено, если строка не является числом.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокаЛатиницей
@section СтрокаЛатиницей
@ifinfo
@heading СтрокаЛатиницей
@end ifinfo
 Преобразует исходную строку в транслит.
 Может использоваться для отправки SMS сообщений латиницей или для сохранения
 файлов и папок, чтобы обеспечить возможность их переноса между разными операционными системами.
 Обратное преобразование из латинских символов не предусмотрено.
@*@b{Синтаксис}@*
@deffn Функция СтрокаЛатиницей(Знач Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Строка - произвольная строка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка, в которой кириллица заменена на транслит.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокаСЧисломДляЛюбогоЯзыка
@section СтрокаСЧисломДляЛюбогоЯзыка
@ifinfo
@heading СтрокаСЧисломДляЛюбогоЯзыка
@end ifinfo
 Формирует представление числа для определенного языка и параметров числа.
@*@b{Синтаксис}@*
@deffn Функция СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число, Вид = Неопределено, ФорматнаяСтрока = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Шаблон          - Строка - Строка, содержит перечисленные через точку с запятой 6 форм строки
                             для каждой категории числительного: 
                             - %1 обозначает позицию числа;
  Число           - Число - Число, которое будет подставлено в строку вместо параметра "%1".
  Вид             - ВидЧисловогоЗначения - Определяет вид числового значения, для которого формируется представление. 
                             - Количественное (по умолчанию) или Порядковое.
  ФорматнаяСтрока - Строка - Строка параметров форматирования. См. аналогичный параметр в СтрокаСЧислом. 
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - Представление строки числа в требуемой форме.
@end example
@*@b{Пример вызова}@*
  // Представление параметров:
  //
  // Lang | Zero | One             | Two            | Few               | Many                  | Other
  // ============================================================================================================
  // ru   |      | XX1 / X11       |                | XX2-XX4 / X12-X14 | XX0, XX5-XX9, X11-X14 | дробные
  // Card.|      | остался %1 день |                | осталось %1 дня   | осталось %1 дней      | осталось %1 дня
  //      |      | вижу %1 рыбу    |                | вижу %1-х рыб     | вижу %5 рыб           | вижу %1 рыбы
  // ------------------------------------------------------------------------------------------------------------
  // ru   |      |                 |                |                   |                       | других нет
  // Ord. |      |                 |                |                   |                       | %1-й день 
  // ------------------------------------------------------------------------------------------------------------
  // en   |      | для 1           |                |                   |                       | остальное
  // Card.|      | left %1 day     |                |                   |                       | left %1 days
  // ------------------------------------------------------------------------------------------------------------
  // en   |      | XX1 / X11       | XX2 / X12      | XX3 / X13         |                       | остальное
  // Ord. |      | %1st day        | %1nd day       | %1rd day          |                       | %1th day.
  // Card. - Cardinal - Количественное;
  // Ord.  - Ordinal  - Порядковое;
  // X - любая цифра;
  // / - кроме.
  Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
  НСтр("ru=';остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня';
       |en=';left %1 day;;;;left %1 days'"), 
  0.05,, "ЧДЦ=1");
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокаТаблицыЗначенийВСтруктуру
@section СтрокаТаблицыЗначенийВСтруктуру
@ifinfo
@heading СтрокаТаблицыЗначенийВСтруктуру
@end ifinfo
 Преобразует строку таблицы значений в структуру.
 Свойства структуры и их значения совпадают с колонками переданной строки.
@*@b{Синтаксис}@*
@deffn Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
@*@b{Параметры}@*
@example
  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - преобразованная строка таблицы значений.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СтрокиИзБуфераОбмена
@section СтрокиИзБуфераОбмена
@ifinfo
@heading СтрокиИзБуфераОбмена
@end ifinfo
 Получает строки табличной части, помещенные во внутренний буфер обмена с помощью СкопироватьСтрокиВБуферОбмена.
@*@b{Синтаксис}@*
@deffn Функция СтрокиИзБуфераОбмена() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - со свойствами:
     * Данные   - Произвольный - Данные из внутреннего буфера обмена.
                                 Например, ТаблицаЗначений при вызове СкопироватьСтрокиВБуферОбмена.
     * Источник - Строка       - Объект, к которому относятся данные.
                                 Если при помещении во внутренний буфер не был указан, то Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СтрокиИзБуфераОбмена()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СтроковоеПредставлениеТипа
@section СтроковоеПредставлениеТипа
@ifinfo
@heading СтроковоеПредставлениеТипа
@end ifinfo
 Возвращает строковое представление типа. 
 Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта".
 Для остальных типов приводит тип к строке, например "Число".
@*@b{Синтаксис}@*
@deffn Функция СтроковоеПредставлениеТипа(Тип) Экспорт
@*@b{Параметры}@*
@example
  Тип - Тип - для которого надо получить представление.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - представление типа.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СтруктураURI
@section СтруктураURI
@ifinfo
@heading СтруктураURI
@end ifinfo
 Разбирает строку URI на составные части и возвращает в виде структуры.
 На основе RFC 3986.
@*@b{Синтаксис}@*
@deffn Функция СтруктураURI(Знач СтрокаURI) Экспорт
@*@b{Параметры}@*
@example
  СтрокаURI - Строка - ссылка на ресурс в формате:
                       <схема>://<логин>:<пароль>@@<хост>:<порт>/<путь>?<параметры>#<якорь>.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - составные части URI согласно формату:
   * Схема         - Строка - схема из URI.
   * Логин         - Строка - логин из URI.
   * Пароль        - Строка - пароль из URI.
   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
   * Хост          - Строка - хост из URI.
   * Порт          - Строка - порт из URI.
   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаURI)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтруктураВРасписание
@section СтруктураВРасписание
@ifinfo
@heading СтруктураВРасписание
@end ifinfo
 Преобразует структуру в РасписаниеРегламентногоЗадания.
@*@b{Синтаксис}@*
@deffn Функция СтруктураВРасписание(Знач СтруктураРасписания) Экспорт
@*@b{Параметры}@*
@example
  СтруктураРасписания - Структура - расписание в виде структуры.
@end example
@*@b{Возвращаемое значение}@*
@example
  РасписаниеРегламентногоЗадания - расписание.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(СтруктураРасписания)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтруктураПараметровДляУстановкиВнешнегоСоединения
@section СтруктураПараметровДляУстановкиВнешнегоСоединения
@ifinfo
@heading СтруктураПараметровДляУстановкиВнешнегоСоединения
@end ifinfo
 Возвращает шаблон структуры параметров для установки внешнего соединения.
 Параметрам необходимо задать требуемые значения и передать.
 В метод ОбщегоНазначения.УстановитьВнешнееСоединение().
@*@b{Синтаксис}@*
@deffn Функция СтруктураПараметровДляУстановкиВнешнегоСоединения() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - коллекция параметров.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node СтруктураПоМенеджеруЗаписи
@section СтруктураПоМенеджеруЗаписи
@ifinfo
@heading СтруктураПоМенеджеруЗаписи
@end ifinfo
 Создает структуру, содержащую имена и значения измерений, ресурсов и реквизитов
 переданного менеджера записи регистра сведений.
@*@b{Синтаксис}@*
@deffn Функция СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра) Экспорт
@*@b{Параметры}@*
@example
  МенеджерЗаписи     - РегистрСведенийМенеджерЗаписи - менеджер записи, из которого надо получить структуру.
  МетаданныеРегистра - ОбъектМетаданных - метаданные регистра сведений.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - коллекция измерений, ресурсов и реквизитов переданного менеджеру записи.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СтруктураСвойствДинамическогоСписка
@section СтруктураСвойствДинамическогоСписка
@ifinfo
@heading СтруктураСвойствДинамическогоСписка
@end ifinfo
 Создать структуру свойств динамического списка для вызова УстановитьСвойстваДинамическогоСписка().
@*@b{Синтаксис}@*
@deffn Функция СтруктураСвойствДинамическогоСписка() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Структура - любое поле может иметь значение неопределено, если оно не устанавливается:
     * ТекстЗапроса - Строка - новый текст запроса.
     * ОсновнаяТаблица - Строка - имя основной таблицы.
     * ДинамическоеСчитываниеДанных - Булево - признак использования динамического считывания.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СформироватьСтрокуДляПоискаВЗапросе
@section СформироватьСтрокуДляПоискаВЗапросе
@ifinfo
@heading СформироватьСтрокуДляПоискаВЗапросе
@end ifinfo
 Подготавливает строку для использования в качестве шаблона поиска в запросе.
 Экранирует служебные символы, если они есть в строке.
@*@b{Синтаксис}@*
@deffn Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
@*@b{Параметры}@*
@example
  СтрокаПоиска - Строка - произвольная строка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка подготовленная для поиска данных в запросе.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node СформироватьСтрокуСимволов
@section СформироватьСтрокуСимволов
@ifinfo
@heading СформироватьСтрокуСимволов
@end ifinfo
 Формирует строку повторяющихся символов заданной длины.
@*@b{Синтаксис}@*
@deffn Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
@*@b{Параметры}@*
@example
  Символ      - Строка - символ, из которого будет формироваться строка.
  ДлинаСтроки - Число  - требуемая длина результирующей строки.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - строка, состоящая из повторяющихся символов.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(Символ, ДлинаСтроки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ТаблицаЗначенийВМассив
@section ТаблицаЗначенийВМассив
@ifinfo
@heading ТаблицаЗначенийВМассив
@end ifinfo
 Преобразует таблицу значений в массив структур.
 Может использоваться для передачи на клиент данных в том случае, если таблица
 значений содержит только такие значения, которые могут
 быть переданы с сервера на клиент.
 Полученный массив содержит структуры, каждая из которых повторяет
 структуру колонок таблицы значений.
 Не рекомендуется использовать для преобразования таблиц значений
 с большим количеством строк.
@*@b{Синтаксис}@*
@deffn Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
@*@b{Параметры}@*
@example
  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
@end example
@*@b{Возвращаемое значение}@*
@example
  Массив - коллекция строк таблицы в виде структур.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначений)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ТекстОшибкиЗаполнения
@section ТекстОшибкиЗаполнения
@ifinfo
@heading ТекстОшибкиЗаполнения
@end ifinfo
 Формирует текст ошибок заполнения полей и списков.
@*@b{Синтаксис}@*
@deffn Функция ТекстОшибкиЗаполнения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	ИмяПоля = "", НомерСтроки = "", ИмяСписка = "", ТекстСообщения = "") Экспорт
@*@b{Параметры}@*
@example
  ВидПоля       - Строка - может принимать значения:
                  Поле, Колонка, Список;
  ВидСообщения  - Строка - может принимать значения:
                  Заполнение, Корректность;
  ИмяПоля        - Строка - имя поля;
  НомерСтроки    - Строка, Число - номер строки;
  ИмяСписка      - Строка - имя списка;
  ТекстСообщения - Строка - детальная расшифровка ошибки заполнения.
@end example
@*@b{Возвращаемое значение}@*
@example
   Строка - текст ошибки заполнения.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ТекущаяДатаПользователя
@section ТекущаяДатаПользователя
@ifinfo
@heading ТекущаяДатаПользователя
@end ifinfo
 Возвращает значение настройки рабочей даты для пользователя или текущей даты сеанса,
 если рабочая дата пользователя не задана.
@*@b{Синтаксис}@*
@deffn Функция ТекущаяДатаПользователя(ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
 ИмяПользователя - Строка - Имя пользователя, для которого запрашивается рабочая дата.
  Если не задано, то устанавливается для текущего пользователя.
@end example
@*@b{Возвращаемое значение}@*
@example
 Дата - Значение настройки рабочей даты пользователя или текущая дата сеанса, если настройка не задана.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ТекущаяДатаПользователя(ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ТипПлатформыКлиента
@section ТипПлатформыКлиента
@ifinfo
@heading ТипПлатформыКлиента
@end ifinfo
 Возвращает тип платформы клиента.
@*@b{Синтаксис}@*
@deffn Функция ТипПлатформыКлиента() Экспорт
@*@b{Возвращаемое значение}@*
@example
  ТипПлатформы, Неопределено - тип платформы на которой запущен клиент. В режиме веб-клиента, если тип 
                               платформы иной, чем описан в типе ТипПлатформы, то возвращается Неопределено.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ТипПлатформыКлиента()
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ТолькоКириллицаВСтроке
@section ТолькоКириллицаВСтроке
@ifinfo
@heading ТолькоКириллицаВСтроке
@end ifinfo
 Проверяет, содержит ли строка только символы кириллического алфавита.
@*@b{Синтаксис}@*
@deffn Функция ТолькоКириллицаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "") Экспорт
@*@b{Параметры}@*
@example
  СтрокаПроверки - Строка - проверяемая строка.
  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
  ДопустимыеСимволы - Строка - дополнительные разрешенные символы, кроме кириллицы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если строка содержит только кириллические (или допустимые) символы или пустая;
           Ложь, если строка содержит иные символы.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СтрокаПроверки, УчитыватьРазделителиСлов, ДопустимыеСимволы)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ТолькоЛатиницаВСтроке
@section ТолькоЛатиницаВСтроке
@ifinfo
@heading ТолькоЛатиницаВСтроке
@end ifinfo
 Проверяет, содержит ли строка только символы латинского алфавита.
@*@b{Синтаксис}@*
@deffn Функция ТолькоЛатиницаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "") Экспорт
@*@b{Параметры}@*
@example
  СтрокаПроверки - Строка - проверяемая строка.
  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
  ДопустимыеСимволы - Строка - дополнительные разрешенные символы, кроме латиницы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если строка содержит только латинские (или допустимые) символы;
         - Ложь, если строка содержит иные символы.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаПроверки, УчитыватьРазделителиСлов, ДопустимыеСимволы)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ТолькоЦифрыВСтроке
@section ТолькоЦифрыВСтроке
@ifinfo
@heading ТолькоЦифрыВСтроке
@end ifinfo
 Проверяет, содержит ли строка только цифры.
@*@b{Синтаксис}@*
@deffn Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
@*@b{Параметры}@*
@example
  Значение         - Строка - проверяемая строка.
  Устаревший       - Булево - устаревший параметр, не используется.
  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
@end example
@*@b{Пример вызова}@*
  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ
@section ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ
@ifinfo
@heading ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ
@end ifinfo
 Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
 В главном узле всегда Ложь.
@*@b{Синтаксис}@*
@deffn Функция ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если требуется.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьВременныйКаталог
@section УдалитьВременныйКаталог
@ifinfo
@heading УдалитьВременныйКаталог
@end ifinfo
 Удаляет временный каталог вместе с его содержимым, если возможно.
 Если временный каталог не может быть удален (например, он занят каким-то процессом),
 то в журнал регистрации записывается соответствующее предупреждение, а процедура завершается.
 Для совместного использования с ОбщегоНазначения.СоздатьВременныйКаталог, 
 после окончания работы с временным каталогом.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьВременныйКаталог(Знач ПутьККаталогу) Экспорт
@*@b{Параметры}@*
@example
   ПутьККаталогу - Строка - Полный путь к временному каталогу.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.УдалитьВременныйКаталог(ПутьККаталогу)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьВсеВхожденияЗначенияИзМассива
@section УдалитьВсеВхожденияЗначенияИзМассива
@ifinfo
@heading УдалитьВсеВхожденияЗначенияИзМассива
@end ifinfo
 Удаляет все вхождения переданного значения из массива.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьВсеВхожденияЗначенияИзМассива(Массив, Значение) Экспорт
@*@b{Параметры}@*
@example
  Массив - Массив - массив, из которого необходимо удалить значение;
  Значение - Произвольный - удаляемое значение из массива.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Массив, Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьВсеВхожденияТипаИзМассива
@section УдалитьВсеВхожденияТипаИзМассива
@ifinfo
@heading УдалитьВсеВхожденияТипаИзМассива
@end ifinfo
 Удаляет все вхождения значений указанного типа.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьВсеВхожденияТипаИзМассива(Массив, Тип) Экспорт
@*@b{Параметры}@*
@example
  Массив - Массив - массив, из которого необходимо удалить значения;
  Тип - Тип - тип значений, которые подлежат удалению из массива.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Массив, Тип)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьДанныеИзБезопасногоХранилища
@section УдалитьДанныеИзБезопасногоХранилища
@ifinfo
@heading УдалитьДанныеИзБезопасногоХранилища
@end ifinfo
 Удаляет конфиденциальные данные в безопасное хранилище.
 Вызывающий код должен самостоятельно устанавливать привилегированный режим.
 Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
 а доступно только коду, который делает обращения только к своей части данных и
 в том контексте, который предполагает чтение или запись конфиденциальных данных.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьДанныеИзБезопасногоХранилища(Владелец, Ключи = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
               представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
  Ключи    - Строка - Содержит список имен удаляемых данных, указанных через запятую. 
               Неопределенно - удаляет все данные.
@end example
@*@b{Пример вызова}@*
 Процедура ПередУдалением(Отказ)
  // Проверка значения свойства ОбменДанными.Загрузка отсутствует, так как удалять данные
  // из безопасного хранилища нужно даже при удалении объекта при обмене данными.
  УстановитьПривилегированныйРежим(Истина);
  ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Ссылка);
  УстановитьПривилегированныйРежим(Ложь);
 КонецПроцедуры
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьЗадание
@section УдалитьЗадание
@ifinfo
@heading УдалитьЗадание
@end ifinfo
 Удаляет РегламентноеЗадание из информационной базы.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьЗадание(Знач Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  не предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание, которое нужно получить
                  уникальный идентификатор для получения свежей копии регламентного задания.
@end example
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.УдалитьЗадание(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьЗаписиКэшаВерсий
@section УдалитьЗаписиКэшаВерсий
@ifinfo
@heading УдалитьЗаписиКэшаВерсий
@end ifinfo
 Удаляет записи кэша версий программных интерфейсов, содержащих в идентификаторе указанную подстроку. 
 В качестве подстроки может использоваться, например, имя интерфейса, более не используемого в конфигурации.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьЗаписиКэшаВерсий(Знач ПодстрокаПоискаИдентификаторов) Экспорт
@*@b{Параметры}@*
@example
  ПодстрокаПоискаИдентификаторов - Строка - подстрока поиска идентификаторов. 
                                            Не может содержать символов %, _ и [.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.УдалитьЗаписиКэшаВерсий(ПодстрокаПоискаИдентификаторов)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьЗначениеИзМассива
@section УдалитьЗначениеИзМассива
@ifinfo
@heading УдалитьЗначениеИзМассива
@end ifinfo
 Удаляет одно значение из массива.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьЗначениеИзМассива(Массив, Значение) Экспорт
@*@b{Параметры}@*
@example
  Массив - Массив - массив, из которого необходимо удалить значение;
  Значение - Массив - удаляемое значение из массива.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Массив, Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьНедопустимыеСимволыXML
@section УдалитьНедопустимыеСимволыXML
@ifinfo
@heading УдалитьНедопустимыеСимволыXML
@end ifinfo
 Удаляет недопустимые символы в XML-строке.
@*@b{Синтаксис}@*
@deffn Функция УдалитьНедопустимыеСимволыXML(Знач Текст) Экспорт
@*@b{Параметры}@*
@example
  Текст - Строка - строка, в которой требуется удалить недопустимые символы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - Строка, полученная при удалении недопустимых символов в XML-строке.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Текст)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьНепроверяемыеРеквизитыИзМассива
@section УдалитьНепроверяемыеРеквизитыИзМассива
@ifinfo
@heading УдалитьНепроверяемыеРеквизитыИзМассива
@end ifinfo
 Процедура удаляет из массива МассивРеквизитов элементы, соответствующие именам 
 реквизитов объекта из массива МассивНепроверяемыхРеквизитов.
 Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
@*@b{Параметры}@*
@example
  МассивРеквизитов              - Массив - коллекция имен реквизитов объекта.
  МассивНепроверяемыхРеквизитов - Массив - коллекция имен реквизитов объекта, не требующих проверки.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn
@node УдалитьПовторяющиесяСимволы
@section УдалитьПовторяющиесяСимволы
@ifinfo
@heading УдалитьПовторяющиесяСимволы
@end ifinfo
 Удаляет крайние повторяющиеся символы слева или справа в строке.
@*@b{Синтаксис}@*
@deffn Функция УдалитьПовторяющиесяСимволы(Знач Значение, Знач УдаляемыйСимвол, Знач Режим = "Слева") Экспорт
@*@b{Параметры}@*
@example
  Значение        - Строка - исходная строка, из которой необходимо удалить крайние повторяющиеся символы;
  УдаляемыйСимвол - Строка - искомый символ для удаления;
  Режим           - Строка - "Слева" или "Справа" - режим удаления символов в исходной строке.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - обрезанная строка.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Значение, УдаляемыйСимвол, Режим)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьПоследнийСимволВСтроке
@section УдалитьПоследнийСимволВСтроке
@ifinfo
@heading УдалитьПоследнийСимволВСтроке
@end ifinfo
 Удаляет из строки указанное количество символов справа.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов = 1) Экспорт
@*@b{Параметры}@*
@example
  Текст         - Строка - строка, в которой необходимо удалить последние символы;
  ЧислоСимволов - Число  - количество удаляемых символов.
@end example
@*@b{Пример вызова}@*
СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьПрофильБезопасности
@section УдалитьПрофильБезопасности
@ifinfo
@heading УдалитьПрофильБезопасности
@end ifinfo
 Удаляет профиль безопасности.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ИмяПрофиля - Строка - имя профиля безопасности.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УдалитьПрофильБезопасности(ПараметрыАдминистрированияКластера, ИмяПрофиля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьСеансыИнформационнойБазы
@section УдалитьСеансыИнформационнойБазы
@ifinfo
@heading УдалитьСеансыИнформационнойБазы
@end ifinfo
 Удаляет сеансы с информационной базой по фильтру.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьСеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач Фильтр = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  Фильтр - Массив - массив структур, описывающих условия фильтрации соединений. Поля структур, входящих в массив:
             * Свойство - Строка - имя свойства, по которому осуществляется фильтрация (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса),
             * ВидСравнения - ВидСравнения - значение системного перечисления ВидСравнения,
             * Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
               сравнивается значение соответствующего свойства сеанса,
         - Структура - структура: ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
           выполняется сеанс. При использовании данного варианта описания фильтра сравнение всегда выполняется на равенство.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УдалитьСеансыИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьЭлементыГруппыОтбора
@section УдалитьЭлементыГруппыОтбора
@ifinfo
@heading УдалитьЭлементыГруппыОтбора
@end ifinfo
 Удалить элементы отбора с заданным именем поля или представлением.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьЭлементыГруппыОтбора(Знач ОбластьУдаления, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбластьУдаления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
                                                               например, Список.Отбор или группа в отборе..
  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
  Представление   - Строка - представление поля компоновки.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОбластьУдаления, ИмяПоля, Представление)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УдалитьЭлементыГруппыОтбораДинамическогоСписка
@section УдалитьЭлементыГруппыОтбораДинамическогоСписка
@ifinfo
@heading УдалитьЭлементыГруппыОтбораДинамическогоСписка
@end ifinfo
 Удалить элемент группы отбора динамического списка.
@*@b{Синтаксис}@*
@deffn Процедура УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля = Неопределено, Представление = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ДинамическийСписок - ДинамическийСписок - реквизит формы, для которого требуется установить отбор.
  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
  Представление   - Строка - представление поля компоновки.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, Представление)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УникальныйИдентификатор
@section УникальныйИдентификатор
@ifinfo
@heading УникальныйИдентификатор
@end ifinfo
 Возвращает уникальный идентификатор регламентного задания.
  Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
@*@b{Синтаксис}@*
@deffn Функция УникальныйИдентификатор(Знач Идентификатор) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание.
@end example
@*@b{Возвращаемое значение}@*
@example
  УникальныйИдентификатор - УИ объекта регламентного задания.
@end example
@*@b{Пример вызова}@*
Результат = РегламентныеЗаданияСервер.УникальныйИдентификатор(Идентификатор)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы
@section УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы
@ifinfo
@heading УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы
@end ifinfo
 Устанавливает новое состояние блокировки регламентных заданий для информационной базы.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач БлокировкаРегламентныхЗаданий) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера,
  БлокировкаРегламентныхЗаданий - Булево - флаг установки блокировки регламентных заданий информационной базы.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, БлокировкаРегламентныхЗаданий)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы
@section УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы
@ifinfo
@heading УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы
@end ifinfo
 Устанавливает новое состояние блокировки сеансов и регламентных заданий для информационной базы.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач СвойстваБлокировкиСеансовИЗаданий) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
  СвойстваБлокировкиСеансовИЗаданий - Структура - см. АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, СвойстваБлокировкиСеансовИЗаданий)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьВнешнееСоединение
@section УстановитьВнешнееСоединение
@ifinfo
@heading УстановитьВнешнееСоединение
@end ifinfo
 Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
 на это соединение.
@*@b{Синтаксис}@*
@deffn Функция УстановитьВнешнееСоединение(Параметры, СтрокаСообщенияОбОшибке = "", ОшибкаПодключенияКомпоненты = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Параметры - Структура - параметры для установки внешнего соединения с информационной базой.
                          Свойства см. в функции
                          ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения):
    * ВариантРаботыИнформационнойБазы             - Число - Вариант работы информационной базы: 0 - файловый; 1 -
                                                            клиент-серверный;
    * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
    * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
    * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
    * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
                                                             внешнего подключения к информационной базе;
    * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
    * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
  СтрокаСообщенияОбОшибке - Строка - если в процессе установки внешнего соединения возникает ошибка,
                                     то подробное описание ошибки помещается в этот параметр.
  ОшибкаПодключенияКомпоненты - Булево - (возвращаемый параметр) устанавливается Истина, если была ошибка при подключении.
@end example
@*@b{Возвращаемое значение}@*
@example
  COMОбъект, Неопределенно - в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
    в случае ошибки возвращается Неопределенно.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.УстановитьВнешнееСоединение(Параметры, СтрокаСообщенияОбОшибке, ОшибкаПодключенияКомпоненты)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьВнешнееСоединениеСБазой
@section УстановитьВнешнееСоединениеСБазой
@ifinfo
@heading УстановитьВнешнееСоединениеСБазой
@end ifinfo
 Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
 на это соединение.
@*@b{Синтаксис}@*
@deffn Функция УстановитьВнешнееСоединениеСБазой(Параметры) Экспорт
@*@b{Параметры}@*
@example
  Параметры - Структура - параметры для установки внешнего соединения с информационной базой.
                          Свойства см. в функции
                          ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения):
   * ВариантРаботыИнформационнойБазы             - Число  - Вариант работы информационной базы: 0 - файловый; 1 -
                                                            клиент-серверный;
   * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
   * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
   * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
   * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
                                                            внешнего подключения к информационной базе;
   * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
   * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - информация о соединении:
    * Соединение                  - COMОбъект, Неопределено - указатель на COM-объект соединения или Неопределено в
                                    случае ошибки;
    * КраткоеОписаниеОшибки       - Строка - краткое описание ошибки;
    * ПодробноеОписаниеОшибки     - Строка - подробное описание ошибки;
    * ОшибкаПодключенияКомпоненты - Булево - флаг ошибки подключения COM.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.УстановитьВнешнееСоединениеСБазой(Параметры)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьИспользованиеРегламентногоЗадания
@section УстановитьИспользованиеРегламентногоЗадания
@ifinfo
@heading УстановитьИспользованиеРегламентногоЗадания
@end ifinfo
 Устанавливает использование регламентного задания.
 Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
 Не предназначена для использования в модели сервиса.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьИспользованиеРегламентногоЗадания(Знач Идентификатор, Знач Использование) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных        - объект метаданных регламентного задания для поиска
                                            предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка                  - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание     - регламентное задание.
  Использование - Булево                  - значение использования которое нужно установить.
@end example
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(Идентификатор, Использование)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьКомпонентуИзМакета
@section УстановитьКомпонентуИзМакета
@ifinfo
@heading УстановитьКомпонентуИзМакета
@end ifinfo
 Устанавливает компоненту, выполненную по технологии Native API и COM асинхронном режиме.
 Компонента должна храниться в макете конфигурации в виде ZIP-архива.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьКомпонентуИзМакета(Оповещение, ПолноеИмяМакета, ПараметрыУстановки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  Оповещение - ОписаниеОповещения - Описание оповещения об установке внешней компоненты:
      * Результат - Структура - результат установки компоненты:
          ** Установлено    - Булево - признак установки.
          ** ОписаниеОшибки - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
  ПолноеИмяМакета    - Строка                  - полное имя макета, используемое как местоположение компоненты.
  ПараметрыУстановки - Структура, Неопределено - см. функцию ПараметрыУстановкиКомпоненты.
@end example
@*@b{Пример вызова}@*
  Оповещение = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение", ЭтотОбъект);
  ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
  ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Для оформления заявления на выпуск сертификата требуется
                                           |внешняя компонента «Криптография (CryptS)».'");
  ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Оповещение,
      "Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
      ПараметрыУстановки);
  &НаКлиенте
  Процедура УстановитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
      Если Не Результат.Установлено И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда 
          ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
      КонецЕсли;
  КонецПроцедуры
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node УстановитьОтображениеЗаголовковГрупп
@section УстановитьОтображениеЗаголовковГрупп
@ifinfo
@heading УстановитьОтображениеЗаголовковГрупп
@end ifinfo
 Устанавливает жирное оформление шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
 В интерфейсе Такси заголовки групп с обычным выделением и без выделения выводится большим шрифтом.
 В интерфейсе 8.2 такие заголовки выводятся как обычные надписи и не ассоциируются с заголовками.
 Эта функция предназначена для визуального выделения (жирным шрифтом) заголовков групп в режиме интерфейса 8.2.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
@*@b{Параметры}@*
@example
  Форма - УправляемаяФорма - форма для изменения шрифта заголовков групп;
  ИменаГрупп - Строка - список имен групп формы, разделенных запятыми. Если имена групп не указаны,
                        то оформление будет применено ко всем группам на форме.
@end example
@*@b{Пример вызова}@*
  Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьПараметрДинамическогоСписка
@section УстановитьПараметрДинамическогоСписка
@ifinfo
@heading УстановитьПараметрДинамическогоСписка
@end ifinfo
 Установить или обновить значение параметра ИмяПараметра динамического списка Список.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
@*@b{Параметры}@*
@example
  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
  ИмяПараметра    - Строка             - имя параметра динамического списка.
  Значение        - Произвольный        - новое значение параметра.
  Использование   - Булево             - признак использования параметра.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьПараметрыАдминистрирования
@section УстановитьПараметрыАдминистрирования
@ifinfo
@heading УстановитьПараметрыАдминистрирования
@end ifinfo
 Сохраняет параметры администрирования информационной базы и кластера серверов.
 При сохранении поля, содержащие пароли, будут очищены в целях безопасности.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьПараметрыАдминистрирования(ПараметрыАдминистрированияИБ) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияИБ - Структура - см. функция ПараметрыАдминистрирования.
@end example
@*@b{Пример вызова}@*
  ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
  // Вывод параметров администрирования администратору для подтверждения корректности и ввода паролей.
  // Далее выполнение действий, связанных с подключением к кластеру серверов.
  СтандартныеПодсистемыСервер.ПараметрыАдминистрирования(ПараметрыАдминистрирования);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@section УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@ifinfo
@heading УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы
@end ifinfo
 Назначает для информационной базы использование профиля безопасности безопасного режима.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач ИмяПрофиля = "") Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  ИмяПрофиля - Строка - имя профиля безопасности. Если передана пустая строка - для информационной базы будет
    отключено использование профиля безопасности безопасного режима.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, ИмяПрофиля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьПрофильБезопасностиИнформационнойБазы
@section УстановитьПрофильБезопасностиИнформационнойБазы
@ifinfo
@heading УстановитьПрофильБезопасностиИнформационнойБазы
@end ifinfo
 Назначает для информационной базы использование профиля безопасности.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено, Знач ИмяПрофиля = "") Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  ПараметрыАдминистрированияИБ - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
    Параметр может быть опущен в том случае, если аналогичные поля были указаны в структуре, переданной
    в качестве значения параметра ПараметрыАдминистрированияКластера.
  ИмяПрофиля - Строка - имя профиля безопасности. Если передана пустая строка - для информационной базы будет
    отключено использование профиля безопасности.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УстановитьПрофильБезопасностиИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, ИмяПрофиля)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьРабочуюДатуПользователя
@section УстановитьРабочуюДатуПользователя
@ifinfo
@heading УстановитьРабочуюДатуПользователя
@end ifinfo
 Сохраняет настройку рабочей даты пользователя.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьРабочуюДатуПользователя(НоваяРабочаяДата, ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
 НоваяРабочаяДата - Дата - Дата, которую необходимо установить в качестве рабочей даты пользователя.
 ИмяПользователя - Строка - Имя пользователя, для которого устанавливается рабочая дата.
  Если не задано, то устанавливается для текущего пользователя.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.УстановитьРабочуюДатуПользователя(НоваяРабочаяДата, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьРасписаниеРегламентногоЗадания
@section УстановитьРасписаниеРегламентногоЗадания
@ifinfo
@heading УстановитьРасписаниеРегламентногоЗадания
@end ifinfo
 Устанавливает расписание регламентного задания.
 Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
 Не предназначена для использования в модели сервиса.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Идентификатор, Знач Расписание) Экспорт
@*@b{Параметры}@*
@example
  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
                  предопределенного регламентного задания.
                - УникальныйИдентификатор - идентификатор регламентного задания.
                - Строка - строка уникального идентификатора регламентного задания.
                - РегламентноеЗадание - регламентное задание.
  Расписание    - РасписаниеРегламентногоЗадания - расписание.
                - Структура - значение возвращаемое функцией РасписаниеВСтруктуру
                  общего модуля ОбщегоНазначенияКлиентСервер.
@end example
@*@b{Пример вызова}@*
РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(Идентификатор, Расписание)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьРасширенныйЗаголовокПриложения
@section УстановитьРасширенныйЗаголовокПриложения
@ifinfo
@heading УстановитьРасширенныйЗаголовокПриложения
@end ifinfo
 Устанавливает заголовок главного окна приложения, используя значение константы
 ЗаголовокПриложения и заголовок приложения по умолчанию.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
@*@b{Параметры}@*
@example
   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
@end example
@*@b{Пример вызова}@*
СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node УстановитьРеквизитФормыПоПути
@section УстановитьРеквизитФормыПоПути
@ifinfo
@heading УстановитьРеквизитФормыПоПути
@end ifinfo
 Устанавливает значение реквизиту формы.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
@*@b{Параметры}@*
@example
  Форма - УправляемаяФорма - форма-владелец реквизита.
  ПутьРеквизита - Строка - путь к данным, например: "Объект.МесяцНачисления".
  Значение - Произвольный - устанавливаемое значение.
  ТолькоЕслиНеЗаполнен - Булево - позволяет не устанавливать значение реквизита,
                                  если у него уже установлено какое-то значение.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьСвойстваДинамическогоСписка
@section УстановитьСвойстваДинамическогоСписка
@ifinfo
@heading УстановитьСвойстваДинамическогоСписка
@end ifinfo
 Установить текст запроса, основную таблицу или динамическое считывание в динамическом списке.
 Устанавливать эти свойства следует за один вызов этой процедуры, чтобы не снижалась производительность.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьСвойстваДинамическогоСписка(Список, СтруктураПараметров) Экспорт
@*@b{Параметры}@*
@example
  Список - ТаблицаФормы - элемент формы динамического списка, для которого устанавливаются свойства.
  СтруктураПараметров - Структура - см. СтруктураСвойствДинамическогоСписка().
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СтруктураПараметров)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьСвойстваПрофиляБезопасности
@section УстановитьСвойстваПрофиляБезопасности
@ifinfo
@heading УстановитьСвойстваПрофиляБезопасности
@end ifinfo
 Устанавливает свойства для существующего профиля безопасности по переданному описанию.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьСвойстваПрофиляБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности)  Экспорт
@*@b{Параметры}@*
@example
  ПараметрыАдминистрированияКластера - Структура - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера,
  СвойстваПрофиляБезопасности - Структура - см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности.
@end example
@*@b{Пример вызова}@*
АдминистрированиеКластераКлиентСервер.УстановитьСвойстваПрофиляБезопасности(ПараметрыАдминистрированияКластера, СвойстваПрофиляБезопасности)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьСвойствоЭлементаФормы
@section УстановитьСвойствоЭлементаФормы
@ifinfo
@heading УстановитьСвойствоЭлементаФормы
@end ifinfo
 Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
 Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
 на объект, реквизит объекта или команду.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
@*@b{Параметры}@*
@example
  ЭлементыФормы - ВсеЭлементФормы, ЭлементыФормы - коллекция элементов управляемой формы.
  ИмяЭлемента   - Строка       - имя элемента формы.
  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы.
  Значение      - Произвольный - новое значение элемента.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьСостояниеПоляТабличногоДокумента
@section УстановитьСостояниеПоляТабличногоДокумента
@ifinfo
@heading УстановитьСостояниеПоляТабличногоДокумента
@end ifinfo
 Процедура управляет состояние поля табличного документа.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
@*@b{Параметры}@*
@example
  ПолеТабличногоДокумента - ПолеФормы - поле формы с видом ПолеТабличногоДокумента,
                            для которого необходимо установить состояние.
  Состояние               - Строка - задает вид состояния.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьУсловноеОформлениеПоляДата
@section УстановитьУсловноеОформлениеПоляДата
@ifinfo
@heading УстановитьУсловноеОформлениеПоляДата
@end ifinfo
 Устанавливает представление поля Дата в списках, содержащих реквизит с составом даты Дата и время.
 Подробнее см. стандарт "Поле "Дата" в списках".
@*@b{Синтаксис}@*
@deffn Процедура УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, 
	ПолноеИмяРеквизита = "Список.Дата", ИмяЭлемента = "Дата") Экспорт
@*@b{Параметры}@*
@example
   ЭтотОбъект - УправляемаяФорма - Форма со списком.
   ПолноеИмяРеквизита - Строка - Полный путь к реквизиту типа "Дата" в формате "<ИмяСписка>.<ИмяПоля>".
   ИмяЭлемента - Строка - Имя элемента формы, связанного с реквизитом списка типа "Дата".
@end example
@*@b{Пример вызова}@*
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
  СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект);
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьЭлементОтбора
@section УстановитьЭлементОтбора
@ifinfo
@heading УстановитьЭлементОтбора
@end ifinfo
 Добавить или заменить существующий элемент отбора.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
                                     например, Список.Отбор или группа в отборе.
  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
  ПравоеЗначение          - произвольный - сравниваемое значение.
  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
  Представление           - Строка - представление элемента компоновки данных.
  Использование           - Булево - использование элемента.
  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
                                                    в синтакс-помощнике.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбластьПоискаДобавления, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановитьЭлементОтбораДинамическогоСписка
@section УстановитьЭлементОтбораДинамическогоСписка
@ifinfo
@heading УстановитьЭлементОтбораДинамическогоСписка
@end ifinfo
 Добавить или заменить существующий элемент отбора динамического списка.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
   ПравоеЗначение     - Произвольный - Значение отбора.
       Необязательный. Значение по умолчанию: Неопределено.
       Внимание! Если передать Неопределено, то значение не будет изменено.
   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
   Представление - Строка - Представление элемента компоновки данных.
       Необязательный. Значение по умолчанию: Неопределено.
       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
   Использование - Булево - Флажок использования этого отбора.
       Необязательный. Значение по умолчанию: Неопределено.
   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
                                                                          пользователю.
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
       Используется для связи с пользовательскими настройками.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

УстановитьЭлементОтбораДинамическогоСписка
 Добавить или заменить существующий элемент отбора динамического списка.
@*@b{Синтаксис}@*
@deffn Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
   ПравоеЗначение     - Произвольный - Значение отбора.
       Необязательный. Значение по умолчанию: Неопределено.
       Внимание! Если передать Неопределено, то значение не будет изменено.
   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
   Представление - Строка - Представление элемента компоновки данных.
       Необязательный. Значение по умолчанию: Неопределено.
       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
   Использование - Булево - Флажок использования этого отбора.
       Необязательный. Значение по умолчанию: Неопределено.
   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
                                                                          пользователю.
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
       Используется для связи с пользовательскими настройками.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node УстановкаПараметровСеанса
@section УстановкаПараметровСеанса
@ifinfo
@heading УстановкаПараметровСеанса
@end ifinfo

 Вызов этой процедуры необходимо разместить в модуле сеанса в процедуре УстановкаПараметровСеанса
 согласно документации.

@*@b{Синтаксис}@*

@deffn Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт

@*@b{Параметры}@*
@example
@end example

  ИменаПараметровСеанса - Массив, Неопределено - имена параметров сеанса для инициализации.
                                                 Массив устанавливаемых идентификаторов параметров сеанса,
                                                 которые нужно инициализировать, если обработчик вызывается
                                                 перед использованием неинициализированных параметров сеанса.
                                                 Неопределено, если обработчик события вызывается системой при начале сеанса.

@*@b{Возвращаемое значение}@*
@example
@end example

  Массив - имена параметров сеанса, значения которых были успешно установлены.

@*@b{Пример вызова}@*

Результат = СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ИменаПараметровСеанса)

@*@b{Доступность}@*

@end deffn
 Сервер, Толстый клиент, Внешнее соединение

@node ФамилияИнициалы
@section ФамилияИнициалы
@ifinfo
@heading ФамилияИнициалы
@end ifinfo
 Формирует краткое представление из полного имени физического лица.
@*@b{Синтаксис}@*
@deffn Функция ФамилияИнициалы(Знач ФамилияИмяОтчество) Экспорт
@*@b{Параметры}@*
@example
  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество";
                     - Структура - части полного имени:
                        * Фамилия  - Строка - фамилия;
                        * Имя      - Строка - имя;
                        * Отчество - Строка - отчество.
@end example
@*@b{Возвращаемое значение}@*
@example
  Строка - фамилия и инициалы. Например, "Пупкин В. И.".
@end example
@*@b{Пример вызова}@*
  Результат = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица("Пупкин Василий Иванович"); 
  - возвращает "Пупкин В. И.".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ФиксированныеДанные
@section ФиксированныеДанные
@ifinfo
@heading ФиксированныеДанные
@end ifinfo
 Фиксирует данные типов Структура, Соответствие, Массив с учетом вложенности.
@*@b{Синтаксис}@*
@deffn Функция ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
@*@b{Параметры}@*
@example
  Данные - Структура, Соответствие, Массив - коллекции, значения которых являются примитивными типами,
           хранилищем значения или не могут быть изменены. Поддерживаются типы значений:
           Булево, Строка, Число, Дата, Неопределено, УникальныйИдентификатор, Null, Тип,
           ХранилищеЗначения, ОбщийМодуль, ОбъектМетаданных, ТипЗначенияXDTO, ТипОбъектаXDTO,
           ЛюбаяСсылка.
  ВызыватьИсключение - Булево - начальное значение Истина. Когда установлено Ложь, тогда в случае наличия
                                нефиксируемых данных исключение не будет вызвано, при этом данные будут
                                зафиксированы на сколько возможно.
@end example
@*@b{Возвращаемое значение}@*
@example
  ФиксированнаяСтруктура, ФиксированноеСоответствие, ФиксированныйМассив - фиксированные данные, аналогичные
  переданным в параметре Данные.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ФиксированныеДанные(Данные, ВызыватьИсключение)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ФИОНаписаноВерно
@section ФИОНаписаноВерно
@ifinfo
@heading ФИОНаписаноВерно
@end ifinfo
 Проверяет, верно ли написано ФИО физического лица. 
 ФИО считается верным, если содержит только кириллицу, либо только латиницу.
@*@b{Синтаксис}@*
@deffn Функция ФИОНаписаноВерно(Знач ФИО, ТолькоКириллица = Ложь) Экспорт
@*@b{Параметры}@*
@example
  ФИО - Строка - фамилия, имя и отчество. Например, "Пупкин Василий Иванович".
  ТолькоКириллица - Булево - при проверке допустимой будет только кириллица в ФИО.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если ФИО написано верно.
@end example
@*@b{Пример вызова}@*
Результат = ФизическиеЛицаКлиентСервер.ФИОНаписаноВерно(ФИО, ТолькоКириллица)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ФорматированнаяСтрока
@section ФорматированнаяСтрока
@ifinfo
@heading ФорматированнаяСтрока
@end ifinfo
 Форматирует строку в соответствии с заданным шаблоном.
 Возможные значения тегов в шаблоне:
 - <b> Строка </b> - выделяет строку жирным шрифтом.
 - <a href = "Ссылка"> Строка </a> - добавляет гиперссылку.
 Например, "Минимальная версия программы <b>1.1</b>. <a href = "Обновление">Обновите</a> программу.".
@*@b{Синтаксис}@*
@deffn Функция ФорматированнаяСтрока(Знач СтрокаСТегами) Экспорт
@*@b{Параметры}@*
@example
  СтрокаСТегами - Строка - строка, содержащая теги форматирования.
@end example
@*@b{Возвращаемое значение}@*
@example
  ФорматированнаяСтрока - преобразованная строка.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрокаСТегами)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеНастроекДанныхФормЗагрузить
@section ХранилищеНастроекДанныхФормЗагрузить
@ifinfo
@heading ХранилищеНастроекДанныхФормЗагрузить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Загружает настройку из хранилища настроек данных форм, как метод платформы Загрузить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Кроме того, возвращает указанное значение по умолчанию, если настройки не найдены.
 Если нет права СохранениеДанныхПользователя, возвращается значение по умолчанию без ошибки.
 В возвращаемом значении очищаются ссылки на несуществующий объект в базе данных, а именно
 - возвращаемая ссылка заменяется на указанное значение по умолчанию;
 - из данных типа Массив ссылки удаляются;
 - у данных типа Структура и Соответствие ключ не меняется, а значение устанавливается Неопределено;
 - анализ значений в данных типа Массив, Структура, Соответствие выполняется рекурсивно.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта          - Строка           - см. синтакс-помощник платформы.
   КлючНастроек         - Строка           - см. синтакс-помощник платформы.
   ЗначениеПоУмолчанию  - Произвольный     - значение, которое возвращается, если настройки не найдены.
                                             Если не указано, возвращается значение Неопределено.
   ОписаниеНастроек     - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя      - Строка           - см. синтакс-помощник платформы.
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеНастроекДанныхФормСохранить
@section ХранилищеНастроекДанныхФормСохранить
@ifinfo
@heading ХранилищеНастроекДанныхФормСохранить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Сохраняет настройку в хранилище настроек данных форм, как метод платформы Сохранить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено, 
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта       - Строка           - см. синтакс-помощник платформы.
   КлючНастроек      - Строка           - см. синтакс-помощник платформы.
   Настройки         - Произвольный     - см. синтакс-помощник платформы.
   ОписаниеНастроек  - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя   - Строка           - см. синтакс-помощник платформы.
   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеНастроекДанныхФормУдалить
@section ХранилищеНастроекДанныхФормУдалить
@ifinfo
@heading ХранилищеНастроекДанныхФормУдалить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Удаляет настройку из хранилища настроек данных форм, как метод платформы Удалить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, удаление пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта     - Строка, Неопределено - см. синтакс-помощник платформы.
   КлючНастроек    - Строка, Неопределено - см. синтакс-помощник платформы.
   ИмяПользователя - Строка, Неопределено - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn
@node ХранилищеОбщихНастроекЗагрузить
@section ХранилищеОбщихНастроекЗагрузить
@ifinfo
@heading ХранилищеОбщихНастроекЗагрузить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Загружает настройку из хранилища общих настроек, как метод платформы Загрузить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Кроме того, возвращает указанное значение по умолчанию, если настройки не найдены.
 Если нет права СохранениеДанныхПользователя, возвращается значение по умолчанию без ошибки.
 В возвращаемом значении очищаются ссылки на несуществующий объект в базе данных, а именно
 - возвращаемая ссылка заменяется на указанное значение по умолчанию;
 - из данных типа Массив ссылки удаляются;
 - у данных типа Структура и Соответствие ключ не меняется, а значение устанавливается Неопределено;
 - анализ значений в данных типа Массив, Структура, Соответствие выполняется рекурсивно.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта          - Строка           - см. синтакс-помощник платформы.
   КлючНастроек         - Строка           - см. синтакс-помощник платформы.
   ЗначениеПоУмолчанию  - Произвольный     - значение, которое возвращается, если настройки не найдены.
                                             Если не указано, возвращается значение Неопределено.
   ОписаниеНастроек     - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя      - Строка           - см. синтакс-помощник платформы.
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеОбщихНастроекСохранить
@section ХранилищеОбщихНастроекСохранить
@ifinfo
@heading ХранилищеОбщихНастроекСохранить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеОбщихНастроекСохранить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Сохраняет настройку в хранилище общих настроек, как метод платформы Сохранить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта       - Строка           - см. синтакс-помощник платформы.
   КлючНастроек      - Строка           - см. синтакс-помощник платформы.
   Настройки         - Произвольный     - см. синтакс-помощник платформы.
   ОписаниеНастроек  - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя   - Строка           - см. синтакс-помощник платформы.
   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеОбщихНастроекСохранитьМассив
@section ХранилищеОбщихНастроекСохранитьМассив
@ifinfo
@heading ХранилищеОбщихНастроекСохранитьМассив
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Сохраняет несколько настроек в хранилище общих настроек, как метод платформы Сохранить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекСохранитьМассив(НесколькоНастроек,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
   НесколькоНастроек - Массив - со значениями:
     * Значение - Структура - со свойствами:
         * Объект    - Строка       - см. параметр КлючОбъекта  в синтакс-помощнике платформы.
         * Настройка - Строка       - см. параметр КлючНастроек в синтакс-помощнике платформы.
         * Значение  - Произвольный - см. параметр Настройки    в синтакс-помощнике платформы.
   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(НесколькоНастроек, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеОбщихНастроекУдалить
@section ХранилищеОбщихНастроекУдалить
@ifinfo
@heading ХранилищеОбщихНастроекУдалить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеОбщихНастроекУдалить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Удаляет настройку из хранилища общих настроек, как метод платформы Удалить,
 объектов СтандартноеХранилищеНастроекМенеджер или ХранилищеНастроекМенеджер.<Имя хранилища>,
 но с поддержкой длины ключа настроек более 128 символов путем хеширования части,
 которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, удаление пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта     - Строка, Неопределено - см. синтакс-помощник платформы.
   КлючНастроек    - Строка, Неопределено - см. синтакс-помощник платформы.
   ИмяПользователя - Строка, Неопределено - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеСистемныхНастроекЗагрузить
@section ХранилищеСистемныхНастроекЗагрузить
@ifinfo
@heading ХранилищеСистемныхНастроекЗагрузить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияВызовСервера.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Загружает настройку из хранилища системных настроек, как метод платформы Загрузить,
 объекта СтандартноеХранилищеНастроекМенеджер, но с поддержкой длины ключа настроек
 более 128 символов путем хеширования части, которая превышает 96 символов.
 Кроме того, возвращает указанное значение по умолчанию, если настройки не найдены.
 Если нет права СохранениеДанныхПользователя, возвращается значение по умолчанию без ошибки.
 В возвращаемом значении очищаются ссылки на несуществующий объект в базе данных, а именно
 - возвращаемая ссылка заменяется на указанное значение по умолчанию;
 - из данных типа Массив ссылки удаляются;
 - у данных типа Структура и Соответствие ключ не меняется, а значение устанавливается Неопределено;
 - анализ значений в данных типа Массив, Структура, Соответствие выполняется рекурсивно.
@*@b{Синтаксис}@*
@deffn Функция ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта          - Строка           - см. синтакс-помощник платформы.
   КлючНастроек         - Строка           - см. синтакс-помощник платформы.
   ЗначениеПоУмолчанию  - Произвольный     - значение, которое возвращается, если настройки не найдены.
                                             Если не указано, возвращается значение Неопределено.
   ОписаниеНастроек     - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя      - Строка           - см. синтакс-помощник платформы.
@end example
@*@b{Возвращаемое значение}@*
@example
   Произвольный - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеСистемныхНастроекСохранить
@section ХранилищеСистемныхНастроекСохранить
@ifinfo
@heading ХранилищеСистемныхНастроекСохранить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Сохраняет настройку в хранилище системных настроек, как метод платформы Сохранить
 объекта СтандартноеХранилищеНастроекМенеджер, но с поддержкой длины ключа настроек
 более 128 символов путем хеширования части, которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, сохранение пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта       - Строка           - см. синтакс-помощник платформы.
   КлючНастроек      - Строка           - см. синтакс-помощник платформы.
   Настройки         - Произвольный     - см. синтакс-помощник платформы.
   ОписаниеНастроек  - ОписаниеНастроек - см. синтакс-помощник платформы.
   ИмяПользователя   - Строка           - см. синтакс-помощник платформы.
   ОбновитьПовторноИспользуемыеЗначения - Булево - выполнить одноименный метод платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ХранилищеСистемныхНастроекУдалить
@section ХранилищеСистемныхНастроекУдалить
@ifinfo
@heading ХранилищеСистемныхНастроекУдалить
@end ifinfo
1. Для вызова с клиента и сервера
 См. ОбщегоНазначения.ХранилищеСистемныхНастроекУдалить.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Пример вызова}@*
ОбщегоНазначенияВызовСервера.ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Вызов сервера
@end deffn

2. Для вызова с сервера
 Удаляет настройку из хранилища системных настроек, как метод платформы Удалить,
 объекта СтандартноеХранилищеНастроекМенеджер, но с поддержкой длины ключа настроек
 более 128 символов путем хеширования части, которая превышает 96 символов.
 Если нет права СохранениеДанныхПользователя, удаление пропускается без ошибки.
@*@b{Синтаксис}@*
@deffn Процедура ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
@*@b{Параметры}@*
@example
   КлючОбъекта     - Строка, Неопределено - см. синтакс-помощник платформы.
   КлючНастроек    - Строка, Неопределено - см. синтакс-помощник платформы.
   ИмяПользователя - Строка, Неопределено - см. синтакс-помощник платформы.
@end example
@*@b{Пример вызова}@*
ОбщегоНазначения.ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЦветСтиля
@section ЦветСтиля
@ifinfo
@heading ЦветСтиля
@end ifinfo
 Функция получает цвет стиля по имени элемента стиля.
@*@b{Синтаксис}@*
@deffn Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
@*@b{Параметры}@*
@example
  ИмяЦветаСтиля - Строка - имя элемента стиля.
@end example
@*@b{Возвращаемое значение}@*
@example
  Цвет - цвет стиля.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦветаСтиля)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ЧастиИмени
@section ЧастиИмени
@ifinfo
@heading ЧастиИмени
@end ifinfo
 Раскладывает полное имя физического лица на составные части - фамилию, имя и отчество.
 Если в конце полного имени встречаются "оглы", "улы", "уулу", "кызы" или "гызы",
 то они также считаются частью отчества.
@*@b{Синтаксис}@*
@deffn Функция ЧастиИмени(ФамилияИмяОтчество) Экспорт
@*@b{Параметры}@*
@example
  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество".
@end example
@*@b{Возвращаемое значение}@*
@example
  Структура - части полного имени:
   * Фамилия  - Строка - фамилия;
   * Имя      - Строка - имя;
   * Отчество - Строка - отчество.
@end example
@*@b{Пример вызова}@*
   1. ФизическиеЛицаКлиентСервер.ЧастиИмени("Иванов Иван Иванович") 
   вернет структуру со значениями свойств: "Иванов", "Иван", "Иванович".
   2. ФизическиеЛицаКлиентСервер.ЧастиИмени("Смит Джон") 
   вернет структуру со значениями свойств: "Смит", "Джон", "".
   3. ФизическиеЛицаКлиентСервер.ЧастиИмени("Алиев Ахмед Октай оглы Мамедов") 
   вернет структуру со значениями свойств: "Алиев", "Алиев", "Октай оглы Мамедов".
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ШрифтСтиля
@section ШрифтСтиля
@ifinfo
@heading ШрифтСтиля
@end ifinfo
 Функция получает шрифт стиля по имени элемента стиля.
@*@b{Синтаксис}@*
@deffn Функция ШрифтСтиля(ИмяШрифтаСтиля) Экспорт
@*@b{Параметры}@*
@example
  ИмяШрифтаСтиля - Строка - имя элемента стиля.
@end example
@*@b{Возвращаемое значение}@*
@example
  Шрифт - шрифт стиля.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиент.ШрифтСтиля(ИмяШрифтаСтиля)
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ЭтоLinuxКлиент
@section ЭтоLinuxКлиент
@ifinfo
@heading ЭтоLinuxКлиент
@end ifinfo
 Возвращает Истина, если клиентское приложение запущено под управлением ОС Linux.
@*@b{Синтаксис}@*
@deffn Функция ЭтоLinuxКлиент() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если нет клиентского приложения, возвращается Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоLinuxСервер
@section ЭтоLinuxСервер
@ifinfo
@heading ЭтоLinuxСервер
@end ifinfo
 Возвращает Истина, если текущий сеанс выполняется на сервере, работающим под управлением ОС Linux.
@*@b{Синтаксис}@*
@deffn Функция ЭтоLinuxСервер() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если сервер работает под управлением ОС Linux.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоLinuxСервер()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоOSXКлиент
@section ЭтоOSXКлиент
@ifinfo
@heading ЭтоOSXКлиент
@end ifinfo
 Возвращает Истина, если клиентское приложение запущено под управлением ОС X.
@*@b{Синтаксис}@*
@deffn Функция ЭтоOSXКлиент() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если нет клиентского приложения, возвращается Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоOSXКлиент()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоWindowsКлиент
@section ЭтоWindowsКлиент
@ifinfo
@heading ЭтоWindowsКлиент
@end ifinfo
 Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
@*@b{Синтаксис}@*
@deffn Функция ЭтоWindowsКлиент() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если нет клиентского приложения, возвращается Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоАвтономноеРабочееМесто
@section ЭтоАвтономноеРабочееМесто
@ifinfo
@heading ЭтоАвтономноеРабочееМесто
@end ifinfo
 Возвращает Истина, если эта информационная база подключена к 1С:Fresh.
@*@b{Синтаксис}@*
@deffn Функция ЭтоАвтономноеРабочееМесто() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - признак автономного рабочего места.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоБазоваяВерсияКонфигурации
@section ЭтоБазоваяВерсияКонфигурации
@ifinfo
@heading ЭтоБазоваяВерсияКонфигурации
@end ifinfo
 Возвращает признак, является ли конфигурация базовой.
 Базовые версии конфигураций могут иметь программные ограничения, действие которых
 можно предусмотреть с помощью этой функции.
 Конфигурация считается базовой, если в ее имени есть термин "Базовая",
 например, "УправлениеТорговлейБазовая".
@*@b{Синтаксис}@*
@deffn Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если конфигурация - базовая.
@end example
@*@b{Пример вызова}@*
Результат = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоБизнесПроцесс
@section ЭтоБизнесПроцесс
@ifinfo
@heading ЭтоБизнесПроцесс
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс".
@*@b{Синтаксис}@*
@deffn Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является бизнес-процессом.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоВебКлиент
@section ЭтоВебКлиент
@ifinfo
@heading ЭтоВебКлиент
@end ifinfo
 Возвращает Истина, если клиентское приложение является Веб-клиентом.
@*@b{Синтаксис}@*
@deffn Функция ЭтоВебКлиент() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если нет клиентского приложения, возвращается Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоВебКлиентПодMacOS
@section ЭтоВебКлиентПодMacOS
@ifinfo
@heading ЭтоВебКлиентПодMacOS
@end ifinfo
 Возвращает Истина, если это веб клиент в Mac OS.
@*@b{Синтаксис}@*
@deffn Функция ЭтоВебКлиентПодMacOS() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если сеанс запущен под веб-клиентом и в Mac OS.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоДокумент
@section ЭтоДокумент
@ifinfo
@heading ЭтоДокумент
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Документ".
@*@b{Синтаксис}@*
@deffn Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к документам.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является документом.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоЖурналДокументов
@section ЭтоЖурналДокументов
@ifinfo
@heading ЭтоЖурналДокументов
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
@*@b{Синтаксис}@*
@deffn Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является журналом документов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоЗадача
@section ЭтоЗадача
@ifinfo
@heading ЭтоЗадача
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Задача".
@*@b{Синтаксис}@*
@deffn Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является задачей.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоКонстанта
@section ЭтоКонстанта
@ifinfo
@heading ЭтоКонстанта
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Константа".
@*@b{Синтаксис}@*
@deffn Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является константой.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоМобильныйКлиент
@section ЭтоМобильныйКлиент
@ifinfo
@heading ЭтоМобильныйКлиент
@end ifinfo
 Возвращает Истина, если клиентское приложение является мобильным клиентом.
@*@b{Синтаксис}@*
@deffn Функция ЭтоМобильныйКлиент() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - если нет клиентского приложения, возвращается Ложь.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент()
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоОбъектСсылочногоТипа
@section ЭтоОбъектСсылочногоТипа
@ifinfo
@heading ЭтоОбъектСсылочногоТипа
@end ifinfo
 Определяет принадлежность объекта метаданных к ссылочному типу.
@*@b{Синтаксис}@*
@deffn Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект ссылочного типа.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПеречисление
@section ЭтоПеречисление
@ifinfo
@heading ЭтоПеречисление
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Перечисление".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является перечислением.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПланВидовРасчета
@section ЭтоПланВидовРасчета
@ifinfo
@heading ЭтоПланВидовРасчета
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "План видов расчета".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является планом видов расчета.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПланВидовХарактеристик
@section ЭтоПланВидовХарактеристик
@ifinfo
@heading ЭтоПланВидовХарактеристик
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является планом видов характеристик.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПланОбмена
@section ЭтоПланОбмена
@ifinfo
@heading ЭтоПланОбмена
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "План обмена".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является планом обмена.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПланСчетов
@section ЭтоПланСчетов
@ifinfo
@heading ЭтоПланСчетов
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "План счетов".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является планом счетов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn
@node ЭтоПодчиненныйУзелРИБ
@section ЭтоПодчиненныйУзелРИБ
@ifinfo
@heading ЭтоПодчиненныйУзелРИБ
@end ifinfo
 Определяет, что эта информационная база является подчиненным узлом
 распределенной информационной базы (РИБ).
@*@b{Синтаксис}@*
@deffn Функция ЭтоПодчиненныйУзелРИБ() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если эта информационная база является подчиненным узлом РИБ.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПодчиненныйУзелРИБСФильтром
@section ЭтоПодчиненныйУзелРИБСФильтром
@ifinfo
@heading ЭтоПодчиненныйУзелРИБСФильтром
@end ifinfo
 Определяет, что эта информационная база является подчиненным узлом
 распределенной информационной базы (РИБ) с фильтром.
@*@b{Синтаксис}@*
@deffn Функция ЭтоПодчиненныйУзелРИБСФильтром() Экспорт
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если эта информационная база является подчиненным узлом РИБ с фильтром.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБСФильтром()
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоПоследовательность
@section ЭтоПоследовательность
@ifinfo
@heading ЭтоПоследовательность
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Последовательности".
@*@b{Синтаксис}@*
@deffn Функция ЭтоПоследовательность(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является последовательностью.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоПоследовательность(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРазделительСлов
@section ЭтоРазделительСлов
@ifinfo
@heading ЭтоРазделительСлов
@end ifinfo
 Определяет, является ли символ разделителем.
@*@b{Синтаксис}@*
@deffn Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
@*@b{Параметры}@*
@example
  КодСимвола      - Число  - код проверяемого символа;
  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
                             разделителем считаются все символы, не являющиеся цифрами, 
                             латинскими и кириллическими буквами, а также знаком подчеркивания.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если символ с кодом КодСимвола является разделителем.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегистр
@section ЭтоРегистр
@ifinfo
@heading ЭтоРегистр
@end ifinfo
 Определяет принадлежность объекта метаданных к типу регистр.
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является каким-либо регистром.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегистрБухгалтерии
@section ЭтоРегистрБухгалтерии
@ifinfo
@heading ЭтоРегистрБухгалтерии
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Регистр бухгалтерии".
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является регистром бухгалтерии.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегистрНакопления
@section ЭтоРегистрНакопления
@ifinfo
@heading ЭтоРегистрНакопления
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Регистр накопления".
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является регистром накопления.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегистрРасчета
@section ЭтоРегистрРасчета
@ifinfo
@heading ЭтоРегистрРасчета
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Регистр расчета".
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является регистром расчета.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегистрСведений
@section ЭтоРегистрСведений
@ifinfo
@heading ЭтоРегистрСведений
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Регистр сведений".
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является регистром сведений.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоРегламентноеЗадание
@section ЭтоРегламентноеЗадание
@ifinfo
@heading ЭтоРегламентноеЗадание
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Регламентные задания".
@*@b{Синтаксис}@*
@deffn Функция ЭтоРегламентноеЗадание(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является регламентным заданием.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоРегламентноеЗадание(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоСправочник
@section ЭтоСправочник
@ifinfo
@heading ЭтоСправочник
@end ifinfo
 Определяет принадлежность объекта метаданных к общему типу "Справочник".
@*@b{Синтаксис}@*
@deffn Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
@*@b{Параметры}@*
@example
  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если объект является справочником.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоСсылка
@section ЭтоСсылка
@ifinfo
@heading ЭтоСсылка
@end ifinfo
 Проверка того, что переданный тип является ссылочным типом данных.
 Для типа "Неопределено" возвращается Ложь.
@*@b{Синтаксис}@*
@deffn Функция ЭтоСсылка(ПроверяемыйТип) Экспорт
@*@b{Параметры}@*
@example
  ПроверяемыйТип - Тип - для проверки на тип ссылка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если это ссылка.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоСтандартныйРеквизит
@section ЭтоСтандартныйРеквизит
@ifinfo
@heading ЭтоСтандартныйРеквизит
@end ifinfo
 Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов.
@*@b{Синтаксис}@*
@deffn Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
@*@b{Параметры}@*
@example
  СтандартныеРеквизиты - ОписанияСтандартныхРеквизитов - тип и значение описывает коллекцию настроек различных
                                                         стандартных реквизитов;
  ИмяРеквизита         - Строка - реквизит который необходимо проверить на принадлежность множеству стандартных
                                  реквизитов;
@end example
@*@b{Возвращаемое значение}@*
@example
   Булево - Истина, если реквизит входит в подмножество стандартных реквизитов.
@end example
@*@b{Пример вызова}@*
Результат = ОбщегоНазначения.ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита)
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ЭтоУникальныйИдентификатор
@section ЭтоУникальныйИдентификатор
@ifinfo
@heading ЭтоУникальныйИдентификатор
@end ifinfo
 Проверяет, является ли строка уникальным идентификатором.
 В качестве уникального идентификатора предполагается строка вида
 "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX", где X = [0..9,a..f].
@*@b{Синтаксис}@*
@deffn Функция ЭтоУникальныйИдентификатор(Знач Значение) Экспорт
@*@b{Параметры}@*
@example
  Значение - Строка - проверяемая строка.
@end example
@*@b{Возвращаемое значение}@*
@example
  Булево - Истина, если переданная строка является уникальным идентификатором.
@end example
@*@b{Пример вызова}@*
Результат = СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Значение)
@*@b{Доступность}@*
 Сервер, Тонкий клиент, Толстый клиент, Внешнее соединение
@end deffn
