@node Базовая Функциональность Переопределение, , Базовая Функциональность Интерфейс, Top
@chapter Базовая Функциональность Переопределение
@ifinfo
@heading Базовая Функциональность Переопределение
@end ifinfo

*ПередЗавершениемРаботыСистемы::
*ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле::
*ПередНачаломРаботыСистемы::
*ПослеНачалаРаботыСистемы::
*ПриДобавленииИсключенийПоискаСсылок::
*ПриДобавленииОбработчиковУстановкиПараметровСеанса::
*ПриДобавленииПараметровРаботыКлиента::
*ПриДобавленииПараметровРаботыКлиентаПриЗапуске::
*ПриДобавленииПереименованийОбъектовМетаданных::
*ПриДобавленииПодсистем::
*ПриНачалеРаботыСистемы::
*ПриОбработкеПараметровЗапуска::
*ПриОпределенииОбщихПараметровБазовойФункциональности::
*ПриОпределенииОтключенныхПодсистем::
*ПриОпределенииПараметровФункциональныхОпцийИнтерфейса::
*ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов::
*ПриОтправкеДанныхГлавному::
*ПриОтправкеДанныхПодчиненному::
*ПриПолученииДанныхОтГлавного::
*ПриПолученииДанныхОтПодчиненного::
*ПриУстановкеЗаголовкаКлиентскогоПриложения::

@node ПередЗавершениемРаботыСистемы
@section  ПередЗавершениемРаботыСистемы
@ifinfo
@heading ПередЗавершениемРаботыСистемы
@end ifinfo
 Выполняется перед интерактивном завершении работы пользователя с областью данных или в локальном режиме.
 Соответствует обработчику ПередЗавершениемРаботыСистемы.
 Позволяет определить список предупреждений, выводимых пользователю перед завершением работы.
@*@b{Синтаксис}@*
@deffn Процедура ПередЗавершениемРаботыСистемы(Отказ, Предупреждения) Экспорт
@*@b{Параметры}@*
@example
  Отказ          - Булево - если установить данному параметру значение Истина, то работа с программой не будет 
                            завершена.
  Предупреждения - Массив - добавить элементы типа Структура, свойства которой описывают внешний вид предупреждения,
                            а также дальнейшие действия.
                            См. описание свойств в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле
@section  ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле
@ifinfo
@heading ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле
@end ifinfo
 Вызывается перед загрузкой приоритетных данных в подчиненном узле РИБ
 и предназначена для заполнения настроек размещения сообщения обмена данными или
 для реализации нестандартной загрузки приоритетных данных из главного узла РИБ.
 К приоритетным данным относятся предопределенные элементы, а также
 элементы справочника ИдентификаторыОбъектовМетаданных.
@*@b{Синтаксис}@*
@deffn Процедура ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
@*@b{Параметры}@*
@example
  СтандартнаяОбработка - Булево - начальное значение Истина; если установить Ложь, 
                то стандартная загрузка приоритетных данных с помощью подсистемы
                ОбменДанными будет пропущена (тоже будет и в случае,
                если подсистемы ОбменДанными нет в конфигурации).
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПередНачаломРаботыСистемы
@section  ПередНачаломРаботыСистемы
@ifinfo
@heading ПередНачаломРаботыСистемы
@end ifinfo
 Выполняется перед интерактивным началом работы пользователя с областью данных или в локальном режиме.
 Соответствует обработчику ПередНачаломРаботыСистемы.
@*@b{Синтаксис}@*
@deffn Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
@*@b{Параметры}@*
@example
  Параметры - Структура - структура со свойствами:
   * Отказ         - Булево - Возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
   * Перезапустить - Булево - Возвращаемое значение. Если установить Истина, и параметр Отказ тоже установлен
                              в Истина, то выполняется перезапуск программы.
   * ДополнительныеПараметрыКоманднойСтроки - Строка - Возвращаемое значение. Имеет смысл, когда Отказ
                              и Перезапустить установлены Истина.
   * ИнтерактивнаяОбработка - ОписаниеОповещения - Возвращаемое значение. Для открытия окна, блокирующего вход в
                              программу, следует присвоить в этот параметр описание обработчика
                              оповещения, который открывает окно. Смотри пример ниже.
   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в обработке
                              закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения. Смотри пример ниже.
   * Модули                 - Массив - ссылки на модули, в которых нужно вызвать эту же процедуру после возврата.
                              Модули можно добавлять только в рамках вызова в процедуру переопределяемого модуля.
                              Используется для упрощения реализации нескольких последовательных асинхронных вызовов
                              в разные подсистемы. См. пример ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы.
@end example
@*@b{Пример реализации}@*
@example
  Следующий код открывает окно, блокирующее вход в программу.
  Если ОткрытьОкноПриЗапуске Тогда
   Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьОкно", ЭтотОбъект);
  КонецЕсли;

  Процедура ОткрытьОкно(Параметры, ДополнительныеПараметры) Экспорт
  // Показываем окно, по закрытию которого вызывается обработчик оповещения ОткрытьОкноЗавершение.
  Оповещение = Новый ОписаниеОповещения("ОткрытьОкноЗавершение", ЭтотОбъект, Параметры);
  Форма = ОткрытьФорму(... ,,, ... Оповещение);
  Если Не Форма.Открыта() Тогда // Если ПриСозданииНаСервере Отказ установлен Истина.
   ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
  КонецЕсли;
 КонецПроцедуры
 Процедура ОткрытьОкноЗавершение(Результат, Параметры) Экспорт
  ...
  ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
 КонецПроцедуры
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПослеНачалаРаботыСистемы
@section  ПослеНачалаРаботыСистемы
@ifinfo
@heading ПослеНачалаРаботыСистемы
@end ifinfo
 Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
 Вызывается после завершения действий ПриНачалеРаботыСистемы.
 Используется для подключения обработчиков ожидания, которые не должны вызываться
 в случае интерактивных действий перед и при начале работы системы.
 Начальная страница (рабочий стол) в этот момент еще не открыта, поэтому запрещено открывать
 формы напрямую, а следует использовать для этих целей обработчик ожидания.
 Запрещено использовать это событие для интерактивного взаимодействия с пользователем
 (ПоказатьВопрос и аналогичные действия). Для этих целей следует размещать код в процедуре ПриНачалеРаботыСистемы.
@*@b{Синтаксис}@*
@deffn Процедура ПослеНачалаРаботыСистемы() Экспорт
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПриДобавленииИсключенийПоискаСсылок
@section  ПриДобавленииИсключенийПоискаСсылок
@ifinfo
@heading ПриДобавленииИсключенийПоискаСсылок
@end ifinfo
 Определяет объекты метаданных и отдельные реквизиты, которые исключаются из результатов поиска ссылок,
 не учитываются при монопольном удалении помеченных, замене ссылок и в отчете по местам использования.
 См. также ОбщегоНазначения.ИсключенияПоискаСсылок.
 Пример задачи: к документу "Реализация товаров и услуг" подключены подсистемы "Версионирование объектов" и "Свойства".
 Также этот документ может быть указан в других объектах метаданных - документах или регистрах.
 Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
 Другая часть ссылок - "техногенные" (ссылки на документ из данных подсистем "Версионирование объектов" и "Свойства")
 и должны скрываться от пользователя при удалении, анализе мест использования или запретов редактирования ключевых реквизитов.
 Список таких "техногенных" объектов нужно перечислить в этой процедуре.
 При этом, для избежания появления появления ссылок на несуществующие объекты
 рекомендуется предусмотреть процедуру очистки указанных объектов метаданных.
@example
   * Для измерений регистров сведений - с помощью установки флажка "Ведущее",
     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
   * Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов
     метаданных, которые могут быть записаны в реквизиты указанных объектов метаданных.
     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
@end example
Подробнее см. в документации к подсистеме "Удаление помеченных объектов".
 При исключении регистров допустимо исключать только Измерения,
 При необходимости исключить из поиска значения в ресурсах
 или в реквизитах регистров требуется исключить регистр целиком.
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
@*@b{Параметры}@*
@example
   ИсключенияПоискаСсылок - Массив - объекты метаданных или их реквизиты (ОбъектМетаданных, Строка),
       которые не должно учитываться в бизнес-логике.
       Стандартные реквизиты и табличные части могут быть указаны только в виде строковых имен (см. пример ниже).
@end example
@*@b{Пример реализации}@*
@example
   ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
   ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Измерения.Объект);
   ИсключенияПоискаСсылок.Добавить("ПланВидовРасчета._ДемоОсновныеНачисления.СтандартнаяТабличнаяЧасть.БазовыеВидыРасчета.СтандартныйРеквизит.ВидРасчета");
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриДобавленииОбработчиковУстановкиПараметровСеанса
@section  ПриДобавленииОбработчиковУстановкиПараметровСеанса
@ifinfo
@heading ПриДобавленииОбработчиковУстановкиПараметровСеанса
@end ifinfo
 Определяет соответствие имен параметров сеанса и обработчиков для их установки.
 Вызывается для инициализации параметров сеанса из обработчика события модуля сеанса УстановкаПараметровСеанса
 (подробнее о нем см. синтакс-помощник).
 В указанных модулях должна быть размещена процедура обработчика, в которую передаются параметры
@example
  ИмяПараметра           - Строка - имя параметра сеанса, который требуется установить.
  УстановленныеПараметры - Массив - имена параметров, которые уже установлены.
 Далее пример процедуры обработчика для копирования в указанные модули.
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
 Если ИмяПараметра = "ТекущийПользователь" Тогда
  ПараметрыСеанса.ТекущийПользователь = Значение;
  УстановленныеПараметры.Добавить("ТекущийПользователь");
 КонецЕсли;
КонецПроцедуры
@end example
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
@*@b{Параметры}@*
@example
  Обработчики - Соответствие - со свойствами:
    * Ключ     - Строка - в формате "<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>".
                   Символ '*'используется в конце имени параметра сеанса и обозначает,
                   что один обработчик будет вызван для инициализации всех параметров сеанса
                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.
    * Значение - Строка - в формате "<ИмяМодуля>.УстановкаПараметровСеанса".
  Пример:
   Обработчики.Вставить("ТекущийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриДобавленииПараметровРаботыКлиента
@section  ПриДобавленииПараметровРаботыКлиента
@ifinfo
@heading ПриДобавленииПараметровРаботыКлиента
@end ifinfo
 Позволяет задать значения параметров, необходимых для работы клиентского кода
 конфигурации без дополнительных серверных вызовов.
 Для получения этих параметров из клиентского кода
 см. СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента.
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
@*@b{Параметры}@*
@example
   Параметры - Структура - имена и значения параметров работы клиента, которые необходимо задать.
                           Для установки параметров работы клиента:
                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn


@node ПриДобавленииПараметровРаботыКлиентаПриЗапуске
@section  ПриДобавленииПараметровРаботыКлиентаПриЗапуске
@ifinfo
@heading ПриДобавленииПараметровРаботыКлиентаПриЗапуске
@end ifinfo
 Позволяет задать значения параметров, необходимых для работы клиентского кода
 при запуске конфигурации (в обработчиках событий ПередНачаломРаботыСистемы и ПриНачалеРаботыСистемы) 
 без дополнительных серверных вызовов. 
 Для получения значений этих параметров из клиентского кода
 см. СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске.
 Важно: недопустимо использовать команды сброса кэша повторно используемых модулей, 
 иначе запуск может привести к непредсказуемым ошибкам и лишним серверным вызовам.
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
@*@b{Параметры}@*
@example
   Параметры - Структура - имена и значения параметров работы клиента при запуске, которые необходимо задать.
                           Для установки параметров работы клиента при запуске:
                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриДобавленииПереименованийОбъектовМетаданных
@section  ПриДобавленииПереименованийОбъектовМетаданных
@ifinfo
@heading ПриДобавленииПереименованийОбъектовМетаданных
@end ifinfo
 Вызывается при обновлении информационной базы для учета переименований подсистем и ролей в конфигурации.
 В противном случае, возникнет рассинхронизация между метаданными конфигурации и 
 элементами справочника ИдентификаторыОбъектовМетаданных, что приведет к различным ошибкам при работе конфигурации.
 В этой процедуре последовательно для каждой версии конфигурации задаются переименования только подсистем и ролей, 
 а переименования остальных объектов метаданных задавать не следует, т.к. они обрабатываются автоматически.
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
@*@b{Параметры}@*
@example
  Итог - ТаблицаЗначений - таблица переименований, которую требуется заполнить.
                           См. ОбщегоНазначения.ДобавитьПереименование.
@end example
@*@b{Пример реализации}@*
@example
 ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
  "Подсистема._ДемоПодсистемы",
  "Подсистема._ДемоСервисныеПодсистемы");
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриДобавленииПодсистем
@section  ПриДобавленииПодсистем
@ifinfo
@heading ПриДобавленииПодсистем
@end ifinfo
 Определяет список модулей библиотек и конфигурации, которые предоставляют
 основные сведения о себе: имя, версия, список обработчиков обновления
 а также зависимости от других библиотек.
 Состав обязательных процедур такого модуля см. в общем модуле ОбновлениеИнформационнойБазыБСП
 (область ПрограммныйИнтерфейс).
 При этом сам модуль Библиотеки стандартных подсистем ОбновлениеИнформационнойБазыБСП
 не требуется явно добавлять в массив МодулиПодсистем.
@*@b{Синтаксис}@*
@deffn Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт
@*@b{Параметры}@*
@example
  МодулиПодсистем - Массив - имена серверных общих модулей библиотек и конфигурации.
                             Например: "ОбновлениеИнформационнойБазыБРО" - библиотека,
                                       "ОбновлениеИнформационнойБазыБП"  - конфигурация.
@end example
@*@b{Расположение}@*
 Общий модуль ПодсистемыКонфигурацииПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриНачалеРаботыСистемы
@section  ПриНачалеРаботыСистемы
@ifinfo
@heading ПриНачалеРаботыСистемы
@end ifinfo
 Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
 Соответствует обработчику ПриНачалеРаботыСистемы.
@*@b{Синтаксис}@*
@deffn Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
@*@b{Параметры}@*
@example
  Параметры - Структура - структура со свойствами:
   * Отказ         - Булево - Возвращаемое значение. Если установить Истина, то работа программы будет прекращена.
   * Перезапустить - Булево - Возвращаемое значение. Если установить Истина и параметр Отказ тоже установлен
                              в Истина, то выполняется перезапуск программы.
   * ДополнительныеПараметрыКоманднойСтроки - Строка - Возвращаемое значение. Имеет смысл
                              когда Отказ и Перезапустить установлены Истина.
   * ИнтерактивнаяОбработка - ОписаниеОповещения - Возвращаемое значение. Для открытия окна, блокирующего вход
                              в программу, следует присвоить в этот параметр описание обработчика оповещения,
                              который открывает окно. См. пример в ПередНачаломРаботыСистемы.
   * ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход в программу, то в
                              обработке закрытия этого окна необходимо выполнить оповещение ОбработкаПродолжения.
                              См. пример в ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПриОбработкеПараметровЗапуска
@section  ПриОбработкеПараметровЗапуска
@ifinfo
@heading ПриОбработкеПараметровЗапуска
@end ifinfo
 Вызывается для обработки собственных параметров запуска программы,
 передаваемых с помощью ключа командной строки /C, например: 1cv8.exe ... /CРежимОтладки;ОткрытьИЗакрыть.
@*@b{Синтаксис}@*
@deffn Процедура ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ) Экспорт
@*@b{Параметры}@*
@example
  ПараметрыЗапуска  - Массив - массив строк разделенных символом ";" в параметре запуска,
                      переданным в конфигурацию с помощью ключа командной строки /C.
  Отказ             - Булево - если установить Истина, то запуск будет прерван.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn

@node ПриОпределенииОбщихПараметровБазовойФункциональности
@section  ПриОпределенииОбщихПараметровБазовойФункциональности
@ifinfo
@heading ПриОпределенииОбщихПараметровБазовойФункциональности
@end ifinfo
 Позволяет настроить общие параметры подсистемы.
@*@b{Синтаксис}@*
@deffn Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
@*@b{Параметры}@*
@example
  ОбщиеПараметры - Структура - структура со свойствами:
      * ИмяФормыПерсональныхНастроек            - Строка - имя формы для редактирования персональных настроек.
                                                           Ранее определялись в
                                                           ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек.
      * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - по умолчанию Истина. Если установить Ложь, то 
                                                                  подтверждение при завершении работы программы не
                                                                  будет запрашиваться,  если явно не разрешить в
                                                                  персональных настройках программы.
      * МинимальнаяВерсияПлатформы              - Строка - минимальная версии платформы, требуемая для запуска программы.
                                                           Запуск программы на версии платформы ниже указанной будет невозможен.
                                                           Например, "8.3.6.1650".
      * РекомендуемаяВерсияПлатформы            - Строка - рекомендуемая версия платформы для запуска программы.
                                                           Например, "8.3.8.2137".
      * ОтключитьИдентификаторыОбъектовМетаданных - Булево - отключает заполнение справочников ИдентификаторыОбъектовМетаданных
              и ИдентификаторыОбъектовРасширений, процедуру выгрузки и загрузки в узлах РИБ.
              Для частичного встраивания отдельных функций библиотеки в конфигурации без постановки на поддержку.
      * РекомендуемыйОбъемОперативнойПамяти - Число - объем памяти в гигабайтах, рекомендуемый для комфортной работы в
                                                      программе.
    Устарели, следует использовать свойства МинимальнаяВерсияПлатформы и РекомендуемаяВерсияПлатформы:
      * МинимальноНеобходимаяВерсияПлатформы    - Строка - полный номер версии платформы для запуска программы.
                                                           Например, "8.3.4.365".
                                                           Ранее определялись в
                                                           ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы.
      * РаботаВПрограммеЗапрещена               - Булево - Начальное значение Ложь.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриОпределенииОтключенныхПодсистем
@section  ПриОпределенииОтключенныхПодсистем
@ifinfo
@heading ПриОпределенииОтключенныхПодсистем
@end ifinfo
 Позволяет виртуально отключать подсистемы для целей тестирования.
 Если подсистема отключена, то функция ОбщегоНазначения.ПодсистемаСуществует вернет Ложь.
 В этой процедуре нельзя использовать функцию ОбщегоНазначения.ПодсистемСуществует, т.к. это приводит к рекурсии.
@*@b{Синтаксис}@*
@deffn Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
@*@b{Параметры}@*
@example
   ОтключенныеПодсистемы - Соответствие - в ключе указывается имя отключаемой подсистемы, 
                                          в значении - установить в Истина.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриОпределенииПараметровФункциональныхОпцийИнтерфейса
@section  ПриОпределенииПараметровФункциональныхОпцийИнтерфейса
@ifinfo
@heading ПриОпределенииПараметровФункциональныхОпцийИнтерфейса
@end ifinfo
 Задает параметры функциональных опций, действие которых распространяется на командный интерфейс и рабочий стол.
 Например, если значения функциональной опции хранятся в ресурсах регистра сведений,
 то параметры функциональных опций могут определять условия отборов по измерениям регистра,
 которые будут применяться при чтении значения этой функциональной опции.
 См. в синтакс-помощнике методы ПолучитьФункциональнуюОпциюИнтерфейса,
 УстановитьПараметрыФункциональныхОпцийИнтерфейса и ПолучитьПараметрыФункциональныхОпцийИнтерфейса.
@*@b{Синтаксис}@*
@deffn Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
@*@b{Параметры}@*
@example
   ОпцииИнтерфейса - Структура - значения параметров функциональных опций, установленных для командного интерфейса.
       Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов
@section  ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов
@ifinfo
@heading ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов
@end ifinfo
 Определяет список версий программных интерфейсов, доступных через web-сервис InterfaceVersion.
 См. также ОбщегоНазначения.ВерсииИнтерфейса.
@*@b{Синтаксис}@*
@deffn Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(ПоддерживаемыеВерсии) Экспорт
@*@b{Параметры}@*
@example
  ПоддерживаемыеВерсии - Структура - в ключе указывается имя программного интерфейса,
                                     а в значениях - массив строк с поддерживаемыми версиями этого интерфейса.
@end example
@*@b{Пример реализации}@*
@example
  // СервисПередачиФайлов
  Версии = Новый Массив;
  Версии.Добавить("1.0.1.1");
  Версии.Добавить("1.0.2.1"); 
  ПоддерживаемыеВерсии.Вставить("СервисПередачиФайлов", Версии);
  // Конец СервисПередачиФайлов
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриОтправкеДанныхГлавному
@section  ПриОтправкеДанныхГлавному
@ifinfo
@heading ПриОтправкеДанныхГлавному
@end ifinfo
 Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
 Выполняется после выполнения базовых алгоритмов библиотеки.
 Не выполняется, если отправка элемента данных была проигнорирована ранее.
@*@b{Синтаксис}@*
@deffn Процедура ПриОтправкеДанныхГлавному(Источник, ЭлементДанных, ОтправкаЭлемента) Экспорт
@*@b{Параметры}@*
@example
  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
  ОтправкаЭлемента  - ОтправкаЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриОтправкеДанныхПодчиненному
@section  ПриОтправкеДанныхПодчиненному
@ifinfo
@heading ПриОтправкеДанныхПодчиненному
@end ifinfo
 Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
 Выполняется после выполнения базовых алгоритмов библиотеки.
 Не выполняется, если отправка элемента данных была проигнорирована ранее.
@*@b{Синтаксис}@*
@deffn Процедура ПриОтправкеДанныхПодчиненному(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
@*@b{Параметры}@*
@example
  Источник                  - ПланОбменаОбъект - узел, для которого выполняется обмен.
  ЭлементДанных             - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
  ОтправкаЭлемента          - ОтправкаЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
  СозданиеНачальногоОбраза  - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриПолученииДанныхОтГлавного
@section  ПриПолученииДанныхОтГлавного
@ifinfo
@heading ПриПолученииДанныхОтГлавного
@end ifinfo
 Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
 Выполняется после выполнения базовых алгоритмов библиотеки.
 Не выполняется, если получение элемента данных было проигнорировано ранее.
@*@b{Синтаксис}@*
@deffn Процедура ПриПолученииДанныхОтГлавного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
@*@b{Параметры}@*
@example
  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
  ПолучениеЭлемента - ПолучениеЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
  ОтправкаНазад     - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриПолученииДанныхОтПодчиненного
@section  ПриПолученииДанныхОтПодчиненного
@ifinfo
@heading ПриПолученииДанныхОтПодчиненного
@end ifinfo
 Дополнительный обработчик одноименного события, возникающего при обмене данными в распределенной информационной базе.
 Выполняется после выполнения базовых алгоритмов библиотеки.
 Не выполняется, если получение элемента данных было проигнорировано ранее.
@*@b{Синтаксис}@*
@deffn Процедура ПриПолученииДанныхОтПодчиненного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
@*@b{Параметры}@*
@example
  Источник          - ПланОбменаОбъект - узел, для которого выполняется обмен.
  ЭлементДанных     - Произвольный - см. описание одноименного обработчика в синтаксис-помощнике.
  ПолучениеЭлемента - ПолучениеЭлементаДанных - см. описание одноименного обработчика в синтаксис-помощнике.
  ОтправкаНазад     - Булево - см. описание одноименного обработчика в синтаксис-помощнике.
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияПереопределяемый
@*@b{Доступность}@*
 Сервер, Толстый клиент, Внешнее соединение
@end deffn

@node ПриУстановкеЗаголовкаКлиентскогоПриложения
@section  ПриУстановкеЗаголовкаКлиентскогоПриложения
@ifinfo
@heading ПриУстановкеЗаголовкаКлиентскогоПриложения
@end ifinfo
 Позволяет переопределить заголовок программы.
@*@b{Синтаксис}@*
@deffn Процедура ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске) Экспорт
@*@b{Параметры}@*
@example
  ЗаголовокПриложения - Строка - текст заголовка программы;
  ПриЗапуске          - Булево - Истина, если вызывается при начале работы программы.
                                 В этом случае недопустимо вызывать те серверные функции конфигурации,
                                 которые рассчитывают на то, что запуск уже полностью завершен. 
                                 Например, вместо СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента
                                 следует вызывать СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске. 
@end example
@*@b{Пример реализации}@*
@example
  Для того чтобы в начале заголовка программы вывести название текущего проекта, следует определить параметр 
  ТекущийПроект в процедуре ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента и вписать код:
  Если ПриЗапуске Тогда
    Возврат;
  КонецЕсли;
  ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
  ТекущийПроект = Неопределено; 
  Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных И ПараметрыКлиента.Свойство("ТекущийПроект", ТекущийПроект) 
   И Не ПараметрыКлиента.ТекущийПроект.Пустая() Тогда
   ЗаголовокПриложения = Строка(ПараметрыКлиента.ТекущийПроект) + " / " + ЗаголовокПриложения;
  КонецЕсли;
@end example
@*@b{Расположение}@*
 Общий модуль ОбщегоНазначенияКлиентПереопределяемый
@*@b{Доступность}@*
 Тонкий клиент, Толстый клиент
@end deffn



