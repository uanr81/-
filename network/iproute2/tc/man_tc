TC(8)                                                         Linux                                                         TC(8)

NAME
       tc - show / manipulate traffic control settings

SYNOPSIS
       tc  [  OPTIONS  ]  qdisc [ add | change | replace | link | delete ] dev DEV [ parent qdisc-id | root ] [ handle qdisc-id ]
       qdisc [ qdisc specific parameters ]

       tc [ OPTIONS ] class [ add | change | replace | delete ] dev DEV parent qdisc-id [ classid class-id ] qdisc [  qdisc  spe‐
       cific parameters ]

       tc [ OPTIONS ] filter [ add | change | replace | delete ] dev DEV [ parent qdisc-id | root ] protocol protocol prio prior‐
       ity filtertype [ filtertype specific parameters ] flowid flow-id

       tc [ OPTIONS ] [ FORMAT ] qdisc show [ dev DEV ]

       tc [ OPTIONS ] [ FORMAT ] class show dev DEV

       tc [ OPTIONS ] filter show dev DEV

        OPTIONS := { [ -force ] -b[atch] [ filename ] | [ -n[etns] name ] | [ -nm | -nam[es] ] | [ { -cf | -c[onf] } [ filename ]
       ] }

        FORMAT := { -s[tatistics] | -d[etails] | -r[aw] | -p[retty] | -i[ec] | -g[raph] }

DESCRIPTION
       Tc используется для настройки управления трафиком в ядре Linux. Управление трафиком состоит из следующих элементов:

       SHAPING
              Когда движение формируется, его скорость передачи находится под контролем. Формирование может быть более чем снижением доступной
	      полосы пропускания - оно также используется для сглаживания всплесков трафика для улучшения сетевого поведения. Формирование
	      происходит при выходе.

       SCHEDULING
              Планируя передачу пакетов, можно улучшить интерактивность для трафика, который ему нужен, в то же время гарантируя пропускную
	      способность для массовых передач. Переупорядочение также называется приоритетом и происходит только при выходе.

       POLICING
              В то время как формирование связано с передачей трафика, полицейская деятельность относится к прибытию трафика. Таким образом,
	      наступление происходит при вмешательстве.

       DROPPING
              Трафик, превышающий установленную полосу пропускания, также может быть немедленно отключен, как при входе, так и при выходе.

       Обработка трафика контролируется тремя видами объектов: qdiscs, classes и filters.

QDISCS
       qdisc не подходит для «очереди в очереди», и элементарно понимать управление трафиком. Всякий раз, когда ядру нужно отправить пакет в
       интерфейс, он устанавливается в qdisc, настроенный для этого интерфейса. Сразу же после этого ядро ​​пытается получить как можно больше
       пакетов из qdisc, чтобы передать их драйверу сетевого адаптера.

       Простым QDISC является «pfifo», который вообще не обрабатывает и представляет собой чистую очередь First In, First Out. Однако он сохраняет
       трафик, когда сетевой интерфейс не может справиться с этим на мгновение.

CLASSES
       Некоторые qdiscs могут содержать классы, которые содержат дополнительные qdiscs - трафик затем может быть заключен в один из внутренних
       qdiscs, которые находятся внутри классов. Когда ядро ​​пытается удалить пакет из такого классного qdisc, он может исходить из любого из
       классов. Qdisc может, например, приоритизировать определенные виды трафика, пытаясь удалить из определенных классов другие классы.

FILTERS
       Фильтр используется классным qdisc для определения того, в каком классе будет установлен пакет. Всякий раз, когда трафик поступает в класс
       с подклассами, его необходимо классифицировать. Для этого могут быть использованы различные методы, один из которых - фильтры. Все фильтры,
       прикрепленные к классу, вызываются, пока один из них не вернется с вердиктом. Если не будет вынесен приговор, могут быть доступны другие
       критерии. Это отличается на qdisc.

       Важно заметить, что фильтры находятся внутри qdiscs - они не являются хозяевами того, что происходит.

       Доступные фильтры::

       basic  Пакеты фильтров на основе выражения ematch. Подробнее см. Tc-ematch (8).

       bpf    Пакеты фильтров с использованием (e) BPF, см. Tc-bpf (8) для деталей.

       cgroup Пакеты фильтров на основе контрольной группы их процесса. Подробнее см. Tc-cgroup (8).

       flow, flower
              Классификаторы на основе потока, фильтрация пакетов на основе их потока (определяется по выбору ключами). Подробнее см. Tc-flow (8)
	      и tc-flower (8).

       fw     Фильтр основан на fwmark. Непосредственно отображает значение fwmark для класса трафика. См. Tc-fw (8).

       route  Фильтровать пакеты на основе таблицы маршрутизации. Подробнее см. Tc-route (8).

       rsvp   Сопоставление протоколов протокола резервирования ресурсов (RSVP).

       tcindex
              Пакеты фильтров на основе индекса управления трафиком. См. Tc-tcindex (8).

       u32    Общая фильтрация по произвольным пакетным данным с помощью синтаксиса для абстрактных общих операций. Подробнее см. Tc-u32 (8).

CLASSLESS QDISCS
       Бесклассовые qdiscs:

       choke  CHOKe (CHOose и Keep для реагирующих потоков, CHOose и Kill для невосприимчивых потоков) - это бесклассовый qdisc, предназначенный
       для идентификации и наказания потоков, которые монополизируют очередь. CHOKe - это вариант RED, а конфигурация похожа на RED.

       codel  CoDel (произносится как «coddle») - это адаптивная схема «активного управления очередью» (AQM), которая была разработана для
       устранения недостатков RED и его вариантов.

       [p|b]fifo
              Простейший полезный qdisc, чистый First In, First Out. Ограничено в пакетах или в байтах.

       fq     Справедливый планировщик очереди реализует TCP-схему и масштабирование до миллионов параллельных потоков на qdisc.

       fq_codel
              Ярмарка Queuing Controlled Delay представляет собой очередную дисциплину, которая сочетает в себе честную очередь с CoDel AQM.
	      FQ_Codel использует стохастическую модель для классификации входящих пакетов в разные потоки и используется для обеспечения
	      достаточной доли полосы пропускания для всех потоков с использованием очереди. Каждый такой поток управляется дисциплиной очереди
	      CoDel. Из-за переупорядочивания внутри потока, поскольку Codel внутренне использует очередь FIFO.

       gred   Обобщенное раннее раннее обнаружение объединяет несколько RED-очередей для достижения нескольких приоритетов падения. Это необходимо
       	      для реализации Гарантированной экспедиции (RFC 2597).

       hhf    Фильтр Heavy-Hitter различает небольшие потоки и противоположные тяжелые нападающие. Цель состоит в том, чтобы поймать тяжелых
       	      нападающих и переместить их в отдельную очередь с меньшим приоритетом, чтобы объемный трафик не влиял на латентность критического
	      трафика.

       ingress
              Это специальный qdisc, поскольку он применяется к входящему трафику на интерфейсе, позволяя его фильтровать и контролировать.

       mqprio
		Multiqueue Priority Qdisc - это простая процедура очередей, которая позволяет отображать потоки трафика в диапазоны аппаратной
		очереди с использованием приоритетов и настраиваемый приоритет для сопоставления класса трафика. Класс трафика в этом контексте
		представляет собой набор смежных классов qdisc, которые сопоставляют 1: 1 с набором выставленных аппаратных очередей.

       multiq
		Multiqueue - это qdisc, оптимизированный для устройств с несколькими очередями Tx. Он был добавлен для оборудования, которое хочет
		избежать блокировки строки. Он будет циклически перемещаться по полосам и проверять, что аппаратная очередь, связанная с полосой,
		не останавливается до удаления пакета.

       netem
		Сетевой эмулятор - это усовершенствование средств управления трафиком Linux, которые позволяют добавлять задержки, потерю пакетов,
		дублирование и другие характеристики для пакетов, исходящих из выбранного сетевого интерфейса.

       pfifo_fast
		Стандартный qdisc для ядер с расширенным маршрутизатором. Состоит из трехполосной очереди, которая отличает флаги типа
		обслуживания, а также приоритет, который может быть назначен пакету.

       pie
		Пропорциональный интегральный контроллер-Enhanced (PIE)-это схема управления активной схемой управления. Он основан на
		пропорциональном интегральном контроллере, но направлен на контроль задержки.

       red
		Случайное раннее обнаружение имитирует физическую перегрузку путем случайного удаления пакетов при приближении к распределению
		пропускной способности. Хорошо подходит для приложений с очень большой пропускной способностью.

       rr
		Round-Robin qdisc с поддержкой многоэлементных сетевых устройств. Удалено из Linux с версии 2.6.27 ядра.

       sfb
		Stochastic Fair Blue - это бесклассовый qdisc для управления перегрузкой на основе потери пакетов и истории использования ссылок,
		пытаясь предотвратить невосприимчивые потоки (то есть потоки, которые не реагируют на маркировку перегрузок или упавшие пакеты) от
		воздействия производительности реагирующих потоков. В отличие от RED, где должна быть определена вероятность маркировки, BLUE
		пытается автоматически определить идеальную вероятность маркировки.

       sfq    Stochastic Fairness Queueing reorders queued traffic so each 'session' gets to send a packet in turn.

       tbf    The Token Bucket Filter is suited for slowing traffic down to a precisely configured rate.  Scales  well  to  large
              bandwidths.

CONFIGURING CLASSLESS QDISCS
       In the absence of classful qdiscs, classless qdiscs can only be attached at the root of a device. Full syntax:

       tc qdisc add dev DEV root QDISC QDISC-PARAMETERS

       To remove, issue

       tc qdisc del dev DEV root

       The pfifo_fast qdisc is the automatic default in the absence of a configured qdisc.

CLASSFUL QDISCS
       The classful qdiscs are:

       ATM    Map flows to virtual circuits of an underlying asynchronous transfer mode device.

       CBQ    Class  Based  Queueing implements a rich linksharing hierarchy of classes.  It contains shaping elements as well as
              prioritizing capabilities. Shaping is performed using link idle time calculations based on average packet size  and
              underlying link bandwidth. The latter may be ill-defined for some interfaces.

       DRR    The Deficit Round Robin Scheduler is a more flexible replacement for Stochastic Fairness Queuing. Unlike SFQ, there
              are no built-in queues -- you need to add classes and then set up filters to classify  packets  accordingly.   This
              can  be  useful e.g. for using RED qdiscs with different settings for particular traffic. There is no default class
              -- if a packet cannot be classified, it is dropped.

       DSMARK Classify packets based on TOS field, change TOS field of packets based on classification.

       HFSC   Hierarchical Fair Service Curve guarantees precise bandwidth and delay allocation for leaf  classes  and  allocates
              excess  bandwidth  fairly. Unlike HTB, it makes use of packet dropping to achieve low delays which interactive ses‐
              sions benefit from.

       HTB    The Hierarchy Token Bucket implements a rich linksharing hierarchy of classes with an  emphasis  on  conforming  to
              existing  practices.  HTB facilitates guaranteeing bandwidth to classes, while also allowing specification of upper
              limits to inter-class sharing. It contains shaping elements, based on TBF and can prioritize classes.

       PRIO   The PRIO qdisc is a non-shaping container for a configurable number of classes which are dequeued  in  order.  This
              allows for easy prioritization of traffic, where lower classes are only able to send if higher ones have no packets
              available. To facilitate configuration, Type Of Service bits are honored by default.

       QFQ    Quick Fair Queueing is an O(1) scheduler that provides near-optimal guarantees, and is the first  to  achieve  that
              goal with a constant cost also with respect to the number of groups and the packet length. The QFQ algorithm has no
              loops, and uses very simple instructions and data structures that lend themselves very well to a hardware implemen‐
              tation.

THEORY OF OPERATION
       Classes form a tree, where each class has a single parent.  A class may have multiple children. Some qdiscs allow for run‐
       time addition of classes (CBQ, HTB) while others (PRIO) are created with a static number of children.

       Qdiscs which allow dynamic addition of classes can have zero or more subclasses to which traffic may be enqueued.

       Furthermore, each class contains a leaf qdisc which by default has pfifo behaviour, although another qdisc can be attached
       in place. This qdisc may again contain classes, but each class can have only one leaf qdisc.

       When  a  packet  enters  a classful qdisc it can be classified to one of the classes within. Three criteria are available,
       although not all qdiscs will use all three:

       tc filters
              If tc filters are attached to a class, they are consulted first for relevant instructions. Filters can match on all
              fields of a packet header, as well as on the firewall mark applied by ipchains or iptables.

       Type of Service
              Some qdiscs have built in rules for classifying packets based on the TOS field.

       skb->priority
              Userspace programs can encode a class-id in the 'skb->priority' field using the SO_PRIORITY option.

       Each node within the tree can have its own filters but higher level filters may also point directly to lower classes.

       If  classification  did  not  succeed, packets are enqueued to the leaf qdisc attached to that class. Check qdisc specific
       manpages for details, however.

NAMING
       All qdiscs, classes and filters have IDs, which can either be specified or be automatically assigned.

       IDs consist of a major number and a minor number, separated by a colon - major:minor.  Both major and minor are  hexadeci‐
       mal  numbers  and  are limited to 16 bits. There are two special values: root is signified by major and minor of all ones,
       and unspecified is all zeros.

       QDISCS A qdisc, which potentially can have children, gets assigned a major number, called a 'handle',  leaving  the  minor
              number  namespace  available for classes. The handle is expressed as '10:'.  It is customary to explicitly assign a
              handle to qdiscs expected to have children.

       CLASSES
              Classes residing under a qdisc share their qdisc major number, but each have  a  separate  minor  number  called  a
              'classid'  that  has no relation to their parent classes, only to their parent qdisc. The same naming custom as for
              qdiscs applies.

       FILTERS
              Filters have a three part ID, which is only needed when using a hashed filter hierarchy.

PARAMETERS
       The following parameters are widely used in TC. For other parameters, see the man pages for individual qdiscs.

       RATES  Bandwidths or rates.  These parameters accept a floating point number, possibly followed by a unit (both SI and IEC
              units supported).

              bit or a bare number
                     Bits per second

              kbit   Kilobits per second

              mbit   Megabits per second

              gbit   Gigabits per second

              tbit   Terabits per second

              bps    Bytes per second

              kbps   Kilobytes per second

              mbps   Megabytes per second

              gbps   Gigabytes per second

              tbps   Terabytes per second

              To  specify  in  IEC  units, replace the SI prefix (k-, m-, g-, t-) with IEC prefix (ki-, mi-, gi- and ti-) respec‐
              tively.

              TC store rates as a 32-bit unsigned integer in bps internally, so we can specify a max rate of 4294967295 bps.

       TIMES  Length of time. Can be specified as a floating point number followed by an optional unit:

              s, sec or secs
                     Whole seconds

              ms, msec or msecs
                     Milliseconds

              us, usec, usecs or a bare number
                     Microseconds.

              TC defined its own time unit (equal to microsecond) and stores time values as 32-bit unsigned integer, thus we  can
              specify a max time value of 4294967295 usecs.

       SIZES  Amounts of data. Can be specified as a floating point number followed by an optional unit:

              b or a bare number
                     Bytes.

              kbit   Kilobits

              kb or k
                     Kilobytes

              mbit   Megabits

              mb or m
                     Megabytes

              gbit   Gigabits

              gb or g
                     Gigabytes

              TC stores sizes internally as 32-bit unsigned integer in byte, so we can specify a max size of 4294967295 bytes.

       VALUES Other  values  without  a unit.  These parameters are interpreted as decimal by default, but you can indicate TC to
              interpret them as octal and hexadecimal by adding a '0' or '0x' prefix respectively.

TC COMMANDS
       The following commands are available for qdiscs, classes and filter:

       add    Add a qdisc, class or filter to a node. For all entities, a parent must be passed, either by passing its ID  or  by
              attaching  directly  to  the  root of a device.  When creating a qdisc or a filter, it can be named with the handle
              parameter. A class is named with the classid parameter.

       delete A qdisc can be deleted by specifying its handle, which may also be 'root'. All subclasses and their leaf qdiscs are
              automatically deleted, as well as any filters attached to them.

       change Some  entities can be modified 'in place'. Shares the syntax of 'add', with the exception that the handle cannot be
              changed and neither can the parent. In other words, change cannot move a node.

       replace
              Performs a nearly atomic remove/add on an existing node id. If the node does not exist yet it is created.

       link   Only available for qdiscs and performs a replace where the node must exist already.

OPTIONS
       -b, -b filename, -batch, -batch filename
              read commands from provided file or standard input and invoke them.  First failure will cause termination of tc.

       -force don't terminate tc on errors in batch mode.  If there were any errors during execution of the commands, the  appli‐
              cation return code will be non zero.

       -n, -net, -netns <NETNS>
              switches tc to the specified network namespace NETNS.  Actually it just simplifies executing of:

              ip netns exec NETNS tc [ OPTIONS ] OBJECT { COMMAND | help }

              to

              tc -n[etns] NETNS [ OPTIONS ] OBJECT { COMMAND | help }

       -cf, -conf <FILENAME>
              specifies path to the config file. This option is used in conjuction with other options (e.g.  -nm).

FORMAT
       The show command has additional formatting options:

       -s, -stats, -statistics
              output more statistics about packet usage.

       -d, -details
              output more detailed information about rates and cell sizes.

       -r, -raw
              output raw hex values for handles.

       -p, -pretty
              decode filter offset and mask values to equivalent filter commands based on TCP/IP.

       -iec   print rates in IEC units (ie. 1K = 1024).

       -g, -graph
              shows classes as ASCII graph. Prints generic stats info under each class if -s option was specified. Classes can be
              filtered only by dev option.

       -nm, -name
              resolve class name from /etc/iproute2/tc_cls file or from file specified by -cf option. This file is just a mapping
              of classid to class name:

                 # Here is comment
                 1:40   voip # Here is another comment
                 1:50   web
                 1:60   ftp
                 1:2    home

              tc  will not fail if -nm was specified without -cf option but /etc/iproute2/tc_cls file does not exist, which makes
              it possible to pass -nm option for creating tc alias.

EXAMPLES
       tc -g class show dev eth0
           Shows classes as ASCII graph on eth0 interface.

       tc -g -s class show dev eth0
           Shows classes as ASCII graph with stats info under each class.

HISTORY
       tc was written by Alexey N. Kuznetsov and added in Linux 2.2.

SEE ALSO
       tc-basic(8), tc-bfifo(8), tc-bpf(8), tc-cbq(8),  tc-cgroup(8),  tc-choke(8),  tc-codel(8),  tc-drr(8),  tc-ematch(8),  tc-
       flow(8),  tc-flower(8),  tc-fq(8), tc-fq_codel(8), tc-fw(8), tc-hfsc(7), tc-hfsc(8), tc-htb(8), tc-mqprio(8), tc-pfifo(8),
       tc-pfifo_fast(8), tc-red(8), tc-route(8), tc-sfb(8), tc-sfq(8), tc-stab(8), tc-tbf(8), tc-tcindex(8), tc-u32(8),
       User documentation at http://lartc.org/, but please direct bugreports and patches to: <netdev@vger.kernel.org>

AUTHOR
       Manpage maintained by bert hubert (ahu@ds9a.nl)

iproute2                                                 16 December 2001                                                   TC(8)
