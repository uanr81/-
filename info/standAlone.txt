Stand-alone GNU Info
********************

В этой документации описывается автономный Info-считыватель, который
вы можете использовать для чтения документации Info.

   Если вы новичок в Info reader, вы можете начать работу с ввода
'H' для списка основных привязок клавиш. Вы можете прочитать остальную
часть этого руководства, набрав <SPC> и <DEL> (or <Space> and <Backspace>) Двигаться
вперед и назад в нем.

* Menu:

* Stand-alone Info::            Что такое Info?
* Invoking Info::               Параметры, которые вы можете передать в командной строке.
* Cursor Commands::             Команды, которые перемещают курсор внутри узла.
* Scrolling Commands::          Команды для чтения текста внутри узла.
* Node Commands::               Команды для выбора нового узла.
* Searching Commands::          Команды для поиска в Info-файле.
* Index Commands::              Команды поиска индексов.
* Xref Commands::               Команды для выбора перекрестных ссылок.
* Window Commands::             Команды, управляющие несколькими окнами.
* Printing Nodes::              Как распечатать содержимое узла.
* Miscellaneous Commands::      Несколько команд, которые не подпадают под категорию.
* Variables::                   Как изменить поведение по умолчанию в Info.
* Colors and Styles::           Настроить цвета, используемые Info.
* Custom Key Bindings::         Как определить свои собственные привязки между ключами.
* Index::                       Глобальный индекс.


File: info-stnd.info,  Node: Stand-alone Info,  Next: Invoking Info,  Prev: Top,  Up: Top

1 Stand-alone Info
******************

The "Info" program described here is a stand-alone program, part of the
Texinfo distribution, which is used to view Info files on a text
terminal.  "Info files" are typically the result of processing Texinfo
files with the program 'makeinfo' (also in the Texinfo distribution).

   Texinfo itself (*note (texinfo)Top::) is a documentation system that
uses a single source file to produce both on-line information and
printed output.  You can typeset and print the files that you read in
Info.

   GNU Emacs also provides an Info reader (just type 'M-x info' in
Emacs).  Emacs Info and stand-alone Info have nearly identical user
interfaces, although customization and other details are different (this
manual explains the stand-alone Info reader).  The Emacs Info reader
supports the X Window System and other such bitmapped interfaces, not
just plain ASCII, so if you want a prettier display for Info files, you
should try it.  You can use Emacs Info without using Emacs for anything
else.  (Type 'C-x C-c' to exit; this also works in the stand-alone Info
reader.)  *Note (info)Top:: for a tutorial and more background
information about the Info system, as well as information about the Info
reader that is part of GNU Emacs,

   Please report bugs in this stand-alone Info program to
<bug-texinfo@gnu.org>.  Bugs in the Emacs Info reader should be sent to
<bug-gnu-emacs@gnu.org>.


File: info-stnd.info,  Node: Invoking Info,  Next: Cursor Commands,  Prev: Stand-alone Info,  Up: Top

2 Invoking Info
***************

GNU Info accepts several options to control the initial node or nodes
being viewed, and to specify which directories to search for Info files.
Here is a template showing an invocation of GNU Info from the shell:

     info [OPTION...] [MANUAL] [MENU-OR-INDEX-ITEM...]

   Info will look for an entry called MANUAL in the directory files,
which are named 'dir', that it finds in its search path.  The search is
case-insensitive and considers substrings.  (If MANUAL is not given, by
default Info displays a composite directory listing, constructed by
combining the 'dir' files.)  A basic example:

     info coreutils

   This looks for an entry labelled 'coreutils', or 'Coreutils', etc.,
and if found, displays the referenced file (e.g., 'coreutils.info') at
the location given.  'info coreu' will find it too, if there is no
better match.

   Another example:

     info ls

   Assuming the normal 'dir' entry for 'ls', this will show the 'ls'
documentation, which happens to be within the 'coreutils' manual rather
than a separate manual.  The 'dir' entries can point to an any node
within a manual, so that users don't have to be concerned with the exact
structure used by different authors.

   If no entry is found in the directories, Info looks for files in its
search path with names based on MANUAL.  If MANUAL is not found, Info
looks for it with a number of known extensions of Info files, namely
'.info', '-info', '/index', and '.inf'.  For every known extension, if a
regular file is not found, Info looks for a compressed file.  Info
supports files compressed with 'gzip', 'xz', 'bzip2', 'lzip', 'lzma',
'compress' and 'yabba' programs, assumed to have extensions '.z', '.gz',
'.xz', '.bz2', '.lz', '.lzma', '.Z', and '.Y' respectively.(1)

   You can specify the name of a node to visit with the '--node' or '-n'
option.  Alternatively, you can specify the file and node together using
the same format that occurs in Info cross-references.  These two
examples both load the 'Files' node within the 'emacs' manual:

     info emacs -n Files
     info '(emacs)Files'

   If you want to load a file without looking in the search path,
specify MANUAL either as an absolute path, or as a path relative to the
current directory which contains at least one slash character.  (You can
also use the '--file' option for similar behavior, described below.)
Examples:

     info /usr/local/share/info/bash.info
     info ./document.info

Info looks for MANUAL only in the explicitly specified directory, and
adds that directory to its search path.

   Info treats any remaining arguments as the names of menu items, or
(see below) index entries.  The first argument is a menu item in the
'Top' node of the file loaded, the second argument is a menu item in the
first argument's node, etc.  You can move to the node of your choice by
specifying the menu names which describe the path to that node.  For
example,

     info emacs buffers
     info texinfo Overview 'Using Texinfo'

The first example selects the menu item 'Buffers' in the node
'(emacs)Top'.  The second example loads the 'texinfo' file and looks in
its top-level menu for a 'Overview' item, looks in the menu of the node
referenced, and finally displays the node referenced by the 'Using
Texinfo' item.

   If there was only one MENU-OR-INDEX-ITEM argument and it wasn't found
as a menu item, Info looks for it as an index entry.  For example:

     info libc printf

This loads the libc Info manual and first looks for 'printf' in the
top-level menu as usual; since it isn't there (at this writing), it then
looks in the indices.  If it's found there (which it is), the relevant
node at the given location is displayed.

   A complete list of options follows.

'--all'
'-a'
     Find all files matching MANUAL.  Three usage patterns are
     supported, as follows.

     First, if '--all' is used together with '--where', 'info' prints
     the names of all matching files found on standard output (including
     '*manpages*' if relevant) and exits.

     Second, if '--all' is used together with '--output', the contents
     of all matched files are dumped to the specified output file.

     Otherwise, an interactive session is initiated.  If more than one
     file matches, a menu node is displayed listing the matches and
     allowing you to select one.  This menu node can be brought back at
     any time by pressing 'C-x f'.  If there is only one match, 'info'
     starts as usual.

     The '--index-search' and '--node' options cannot be used together
     with this option.

'--apropos=STRING'
'-k STRING'
     Specify a string to search in every index of every Info file
     installed on your system.  Info looks up the named STRING in all
     the indices it can find, prints the results to standard output, and
     then exits.  If you are not sure which Info file explains certain
     issues, this option is your friend.  (If your system has a lot of
     Info files installed, searching all of them might take some time!)

     You can invoke the apropos command from inside Info; see *note
     Searching Commands::.

'--debug=NUMBER'
'-x NUMBER'
     Print additional debugging information.  The argument specifies the
     verbosity level, so a higher level includes all the information
     from lower levels.  For all available debugging output, use
     '-x -1'.  Info version 6.1.92 has these levels:

     '1'
          Print information about file handling, such as looking for
          'dir' files and nodes written with '--output'.

     '2'
          Print operations relating to 'INFOPATH'.

     '3'
          Print information about node searching.

     Before Info's full-screen output is initialized, debugging output
     goes to standard error.  After it is initialized, the debugging
     output is written to the file 'infodebug' in the current working
     directory.

'--directory DIRECTORY-PATH'
'-d DIRECTORY-PATH'
     Add DIRECTORY-PATH to the list of directory paths searched when
     Info needs to find a file.  You may issue '--directory' multiple
     times; once for each directory which contains Info files, or with a
     list of such directories separated by a colon (or semicolon on
     MS-DOS/MS-Windows).

     Directories specified in the environment variable 'INFOPATH' are
     added to the directories specified with '--directory', if any.  The
     value of 'INFOPATH' is a list of directories usually separated by a
     colon; on MS-DOS/MS-Windows systems, the semicolon is used.  If the
     value of 'INFOPATH' ends with a colon (or semicolon on
     MS-DOS/MS-Windows), the initial list of directories is constructed
     by appending the build-time default to the value of 'INFOPATH'.

     If you do not define 'INFOPATH', Info uses a default path defined
     when Info was built as the initial list of directories.

     Regardless of whether 'INFOPATH' is defined, the default
     documentation directory defined when Info was built is added to the
     search path.  If you do not want this directory to be included, set
     the 'infopath-no-defaults' variable to 'On' (*note
     infopath-no-defaults::).

     If the list of directories contains the element 'PATH', that
     element is replaced by a list of directories derived from the value
     of the environment variable 'PATH'.  Each path element of the form
     DIR/BASE is replaced by DIR'/share/info' or DIR'/info', provided
     that directory exists.

'--dribble=FILE'
     Specify a file where all user keystrokes will be recorded.  This
     file can be used later to replay the same sequence of commands, see
     the '--restore' option below.

'--file MANUAL'
'-f MANUAL'
     Specify a particular manual to visit without looking its name up in
     any 'dir' files.

     With this option, it starts by trying to visit '(MANUAL)Top', i.e.,
     the 'Top' node in (typically) 'MANUAL.info'.  As above, it tries
     various file extensions to find the file.  If no such file (or
     node) can be found, Info exits without doing anything.  As with the
     'dir' lookup described above, any extra MENU-ITEM arguments are
     used to locate a node within the loaded file.

     If MANUAL is an absolute file name, or begins with './' or '../',
     or contains an intermediate directory, Info will only look for the
     file in the directory specified, and add this directory to
     'INFOPATH'.  (This is the same as what happens when '--file' is not
     given.)

'--help'
'-h'
     Output a brief description of the available Info command-line
     options.

'--index-search STRING'
     After processing all command-line arguments, go to the index in the
     selected Info file and search for index entries which match STRING.
     If such an entry is found, the Info session begins with displaying
     the node pointed to by the first matching index entry; press ',' to
     step through the rest of the matching entries.  If no such entry
     exists, print 'no entries found' and exit with nonzero status.
     This can be used from another program as a way to provide online
     help, or as a quick way of starting to read an Info file at a
     certain node when you don't know the exact name of that node.

     This command can also be invoked from inside Info; *note Searching
     Commands::.

'--init-file INIT-FILE'
     Read key bindings and variable settings from INIT-FILE instead of
     the '.infokey' file in your home directory.  *Note Custom Key
     Bindings::.

'--node NODENAME'
'-n NODENAME'
     Specify a particular node to visit in the initial file that Info
     loads.  You may specify '--node' multiple times: for an interactive
     Info, each NODENAME is visited in its own window; for a
     non-interactive Info (such as when '--output' is given) each
     NODENAME is processed sequentially.

     You can specify both the file and node to the '--node' option using
     the usual Info syntax, but don't forget to escape the open and
     close parentheses and whitespace from the shell; for example:
     info --node "(emacs)Buffers"

'--output FILE'
'-o FILE'
     Direct output to FILE.  Each node that Info visits will be output
     to FILE instead of interactively viewed.  A value of '-' for FILE
     means standard output.

'--no-raw-escapes'
'--raw-escapes, -R'
     By default, Info passes SGR terminal control sequences (also known
     as ANSI escape sequences) found in documents directly through to
     the terminal.  If you use the '--no-raw-escapes' options, these
     sequences are displayed as other control characters are; for
     example, an 'ESC' byte is displayed as '^['.  The '--raw-escapes'
     and '-R' options do not do anything, but are included for
     completeness.

     Some versions of Groff (*note (groff)Top::) produce man pages with
     ANSI escape sequences for bold, italics, and underlined characters,
     and for colorized text.  If your 'man' command uses a version of
     Groff that does this (original GNU Groff does), and your terminal
     supports these sequences, Info will display any bold or underlined
     text in man pages.  Some distributions have modified Groff to
     require setting the 'GROFF_SGR' environment variable to get these
     sequences.  *Note (groff)Invoking grotty::.

'--restore=DRIBBLE-FILE'
     Read keystrokes from DRIBBLE-FILE, presumably recorded during
     previous Info session (see the description of the '--dribble'
     option above).  When the keystrokes in the files are all read, Info
     reverts its input to the usual interactive operation.

'--show-malformed-multibytes'
'--no-show-malformed-multibytes'
     Show malformed multibyte sequences in the output.  By default, such
     sequences are dropped.

'--show-options'
'--usage'
'-O'
     Tell Info to look for the node that describes how to invoke the
     program and its command-line options, and begin the session by
     displaying that node.  It is provided to make it easier to find the
     most important usage information in a manual without navigating
     through menu hierarchies.  The effect is similar to the 'M-x
     goto-invocation' command (*note goto-invocation::) from inside
     Info.

'--speech-friendly'
'-b'
     On MS-DOS/MS-Windows only, this option causes Info to use standard
     file I/O functions for screen writes.  (By default, Info uses
     direct writes to the video memory on these systems, for faster
     operation and colored display support.)  This allows the speech
     synthesizers used by blind persons to catch the output and convert
     it to audible speech.

'--strict-node-location'
     This option causes Info not to search "nearby" to locate nodes, and
     instead strictly use the information provided in the Info file.
     The practical use for this option is for debugging programs that
     write Info files, to check that they are outputting the correct
     locations.  Due to bugs and malfeasances in the various Info
     writing programs over the years and versions, it is not advisable
     to ever use this option when just trying to read documentation.

'--subnodes'
     This option only has meaning when given in conjunction with
     '--output'.  It means to recursively output the nodes appearing in
     the menus of each node being output.  Menu items which resolve to
     external Info files are not output, and neither are menu items
     which are members of an index.  Each node is only output once.

'-v NAME=VALUE'
'--variable=NAME=VALUE'
     Set the 'info' variable NAME to VALUE.  *Note Variables::.

'--version'
     Prints the version information of Info and exits.

'--vi-keys'
     This option binds functions to keys differently, to emulate the key
     bindings of 'vi' and Less.  The default key bindings are generally
     modeled after Emacs.  (*Note Custom Key Bindings:: for a more
     general way of altering GNU Info's key bindings.)

'--where'
'--location'
'-w'
     Show the filename that would be read and exit, instead of actually
     reading it and starting Info.

   Finally, Info defines many default key bindings and variables.  *Note
Custom Key Bindings:: for information on how to customize these
settings.

   ---------- Footnotes ----------

   (1) On MS-DOS, Info allows for the Info extension, such as '.inf',
and the short compressed file extensions, such as '.z' and '.gz', to be
merged into a single extension, since DOS doesn't allow more than a
single dot in the basename of a file.  Thus, on MS-DOS, if Info looks
for 'bison', file names like 'bison.igz' and 'bison.inz' will be found
and decompressed by 'gunzip'.


File: info-stnd.info,  Node: Cursor Commands,  Next: Scrolling Commands,  Prev: Invoking Info,  Up: Top

3 Moving the Cursor
*******************

GNU Info has several commands which allow you to move the cursor about
the screen.  The notation used in this manual to describe keystrokes is
the same as the notation used within the Emacs manual, and the GNU
Readline manual.  *Note (emacs)User Input:: if you are unfamiliar with
the notation.  (1)

   The following table lists the basic cursor movement commands in Info.
Each entry consists of the key sequence you should type to execute the
cursor movement, the 'M-x'(2) command name (displayed in parentheses),
and a short description of what the command does.  All of the cursor
motion commands can take a "numeric" argument (see *note
'universal-argument': Miscellaneous Commands. to find out how to supply
them).  With a numeric argument, the motion commands are simply executed
that many times; for example, a numeric argument of 4 given to
'next-line' causes the cursor to move down 4 lines.  With a negative
numeric argument, the motion is reversed; an argument of -4 given to the
'next-line' command would cause the cursor to move _up_ 4 lines.

'C-n' ('next-line')
<DOWN> (an arrow key)
     Move the cursor down to the next line.

'C-p' ('prev-line')
<UP> (an arrow key)
     Move the cursor up to the previous line.

'C-a' ('beginning-of-line')
<Home> (on DOS/Windows only)
     Move the cursor to the start of the current line.

'C-e' ('end-of-line')
<End> (on DOS/Windows only)
     Move the cursor to the end of the current line.

'C-f' ('forward-char')
<RIGHT> (an arrow key)
     Move the cursor forward a character.

'C-b' ('backward-char')
<LEFT> (an arrow key)
     Move the cursor backward a character.

'M-f' ('forward-word')
'C-<RIGHT>' (on DOS/Windows only)
     Move the cursor forward a word.

'M-b' ('backward-word')
'C-<LEFT>' (on DOS/Windows only)
     Move the cursor backward a word.

'M-<' ('beginning-of-node')
'C-<Home>' (on DOS/Windows only)
'b'
'M-b', vi-like operation
     Move the cursor to the start of the current node.

'M->' ('end-of-node')
'C-<End>' (on DOS/Windows only)
'e'
     Move the cursor to the end of the current node.

'M-r' ('move-to-window-line')
     Move the cursor to a specific line of the window.  Without a
     numeric argument, 'M-r' moves the cursor to the start of the line
     in the center of the window.  With a numeric argument of N, 'M-r'
     moves the cursor to the start of the Nth line in the window.

   ---------- Footnotes ----------

   (1) Here's a short summary.  'C-X' means press the 'CTRL' key and the
key X.  'M-X' means press the 'META' key and the key X.  On many
terminals the 'META' key is known as the 'ALT' key.  'SPC' is the space
bar.  The other keys are usually called by the names imprinted on them.

   (2) 'M-x' is also a command; it invokes 'execute-extended-command',
letting you run a command by name.  *Note Executing an extended command:
(emacs)M-x, for more detailed information.


File: info-stnd.info,  Node: Scrolling Commands,  Next: Node Commands,  Prev: Cursor Commands,  Up: Top

4 Moving Text Within a Window
*****************************

Sometimes you are looking at a screenful of text, and only part of the
current paragraph you are reading is visible on the screen.  The
commands detailed in this section are used to shift which part of the
current node is visible on the screen.

   Scrolling commands are bound differently when '--vi-keys' operation
is in effect (*note --vi-keys::).  These key bindings are designated
with "vi-like operation".  *Note Custom Key Bindings:: for information
on arbitrarily customizing key bindings and variable settings.

<SPC> ('scroll-forward')
<NEXT>
     Shift the text in this window up.  That is, show more of the node
     which is currently below the bottom of the window.  With a numeric
     argument, show that many more lines at the bottom of the window; a
     numeric argument of 4 would shift all of the text in the window up
     4 lines (discarding the top 4 lines), and show you four new lines
     at the bottom of the window.  Without a numeric argument, <SPC>
     takes the bottom two lines of the window and places them at the top
     of the window, redisplaying almost a completely new screenful of
     lines.  If you are at the end of a node, <SPC> takes you to the
     "next" node, so that you can read an entire manual from start to
     finish by repeating <SPC>.

     The default scroll size is one screenful, but it can be changed by
     invoking the ('scroll-forward-page-only-set-window') command, 'z'
     under '--vi-keys', with a numeric argument.

     The <NEXT> key is known as the <PageDown> key on some keyboards.

'C-v' ('scroll-forward-page-only')
'C-f', vi-like operation
'f', vi-like operation
'M-SPC', vi-like operation
     Shift the text in this window up.  This is identical to the <SPC>
     operation above, except that it never scrolls beyond the end of the
     current node.

'z' ('scroll-forward-page-only-set-window', vi-like operation)
     Scroll forward, like with 'C-v', but if a numeric argument is
     specified, it becomes the default scroll size for subsequent
     'scroll-forward' and 'scroll-backward' commands and their ilk.

<DEL> ('scroll-backward')
<PREVIOUS>
     Shift the text in this window down.  The inverse of
     'scroll-forward'.  If you are at the start of a node, <DEL> takes
     you to the "previous" node, so that you can read an entire manual
     from finish to start by repeating <DEL>.  The default scroll size
     can be changed by invoking the
     ('scroll-backward-page-only-set-window') command, 'w' under
     '--vi-keys', with a numeric argument.

     If your keyboard lacks the <DEL> key, look for a key called <BS>,
     or 'Backspace', sometimes designated with an arrow which points to
     the left, which should perform the same function.

     The <PREVIOUS> key is the <PageUp> key on many keyboards.  Emacs
     refers to it by the name <PRIOR>.

'M-v' ('scroll-backward-page-only')
'b', vi-like operation
'C-b', vi-like operation
     Shift the text in this window down.  The inverse of
     'scroll-forward-page-only'.  Does not scroll beyond the start of
     the current node.  The default scroll size can be changed by
     invoking the 'scroll-backward-page-only-set-window' command, 'w'
     under '--vi-keys', with a numeric argument.

'w' ('scroll-backward-page-only-set-window', vi-like operation)
     Scroll backward, like with 'M-v', but if a numeric argument is
     specified, it becomes the default scroll size for subsequent
     'scroll-forward' and 'scroll-backward' commands.

'C-n' ('down-line', vi-like operation)
'C-e', vi-like operation
<RET>, vi-like operation
<LFD>, vi-like operation
<DOWN>, vi-like operation
     Scroll forward by one line.  With a numeric argument, scroll
     forward that many lines.

'C-p' ('up-line', vi-like operation)
<UP>, vi-like operation
'y', vi-like operation
'k', vi-like operation
'C-k', vi-like operation
'C-y', vi-like operation
     Scroll backward one line.  With a numeric argument, scroll backward
     that many lines.

'd' ('scroll-half-screen-down', vi-like operation)
'C-d', vi-like operation
     Scroll forward by half of the screen size.  With a numeric
     argument, scroll that many lines.  If an argument is specified, it
     becomes the new default number of lines to scroll for subsequent
     'd' and 'u' commands.

'u' ('scroll-half-screen-up', vi-like operation)
'C-u', vi-like operation
     Scroll back by half of the screen size.  With a numeric argument,
     scroll that many lines.  If an argument is specified, it becomes
     the new default number of lines to scroll for subsequent 'u' and
     'd' commands.

   The 'scroll-forward' and 'scroll-backward' commands can also move
forward and backward through the node structure of the file.  If you
press <SPC> while viewing the end of a node, or <DEL> while viewing the
beginning of a node, what happens is controlled by the variable
'scroll-behavior' (*note scroll-behavior::).

   The 'scroll-forward-page-only' and 'scroll-backward-page-only'
commands never scroll beyond the current node.

'C-l' ('redraw-display')
     Redraw the display from scratch, or shift the line containing the
     cursor to a specified location.  With no numeric argument, 'C-l'
     clears the screen, and then redraws its entire contents.  Given a
     numeric argument of N, the line containing the cursor is shifted so
     that it is on the Nth line of the window.

'C-x w' ('toggle-wrap')
     Toggles the state of line wrapping in the current window.
     Normally, lines which are longer than the screen width "wrap",
     i.e., they are continued on the next line.  Lines which wrap have a
     '\' appearing in the rightmost column of the screen.  You can cause
     such lines to be terminated at the rightmost column by changing the
     state of line wrapping in the window with 'C-x w'.  When a line
     which needs more space than one screen width to display is
     displayed, a '$' appears in the rightmost column of the screen, and
     the remainder of the line is invisible.  When long lines are
     truncated, the mode line displays the '$' character near its left
     edge.


File: info-stnd.info,  Node: Node Commands,  Next: Searching Commands,  Prev: Scrolling Commands,  Up: Top

5 Selecting a Node
******************

This section details the numerous Info commands which select a new node
to view in the current window.

   The most basic node commands are 'n', 'p', 'u', and 'l'.  Note that
the commands to select nodes are mapped differently when '--vi-keys' is
in effect; these keybindings are designated below as "vi-like
operation".

   When you are viewing a node, the top line of the node contains some
Info "pointers" which describe where the next, previous, and up nodes
are.  Info uses this line to move about the node structure of the file
when you use the following commands:

'n' ('next-node')
'C-<NEXT>' (on DOS/Windows only)
'C-x n', vi-like operation
     Select the 'Next' node.

     The <NEXT> key is known as the <PgDn> key on some keyboards.

'p' ('prev-node')
'C-<PREVIOUS>' (on DOS/Windows only)
     Select the 'Prev' node.

     The <PREVIOUS> key is known as the <PgUp> key on some keyboards.

'u' ('up-node')
'C-<UP>' (an arrow key on DOS/Windows only)
'C-x u', vi-like operation
     Select the 'Up' node.

   You can easily select a node that you have already viewed in this
window by using the 'l' command--this name stands for "last", and
actually moves backwards through the history of visited nodes for this
window.  This is handy when you followed a reference to another node,
possibly to read about a related issue, and would like then to resume
reading at the same place where you started the excursion.

   Each node where you press 'l' is discarded from the history.  Thus,
by the time you get to the first node you visited in a window, the
entire history of that window is discarded.

'l' ('history-node')
'C-<CENTER>' (on DOS/Windows only)
''', vi-like operation
     Pop the most recently selected node in this window from the node
     history.

   Two additional commands make it easy to select the most commonly
selected nodes; they are 't' and 'd'.

't' ('top-node')
'M-t', vi-like operation
     Select the node 'Top' in the current Info file.

'd' ('dir-node')
'M-d', vi-like operation
     Select the directory node (i.e., the node '(dir)').

   Here are some other commands which immediately result in the
selection of a different node in the current window:

'<' ('first-node')
'g', vi-like operation
     Selects the first node which appears in this file.  This node is
     most often 'Top', but it does not have to be.  With a numeric
     argument N, select the Nth node (the first node is node 1).  An
     argument of zero is the same as the argument of 1.

'>' ('last-node')
'G', vi-like operation
     Select the last node which appears in this file.  With a numeric
     argument N, select the Nth node (the first node is node 1).  An
     argument of zero is the same as no argument, i.e., it selects the
     last node.

']' ('global-next-node')
     Move forward or down through node structure.  If the node that you
     are currently viewing has a 'Next' pointer, that node is selected.
     Otherwise, if this node has a menu, the first menu item is
     selected.  If there is no 'Next' and no menu, the same process is
     tried with the 'Up' node of this node.

'[' ('global-prev-node')
     Move backward or up through node structure.  If the node that you
     are currently viewing has a 'Prev' pointer, that node is selected.
     Otherwise, if the node has an 'Up' pointer, that node is selected,
     and if it has a menu, the last item in the menu is selected.

   You can get the same behavior as 'global-next-node' and
'global-prev-node' while simply scrolling through the file with <SPC>
and <DEL> (*note scroll-behavior::).

'g' ('goto-node')
'C-x g', vi-like operation
     Read the name of a node and select it.  While reading the node
     name, completion (*note completion: The Echo Area.) is only done
     for the nodes which reside in one of the Info files that were
     loaded in the current Info session; if the desired node resides in
     some other file, you must type the node exactly as it appears in
     that Info file, and you must include the Info file of the other
     file.  For example,

          g(emacs)Buffers

     finds the node 'Buffers' in the Info file 'emacs'.

'O' ('goto-invocation')
'I', vi-like operation
     Read the name of a program and look for a node in the current Info
     file which describes the invocation and the command-line options
     for that program.  The default program name is derived from the
     name of the current Info file.  This command does the same as the
     '--show-options' command-line option (*note --show-options::), but
     it also allows to specify the program name; this is important for
     those manuals which describe several programs.

     If you need to find the Invocation node of a program that is
     documented in another Info file, you need to visit that file before
     invoking 'I'.  For example, if you are reading the Emacs manual and
     want to see the command-line options of the 'makeinfo' program,
     type 'g (texinfo) <RET>' and then 'I makeinfo <RET>'.  If you don't
     know what Info file documents the command, or if invoking 'I'
     doesn't display the right node, go to the '(dir)' node (using the
     'd' command) and invoke 'I' from there.

'G' ('menu-sequence')
     Read a sequence of menu entries and follow it.  Info prompts for a
     sequence of menu items separated by commas.  (Since commas are not
     allowed in a node name, they are a natural choice for a delimiter
     in a list of menu items.)  Info then looks up the first item in the
     menu of the node '(dir)' (if the '(dir)' node cannot be found, Info
     uses 'Top').  If such an entry is found, Info goes to the node it
     points to and looks up the second item in the menu of that node,
     etc.  In other words, you can specify a complete path which
     descends through the menu hierarchy of a particular Info file
     starting at the '(dir)' node.  This has the same effect as if you
     typed the menu item sequence on Info's command line, see *note Info
     command-line arguments processing: command-line menu items.  For
     example,

           G Texinfo,Overview,Reporting Bugs <RET>

     displays the node 'Reporting Bugs' in the Texinfo manual.  (You
     don't actually need to type the menu items in their full length, or
     in their exact letter-case.  However, if you do type the menu items
     exactly, Info will find it faster.)

     If any of the menu items you type are not found, Info stops at the
     last entry it did find and reports an error.

'C-x C-f' ('view-file')
     Read the name of a file and selects the entire file.  The command
          C-x C-f FILENAME
     is equivalent to typing
          g(FILENAME)*

'C-x C-b' ('list-visited-nodes')
     Make a window containing a menu of all of the currently visited
     nodes.  This window becomes the selected window, and you may use
     the standard Info commands within it.

'C-x b' ('select-visited-node')
     Select a node which has been previously visited in a visible
     window.  This is similar to 'C-x C-b' followed by 'm', but no
     window is created.

'M-x man'
     Read the name of a man page to load and display.  This uses the
     'man' command on your system to retrieve the contents of the
     requested man page.  See also *note --raw-escapes::.


File: info-stnd.info,  Node: Searching Commands,  Next: Index Commands,  Prev: Node Commands,  Up: Top

6 Searching an Info File
************************

GNU Info allows you to search for a sequence of characters throughout an
entire Info file.  Here are the commands to do this:

's' ('search')
'/'
     Read a string in the echo area and search for it, either as a
     regular expression (by default) or a literal string.  If the string
     includes upper-case characters, the Info file is searched
     case-sensitively; otherwise Info ignores the letter case.  With a
     numeric argument of N, search for Nth occurrence of the string.
     Negative arguments search backwards.

'?' ('search-backward')
     Read a string in the echo area and search backward through the Info
     file for that string.  If the string includes upper-case
     characters, the Info file is searched case-sensitively; otherwise
     Info ignores the letter case.  With a numeric argument of N, search
     for Nth occurrence of the string.  Negative arguments search
     forward.

'C-x n' ('search-next')
'}'
'n', vi-like operation
     Search forwards for the string used for the last search command.
     Case sensitivity and use of regular expressions are kept the same.
     With a numeric argument of N, search for Nth next occurrence.

     By default, the search starts at the position immediately following
     the cursor.  However, if the variable 'search-skip-screen' (*note
     'search-skip-screen': Variables.) is set, it starts at the
     beginning of the next page, thereby skipping all visibly displayed
     lines.

'C-x N' ('search-previous')
'{'
'N', vi-like operation
     Just like 'search-next', but in reverse.  You can use 'search-next'
     and 'search-previous' together to move forward and backward through
     matches.  'search-previous' usually goes to the place in the file
     that was displayed before an immediately preceding 'search-next',
     and vice versa.(1)

'R' ('toggle-regexp')
     Toggle between using regular expressions and literal strings for
     searching.  Info uses so-called 'extended' regular expression
     syntax (*note (grep)Regular Expressions::).

'S' ('search-case-sensitively'
     Read a string in the echo area and search for it case-sensitively,
     even if the string includes only lower-case letters.  With a
     numeric argument of N, search for Nth occurrence of the string.
     Negative arguments search backwards.

'C-s' ('isearch-forward')
     Interactively search forward through the Info file for a string as
     you type it.  If the string includes upper-case characters, the
     search is case-sensitive; otherwise Info ignores the letter case.

'C-r' ('isearch-backward')
     Interactively search backward through the Info file for a string as
     you type it.  If the string includes upper-case characters, the
     search is case-sensitive; otherwise Info ignores the letter case.

'M-/' ('tree-search')
     Recursively search this node and any subnodes listed in menus for a
     string.

'M-}' ('tree-search-next')
'M-{' ('tree-search-previous')
     Go forwards and backwards through the matches for an active tree
     search.

   The most basic searching command is 's' or '/' ('search').  The 's'
command prompts you for a string in the echo area, and then searches the
remainder of the Info file for an occurrence of that string.  If the
string is found, the node containing it is selected, and the cursor is
left positioned at the start of the found string.  Subsequent 's'
commands show you the default search string; pressing <RET> instead of
typing a new string will use the default search string.

   "Incremental searching" is similar to basic searching, but the string
is looked up while you are typing it, instead of waiting until the
entire search string has been specified.

   The tree search can be used from the 'dir' node to search through all
Info files installed on the system.  It can also be used to search
through a particular chapter of a manual when you are not interested in
matches in other chapters.

   If the 'highlight-searches' variable is set, matches from search
commands will be highlighted.  *Note 'highlight-searches': Variables.
Use the 'M-x clear-search' command to clear any search highlights.

   Both incremental and non-incremental search by default ignore the
case of letters when comparing the Info file text with the search
string.  However, an uppercase letter in the search string makes the
search case-sensitive.  You can force a case-sensitive non-incremental
search, even for a string that includes only lower-case letters, by
using the 'S' command ('search-case-sensitively').  The 'n' and 'N'
commands operate case-sensitively if the last search command was 'S'.

   Normally, the search pattern should not be shorter than some
predefined limit.  By default, this limit is set to 1 character.  *Note
min-search-length:: for more information on this.

   ---------- Footnotes ----------

   (1) This sometimes doesn't happen when 'search-skip-screen' is 'On',
and the search goes across nodes.


File: info-stnd.info,  Node: Index Commands,  Next: Xref Commands,  Prev: Searching Commands,  Up: Top

7 Index Commands
****************

GNU Info has commands to search through the indices of an Info file,
which helps you find areas within an Info file which discuss a
particular topic.

'i' ('index-search')
     Look up a string in the indices for this Info file, and select a
     node to which the found index entry points.

'I' ('virtual-index')
     Look up a string in the indices for this Info file, and show all
     the matches in a new virtual node, synthesized on the fly.

',' ('next-index-match')
     Move to the node containing the next matching index item from the
     last 'i' command.

'M-x index-apropos'
     Grovel the indices of all the known Info files on your system for a
     string, and build a menu of the possible matches.

   The most efficient means of finding something quickly in a manual is
the 'i' command ('index-search').  This command prompts for a string,
and then looks for that string in all the indices of the current Info
manual.  If it finds a matching index entry, it displays the node to
which that entry refers and prints the full text of the entry in the
echo area.  You can press ',' ('next-index-match') to find more matches.
A good Info manual has all of its important concepts indexed, so the 'i'
command lets you use a manual as a reference.

   If you don't know what manual documents something, try the 'M-x
index-apropos' command.  It prompts for a string and then looks up that
string in all the indices of all the Info documents installed on your
system.  It can also be invoked from the command line; see *note
--apropos::.
