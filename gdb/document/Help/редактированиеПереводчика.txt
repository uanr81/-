;;;###autoload
(defun google-translate-smooth-translate ()
  "Перевод текста с использованием переводов. Выполните запрос в
минибуфере для текста для перевода. Текст по умолчанию - это слово в
точке.

Вслучае когда `google-translate-translation-directions-alist' является пустым списком,
после ввода вводятся текстовые подсказки для исходного языка, а затем для целевых языков.

Вслучае когда `google-translate-translation-directions-alist' не пустой список принимается
текущее направление перевода и делается соответствующий перевод. Текущее направление
перевода указывается в приглашении минибуфера.

Текущее направление перевода может быть изменено непосредственно в минибуфере посредством
клавишных привязок, таких как C-n и C-p для перехода к следующему направлению перевода или
предыдущему, соответственно."
  (interactive)  

  (setq google-translate-translation-direction-query
        (if (use-region-p)//t
            (google-translate--strip-string
             (buffer-substring-no-properties (region-beginning) (region-end)))//строка переводимая
          (current-word t t)))

  (setq google-translate-current-translation-direction 0)

  (let* ((text (google-translate-query-translate-using-directions))//спрашивает в минибуфере перевод, нужно нажать клавишу <enter>
         (source-language (google-translate--current-direction-source-language))//"en"
         (target-language (google-translate--current-direction-target-language)))//"ru"
    (when (null source-language)
      (setq source-language (google-translate-read-source-language)))
    (when (null target-language)
      (setq target-language (google-translate-read-target-language)))
    (google-translate-translate source-language target-language text)))


(provide 'google-translate-smooth-ui)

;;; google-translate-smooth-ui.el ends here
*****************************************************************************************
(defun google-translate-translate (source-language target-language text &optional output-destination)
  "перевод TEXT SOURCE-LANGUAGE на язык TARGET-LANGUAGE.

В случае `google-translate-output-destination' указывает на nil выдает буфер
с именем *Google Translate* с доступными переводами
TEXT. В случае `google-translate-output-destination' указывающего на
`echo-area' Выводит трансляцию в эхо-области. Если
`google-translate-output-destination' указывает на `popup' Выводит перевод во всплывающей
подсказке, используя `popup' пакет.

Иметь дело с multi-line регионами, Последовательности пробелов заменяются одним пробелом.
Если в области нет текста, печатается сообщение."
  (let* ((json (google-translate-request source-language//Отправьте HTTP-запрос Переводчика Google, который отправил перевод ТЕКСТА с ИСТОЧНИКА-ЯЗЫКА на TARGET-LANGUAGE. Возвращает ответ в формате json
                                         target-language
                                         text)))
    (if (null json)
        (message "Nothing to translate.")
      (let* ((detailed-translation
              (google-translate-json-detailed-translation json))
             (detailed-definition
              (google-translate-json-detailed-definition json))
             (gtos
              (make-gtos
               :source-language source-language
               :target-language target-language
               :auto-detected-language (aref json 2)
               :text text
               :text-phonetic (google-translate-json-text-phonetic json)
               :translation (google-translate-json-translation json)
               :translation-phonetic (google-translate-json-translation-phonetic json)
               :detailed-translation detailed-translation
               :detailed-definition detailed-definition
               :suggestion (when (null detailed-translation)
                             (google-translate-json-suggestion json))))
             (output-destination (if (null output-destination)
                                     google-translate-output-destination
                                   output-destination)))
        (cond
         ((null output-destination)
          (google-translate-buffer-output-translation gtos))
         ((equal output-destination 'echo-area)
          (google-translate-echo-area-output-translation gtos))
         ((equal output-destination 'popup)
          (google-translate-popup-output-translation gtos))
         ((equal output-destination 'kill-ring)
          (google-translate-kill-ring-output-translation gtos))
         ((equal output-destination 'help)
          (let ((describe-func
                 (function
                  (lambda (gtos)
                    (google-translate-help-buffer-output-translation gtos)))))
            (help-setup-xref (list 'google-translate-translate source-language target-language text) nil)
            (with-help-window (help-buffer)
              (funcall describe-func gtos)))))))))
